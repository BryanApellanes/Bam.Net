<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.QualityTools.UnitTestFramework</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute">
      <summary>
                    Identifies a method that contains code to be used after all tests in the assembly have run and to free resources obtained by the assembly. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute" /> class.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute">
      <summary>
                    Identifies a method that contains code to be used before all tests in the assembly have run and to allocate resources obtained by the assembly. This class cannot be inherited.  
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute" /> class.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert">
      <summary>
                    Verifies conditions in unit tests using true/false propositions.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double)">
      <summary>
                    Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other.
                </summary>
      <param name="expected">
                    The first double to compare. This is the double the unit test expects.
                </param>
      <param name="actual">
                    The second double to compare. This is the double the unit test produced.
                </param>
      <param name="delta">
                    The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
      <summary>
                    Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails.
                </summary>
      <param name="expected">
                    The first double to compare. This is the double the unit test expects.
                </param>
      <param name="actual">
                    The second double to compare. This is the double the unit test produced.
                </param>
      <param name="delta">
                    The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
      <summary>
                    Verifies that two specified doubles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="expected">
                    The first double to compare. This is the double the unit tests expects.
                </param>
      <param name="actual">
                    The second double to compare. This is the double the unit test produced.
                </param>
      <param name="delta">
                    The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object)">
      <summary>
                    Verifies that two specified objects are equal. The assertion fails if the objects are not equal.
                </summary>
      <param name="expected">
                    The first object to compare. This is the object the unit test expects.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object,System.String)">
      <summary>
                    Verifies that two specified objects are equal. The assertion fails if the objects are not equal. Displays a message if the assertion fails.
                </summary>
      <param name="expected">
                    The first object to compare. This is the object the unit test expects.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>
                    Verifies that two specified objects are equal. The assertion fails if the objects are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="expected">
                    The first object to compare. This is the object the unit test expects.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single)">
      <summary>
                    Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other.
                </summary>
      <param name="expected">
                    The first single to compare. This is the single the unit test expects.
                </param>
      <param name="actual">
                    The second single to compare. This is the single the unit test produced.
                </param>
      <param name="delta">
                    The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>
                    Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails.
                </summary>
      <param name="expected">
                    The first single to compare. This is the single the unit test expects.
                </param>
      <param name="actual">
                    The second single to compare. This is the single the unit test produced.
                </param>
      <param name="delta">
                    The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
      <summary>
                    Verifies that two specified singles are equal, or within the specified accuracy of each other. The assertion fails if they are not within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="expected">
                    The first single to compare. This is the single the unit test expects.
                </param>
      <param name="actual">
                    The second single to compare. This is the single the unit test produced.
                </param>
      <param name="delta">
                    The required accuracy. The assertion will fail only if <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is different from <paramref name="actual" /> by more than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean)">
      <summary>
                    Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal.
                </summary>
      <param name="expected">
                    The first string to compare. This is the string the unit test expects.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
                    Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal.
                </summary>
      <param name="expected">
                    The first string to compare. This is the string the unit test expects.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
      <summary>
                    Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal. Displays a message if the assertion fails.
                </summary>
      <param name="expected">
                    The first string to compare. This is the string the unit test expects.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
      <summary>
                    Verifies that two specified strings are equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="expected">
                    The first string to compare. This is the string the unit test expects.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String)">
      <summary>
                    Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal. Displays a message if the assertion fails.
                </summary>
      <param name="expected">
                    The first string to compare. This is the string the unit test expects.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
      <summary>
                    Verifies that two specified strings are equal, ignoring case or not as specified. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="expected">
                    The first string to compare. This is the string the unit test expects.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0)">
      <summary>
                    Verifies that two specified generic type data are equal. The assertion fails if they are not equal.
                </summary>
      <param name="expected">
                    The first generic type data to compare. This is the generic type data the unit test expects.
                </param>
      <param name="actual">
                    The second generic type data to compare. This is the generic type data the unit test produced.
                </param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String)">
      <summary>
                    Verifies that two specified generic type data are equal. The assertion fails if they are not equal. Displays a message if the assertion fails.
                </summary>
      <param name="expected">
                    The first generic type data to compare. This is the generic type data the unit test expects.
                </param>
      <param name="actual">
                    The second generic type data to compare. This is the generic type data the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
      <summary>
                    Verifies that two specified generic type data are equal. The assertion fails if they are not equal. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="expected">
                    The first generic type data to compare. This is the generic type data the unit test expects.
                </param>
      <param name="actual">
                    The second generic type data to compare. This is the generic type data the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> is not equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double)">
      <summary>
                    Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other.
                </summary>
      <param name="notExpected">
                    The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second double to compare. This is the double the unit test produced.
                </param>
      <param name="delta">
                    The required inaccuracy. The assertion fails only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
      <summary>
                    Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.
                </summary>
      <param name="notExpected">
                    The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second double to compare. This is the double the unit test produced.
                </param>
      <param name="delta">
                    The required inaccuracy. The assertion fails only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
      <summary>
                    Verifies that two specified doubles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="notExpected">
                    The first double to compare. This is the double the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second double to compare. This is the double the unit test produced.
                </param>
      <param name="delta">
                    The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object)">
      <summary>
                    Verifies that two specified objects are not equal. The assertion fails if the objects are equal.
                </summary>
      <param name="notExpected">
                    The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object,System.String)">
      <summary>
                    Verifies that two specified objects are not equal. The assertion fails if the objects are equal. Displays a message if the assertion fails.
                </summary>
      <param name="notExpected">
                    The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>
                    Verifies that two specified objects are not equal. The assertion fails if the objects are equal. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="notExpected">
                    The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single)">
      <summary>
                    Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other.
                </summary>
      <param name="notExpected">
                    The first single to compare. This is the single the unit test expects.
                </param>
      <param name="actual">
                    The second single to compare. This is the single the unit test produced.
                </param>
      <param name="delta">
                    The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>
                    Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails.
                </summary>
      <param name="notExpected">
                    The first single to compare. This is the single the unit test expects.
                </param>
      <param name="actual">
                    The second single to compare. This is the single the unit test produced.
                </param>
      <param name="delta">
                    The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
      <summary>
                    Verifies that two specified singles are not equal, and not within the specified accuracy of each other. The assertion fails if they are equal or within the specified accuracy of each other. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="notExpected">
                    The first single to compare. This is the single the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second single to compare. This is the single the unit test produced.
                </param>
      <param name="delta">
                    The required inaccuracy. The assertion will fail only if <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" /> or different from it by less than <paramref name="delta" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean)">
      <summary>
                    Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal.
                </summary>
      <param name="notExpected">
                    The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
                    Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal.
                </summary>
      <param name="notExpected">
                    The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
      <summary>
                    Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal. Displays a message if the assertion fails.
                </summary>
      <param name="notExpected">
                    The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
      <summary>
                    Verifies that two specified strings are not equal, ignoring case or not as specified, and using the culture info specified. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="notExpected">
                    The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific comparison information.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
      <summary>
                    Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal. Displays a message if the assertion fails.
                </summary>
      <param name="notExpected">
                    The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
      <summary>
                    Verifies that two specified strings are not equal, ignoring case or not as specified. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it. 
                </summary>
      <param name="notExpected">
                    The first string to compare. This is the string the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second string to compare. This is the string the unit test produced.
                </param>
      <param name="ignoreCase">
                    A Boolean value that indicates a case-sensitive or insensitive comparison. true indicates a case-insensitive comparison.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0)">
      <summary>
                    Verifies that two specified generic type data are not equal. The assertion fails if they are equal.
                </summary>
      <param name="notExpected">
                    The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second generic type data to compare. This is the generic type data the unit test produced.
                </param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String)">
      <summary>
                    Verifies that two specified generic type data are not equal. The assertion fails if they are equal. Displays a message if the assertion fails.
                </summary>
      <param name="notExpected">
                    The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second generic type data to compare. This is the generic type data the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
      <summary>
                    Verifies that two specified generic type data are not equal. The assertion fails if they are equal. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="notExpected">
                    The first generic type data to compare. This is the generic type data the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second generic type data to compare. This is the generic type data the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <typeparam name="T"></typeparam>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> is equal to <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object)">
      <summary>
                    Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object.
                </summary>
      <param name="notExpected">
                    The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object,System.String)">
      <summary>
                    Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object. Displays a message if the assertion fails. 
                </summary>
      <param name="notExpected">
                    The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
      <summary>
                    Verifies that two specified object variables refer to different objects. The assertion fails if they refer to the same object. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="notExpected">
                    The first object to compare. This is the object the unit test expects not to match <paramref name="actual" />.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="notExpected" /> refers to the same object as <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object)">
      <summary>
                    Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects.
                </summary>
      <param name="expected">
                    The first object to compare. This is the object the unit test expects.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object,System.String)">
      <summary>
                    Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects. Displays a message if the assertion fails.
                </summary>
      <param name="expected">
                    The first object to compare. This is the object the unit test expects.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
      <summary>
                    Verifies that two specified object variables refer to the same object. The assertion fails if they refer to different objects. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="expected">
                    The first object to compare. This is the object the unit test expects.
                </param>
      <param name="actual">
                    The second object to compare. This is the object the unit test produced.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="expected" /> does not refer to the same object as <paramref name="actual" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Equals(System.Object,System.Object)">
      <summary>
                    Do not use this method. 
                </summary>
      <param name="objA"></param>
      <param name="objB"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail">
      <summary>
                    Fails the assertion without checking any conditions.
                </summary>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String)">
      <summary>
                    Fails the assertion without checking any conditions. Displays a message.
                </summary>
      <param name="message">
                    A message to display. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String,System.Object[])">
      <summary>
                    Fails the assertion without checking any conditions. Displays a message, and applies the specified formatting to it.
                </summary>
      <param name="message">
                    A message to display. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive">
      <summary>
                    Indicates that the assertion cannot be verified.
                </summary>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String)">
      <summary>
                    Indicates that the assertion can not be verified. Displays a message.
                </summary>
      <param name="message">
                    A message to display. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String,System.Object[])">
      <summary>
                    Indicates that an assertion can not be verified. Displays a message, and applies the specified formatting to it.
                </summary>
      <param name="message">
                    A message to display. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
                    Always thrown.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean)">
      <summary>
                    Verifies that the specified condition is false. The assertion fails if the condition is true.
                </summary>
      <param name="condition">
                    The condition to verify is false.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to true.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)">
      <summary>
                    Verifies that the specified condition is false. The assertion fails if the condition is true. Displays a message if the assertion fails.
                </summary>
      <param name="condition">
                    The condition to verify is false.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to true.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>
                    Verifies that the specified condition is false. The assertion fails if the condition is true. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="condition">
                    The condition to verify is false.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to true.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type)">
      <summary>
                    Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object.
                </summary>
      <param name="value">
                    The object to verify is of <paramref name="expectedType" />.
                </param>
      <param name="expectedType">
                    The type expected to be found in the inheritance hierarchy of <paramref name="value" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String)">
      <summary>
                    Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The object to verify is of <paramref name="expectedType" />.
                </param>
      <param name="expectedType">
                    The type expected to be found in the inheritance hierarchy of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
      <summary>
                    Verifies that the specified object is an instance of the specified type. The assertion fails if the type is not found in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The object to verify is of <paramref name="expectedType" />.
                </param>
      <param name="expectedType">
                    The type expected to be found in the inheritance hierarchy of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null or <paramref name="expectedType" /> is not found in the inheritance hierarchy of <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type)">
      <summary>
                    Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object.
                </summary>
      <param name="value">
                    The object to verify is not of <paramref name="wrongType" />.
                </param>
      <param name="wrongType">
                    The type that should not be found in the inheritance hierarchy of <paramref name="value" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)">
      <summary>
                    Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The object to verify is not of <paramref name="wrongType" />.
                </param>
      <param name="wrongType">
                    The type that should not be found in the inheritance hierarchy of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results. 
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
      <summary>
                    Verifies that the specified object is not an instance of the specified type. The assertion fails if the type is found in the inheritance hierarchy of the object. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The object to verify is not of <paramref name="wrongType" />.
                </param>
      <param name="wrongType">
                    The type that should not be found in the inheritance hierarchy of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results. 
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null and <paramref name="wrongType" /> is found in the inheritance hierarchy of <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object)">
      <summary>
                    Verifies that the specified object is not null. The assertion fails if it is null.
                </summary>
      <param name="value">
                    The object to verify is not null.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String)">
      <summary>
                    Verifies that the specified object is not null. The assertion fails if it is null. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The object to verify is not null.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>
                    Verifies that the specified object is not null. The assertion fails if it is null. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The object to verify is not null.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object)">
      <summary>
                    Verifies that the specified object is null. The assertion fails if it is not null.
                </summary>
      <param name="value">
                    The object to verify is null.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)">
      <summary>
                    Verifies that the specified object is null. The assertion fails if it is not null. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The object to verify is null.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String,System.Object[])">
      <summary>
                    Verifies that the specified object is null. The assertion fails if it is not null. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The object to verify is null.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> is not null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean)">
      <summary>
                    Verifies that the specified condition is true. The assertion fails if the condition is false.
                </summary>
      <param name="condition">
                    The condition to verify is true.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to false.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String)">
      <summary>
                    Verifies that the specified condition is true. The assertion fails if the condition is false. Displays a message if the assertion fails.
                </summary>
      <param name="condition">
                    The condition to verify is true.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to false.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>
                    Verifies that the specified condition is true. The assertion fails if the condition is false. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="condition">
                    The condition to verify is true.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="condition" /> evaluates to false.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNullChars(System.String)">
      <summary>
                    In a string, replaces null characters ('\0') with "\\0".
                </summary>
      <returns>
                    The converted string with null characters replaced by "\\0".
                </returns>
      <param name="input">
                    The string in which to search for and replace null characters. 
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
      <summary>
                    Used to indicate failure for a test. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class that uses with a specified error message.
                </summary>
      <param name="msg">
                    The message that describes the error.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="msg">
                    The error message that explains the reason for the exception.
                </param>
      <param name="ex">
                    The exception that is the cause of the current exception. If the <paramref name="ex" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException" /> class with serialized data.
                </summary>
      <param name="info">
                    The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
                </param>
      <param name="context">
                    The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.
                </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                    The class name is null or HResult is zero (0).
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
      <summary>
                    Used to indicate that a test is not yet implemented. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class with a specified error message. 
                </summary>
      <param name="msg">
                    The message that describes the error.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.  
                </summary>
      <param name="msg">
                    The error message that explains the reason for the exception.
                </param>
      <param name="ex">
                    The exception that is the cause of the current exception. If the parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException" /> class with serialized data. 
                </summary>
      <param name="info">
                    The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
                </param>
      <param name="context">
                    The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> parameter is null.
                </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                    The class name is null.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow">
      <summary>
                    This class is used by the publicize method to help you test private types. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject)">
      <param name="privateTarget"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)">
      <param name="type"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.AttachShadowName"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetHashCode"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetShadowAttacher(System.Type)">
      <param name="type"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetTargetObject(System.Object)">
      <param name="source"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.GetTargetType(System.Type)">
      <param name="type"></param>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.m_privateObject"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.MakeArrayType(System.Type,System.Int32)">
      <param name="elementType"></param>
      <param name="rank"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.MakeByRefType(System.Type)">
      <param name="elementType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.MakePointerType(System.Type)">
      <param name="elementType"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.Same(System.Object)">
      <param name="source"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.Target"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ToString"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.TransferArray(System.Array,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ElementConverter)">
      <param name="source"></param>
      <param name="targetType"></param>
      <param name="converter"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow.ElementConverter">
      <summary>
                    Do not use this delegate. 
                </summary>
      <param name="source"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute">
      <summary>
                    Identifies a method that contains code that must be used before any of the tests in the test class have run and to allocate resources to be used by the test class. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute" /> class.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute">
      <summary>
                    Represents the project iteration to which this test corresponds. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute" /> class. 
                </summary>
      <param name="cssIteration">
                    A string that identifies the corresponding project iteration.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.CssIteration">
      <summary>
                    Gets the iteration identifier for the test.
                </summary>
      <returns>
                    An iteration identifier.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod">
      <summary>
                    Specifies constants that indicate how data rows are accessed in data-driven testing. 
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Sequential">
      <summary>
                    Rows are returned in a sequential order.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random">
      <summary>
                    Rows are returned in a random order.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute">
      <summary>
                    Provides data source-specific information for data-driven testing. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> class.  This instance will be initialized with a data provider and connection string associated with the setting name.
                </summary>
      <param name="dataSourceSettingName">
                    The name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> class. This instance will be initialized with a connection string and table name.
                </summary>
      <param name="connectionString">
                    Data provider-specific connection string. 
                </param>
      <param name="tableName">
                    The name of the data table.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> class.  This instance will be initialized with a data provider, connection string, data table and data access method to access the data source.
                </summary>
      <param name="providerInvariantName">
                    Invariant data provider name, such as System.Data.SqlClient.
                </param>
      <param name="connectionString">
                    A data provider-specific connection string. 
                </param>
      <param name="tableName">
                    The name of the data table.
                </param>
      <param name="dataAccessMethod">
                    Specifies the order to access data.  It takes a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ConnectionString">
      <summary>
                    Gets a value representing the connection string for the data source.
                </summary>
      <returns>
                    The connection string used to access the data source.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataAccessMethod">
      <summary>
                    Gets the method used to access the data source.
                </summary>
      <returns>
                    One of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod" /> values. If the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute" /> is not initialized, this will return the default value <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random" />.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataSourceSettingName">
      <summary>
                    Gets a value indicating the setting name used to identify data source connection information stored in a configuration file.
                </summary>
      <returns>
                    The name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.
                </returns>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultDataAccessMethod">
      <summary>
                    Represents the default data access method. This field is read-only.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultProviderName">
      <summary>
                    Represents the default data provider name. This field is read-only.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ProviderInvariantName">
      <summary>
                    Gets a value representing the data provider of the data source.
                </summary>
      <returns>
                    The data provider name. If a data provider was not designated at object initialization, the default provider of System.Data.OleDb will be returned.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.TableName">
      <summary>
                    Gets a value indicating the table name providing data.
                </summary>
      <returns>
                    The table name providing data for the test.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement">
      <summary>
                    Represents a data source element as an XML tag within a configuration file. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> class.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.ConnectionString">
      <summary>
                    Gets or sets the connection string setting element in the &lt;connectionStrings&gt; section in the app.config file.
                </summary>
      <returns>
                    A connection string.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.DataAccessMethod">
      <summary>
                    Gets or sets the data source access method element in the app.config file.
                </summary>
      <returns>
                    The data source access method.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.DataTableName">
      <summary>
                    Gets or sets the table name setting element in the app.config file.
                </summary>
      <returns>
                    A table name.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement.Name">
      <summary>
                    Gets or sets the data source name setting element in the app.config file.
                </summary>
      <returns>
                    A data source name.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection">
      <summary>
                    Represents an XML element that contains a collection of child <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> objects. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Add(Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement)">
      <summary>
                    Adds a data source element to <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" />.
                </summary>
      <param name="element">
                    The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> to add to the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Clear">
      <summary>
                    Removes all data source element objects from the collection.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Item(System.Int32)">
      <summary>
                    Gets or sets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> at the specified index location.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> object.
                </returns>
      <param name="index">
                    The location of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" />.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Item(System.String)">
      <summary>
                    Gets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> identified by name.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> object, or null if the <paramref name="name" /> key does not exist.
                </returns>
      <param name="name">
                    The name of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> to return.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Remove(Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement)">
      <summary>
                    Removes a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> from the collection.
                </summary>
      <param name="element">
                    The element to remove from the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection.Remove(System.String)">
      <summary>
                    Removes a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement" /> from the collection.
                </summary>
      <param name="name">
                    The name of the element to remove.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute">
      <summary>
                    Indicates that an exception is expected during test method execution. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute" /> class with an expected exception.
                </summary>
      <param name="exceptionType">
                    An expected type of exception to be thrown by a method.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute" /> class with and expected exception type and a message that describes the exception.
                </summary>
      <param name="exceptionType">
                    An expected type of exception to be thrown by a method.
                </param>
      <param name="message">
                    A message to be attached to the exception.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.ExceptionType">
      <summary>
                    Gets the expected exception type.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.Message">
      <summary>
                    Gets the message that is associated with the expected exception.
                </summary>
      <returns>
                    A message associated with an expected exception type.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper">
      <summary>
                    This class is a placeholder for use with generics. It helps you test generic types by letting you pass non-specific type arguments.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor(System.Int32)">
      <param name="data"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Clone"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.CompareTo(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Equals(System.Object)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetEnumerator"></member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetHashCode"></member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute">
      <summary>
                    Used to specify the type of host that this unit test will run in. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute" /> class. This is instantiated with an argument that specifies the type of host that this unit test will run in.
                </summary>
      <param name="hostType">
                    The type of host that this unit test will run in.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute" /> class. This is instantiated with an argument that specifies the type of host that this unit test will run in, and custom data for the host adapter.
                </summary>
      <param name="hostType">
                    The type of host that this unit test will run in.
                </param>
      <param name="hostData">
                    Custom data for the host adapter.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.HostData">
      <summary>
                    Gets custom data for the host adapter.
                </summary>
      <returns>
                    Custom data for the host adapter.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute.HostType">
      <summary>
                    Gets a value that represents the type of host.
                </summary>
      <returns>
                    A value that represents the type of host.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException">
      <summary>
                    The exception that is thrown to indicate an internal failure for a test.  
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class without arguments.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class with a specified error message. 
                </summary>
      <param name="msg">
                    The error message string.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception. 
                </summary>
      <param name="msg">
                    The error message that explains the reason for the exception. 
                </param>
      <param name="ex">
                    The exception that is the cause of the current exception.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException" /> class with serialized data. 
                </summary>
      <param name="info">
                    The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
                </param>
      <param name="context">
                    The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                    The class name is null</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject">
      <summary>
                    Allows test code to call methods and properties on the code under test that would be inaccessible because they are not public.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object.
                </summary>
      <param name="obj">
                    The object to wrap.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object. 
                </summary>
      <param name="obj">
                    The object to wrap.
                </param>
      <param name="type">
                    The wrapped object type.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Object,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object.  
                </summary>
      <param name="obj">
                    The object to wrap. This serves as starting point to reach the private members.
                </param>
      <param name="memberToAccess">
                    The dereferencing string that points to the object to be retrieved. This takes the form of "objectX.objectY.objectZ".
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="memberToAccess" /> is a zero-length string
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null or <paramref name="memberToAccess" /> is null</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.String,System.String,System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class. This creates the object of the specified type and wraps it in the private object.
                </summary>
      <param name="assemblyName">
                    Name of the assembly that contains the type.
                </param>
      <param name="typeName">
                    Fully qualified name of the type.
                </param>
      <param name="args">
                    Arguments to pass to the constructor of the object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> or <paramref name="typeName" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.String,System.String,System.Type[],System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class. This creates an object of the specified type and wraps it in the private object.
                </summary>
      <param name="assemblyName">
                    Name of the assembly that contains the type.
                </param>
      <param name="typeName">
                    Fully qualified name of the type.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for constructing the object.
                </param>
      <param name="args">
                    The arguments to define the object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> or <paramref name="typeName" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> is multidimensional.
                
                    -or-
                
                    A constructor cannot be found to match the parameters specified in <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Type[],System.Object[])" />. 
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class that creates the wrapper for the specified object.
                </summary>
      <param name="type">
                    The wrapped object type.
                </param>
      <param name="args">
                    The arguments to define the object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType.
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.
                
                    -or-
                
                    Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, and <see cref="T:System.RuntimeArgumentHandle" /> types is not supported.
                </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
                    The constructor being called throws an exception.
                </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.
                </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type.
                </exception>
      <exception cref="T:System.MissingMethodException">
                    No matching public constructor was found to match the <paramref name="type" /> and <paramref name="args" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Type[],System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject" /> class. 
                </summary>
      <param name="type">
                    The wrapped object type.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for constructing the object.
                </param>
      <param name="args">
                    The arguments to define the object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> is multidimensional.
                
                    -or-
                
                    A constructor cannot be found to match the parameters specified in <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.#ctor(System.Type,System.Type[],System.Object[])" />. 
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Equals(System.Object)">
      <summary>
                    Returns a value that indicates whether two private objects are encapsulating the same target object.
                </summary>
      <returns>true if the objects are equal; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetArrayElement(System.String,System.Int32[])">
      <summary>
                    Gets the array element by using an array of subscripts for each dimension.
                </summary>
      <returns>
                    An object that represents the array element.
                </returns>
      <param name="name">
                    The variable name of array to get.
                </param>
      <param name="indices">
                    An array that represents the location of the element to get.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetArrayElement(System.String,System.Reflection.BindingFlags,System.Int32[])">
      <summary>
                    Gets the array element by using an array of subscripts for each dimension.
                </summary>
      <returns>
                    An object representing the array element.
                </returns>
      <param name="name">
                    The variable name of array to get.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the element is conducted. The type of lookup need not be specified. The default value is <see cref="F:System.Reflection.BindingFlags.GetField" />. If null is used, the default value is passed. Additional flags will be added to the mask.
                </param>
      <param name="indices">
                    An array representing the location of the element to get.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetField(System.String)">
      <summary>
                    Gets a value from a named field, based on the name.
                </summary>
      <returns>
                    The value set for the <paramref name="name" /> field.
                </returns>
      <param name="name">
                    The name of the private field to get.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>
                    Gets a value from a named field, based on the name and lookup mask.
                </summary>
      <returns>
                    The value set for the <paramref name="name" /> field.
                </returns>
      <param name="name">
                    The name of the private field to get.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the field is conducted. The type of lookup need not be specified. The default value is <see cref="F:System.Reflection.BindingFlags.GetField" />. If null is used, the default value is passed. Additional flags will be added to the mask.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetFieldOrProperty(System.String)">
      <summary>
                    Gets a value of a wrapped field or property based on the name.
                </summary>
      <returns>
                    The value set for the <paramref name="name" /> field or property.
                </returns>
      <param name="name">
                    The name of the private field or property to get.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetFieldOrProperty(System.String,System.Reflection.BindingFlags)">
      <summary>
                    Gets a value of a wrapped field or property based on the name.
                </summary>
      <returns>
                    The value set for the <paramref name="name" /> field or property.
                </returns>
      <param name="name">
                    The name of the private field or property to get.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the field or property is conducted. The type of lookup need not be specified.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetHashCode">
      <summary>
                    Gets the hash code of the wrapped object.
                </summary>
      <returns>
                    An integer that represents the hash code of the wrapped object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Object[])">
      <summary>
                    Gets a property for a wrapped object identified by name.
                </summary>
      <returns>
                    An object that contains the value of the property identified by <paramref name="name" />.
                </returns>
      <param name="name">
                    The name of property to get.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the member to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Object[])">
      <summary>
                    Gets a property for a wrapped object identified by name with binding flags.
                </summary>
      <returns>
                    An object that contains the value of the property identified by <paramref name="name" />.
                </returns>
      <param name="name">
                    The name of property to get.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the property is conducted. The type of lookup need not be specified. The default value is <see cref="F:System.Reflection.BindingFlags.GetProperty" />. If null is used, the default value is passed. Additional flags will be added to the mask.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the member to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[])">
      <summary>
                    Gets an indexed property for a wrapped object identified by name.
                </summary>
      <returns>
                    An object that contains the value of the property identified by <paramref name="name" />.
                </returns>
      <param name="name">
                    The name of property to get.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the property is conducted. The type of lookup need not be specified. The default value is <see cref="F:System.Reflection.BindingFlags.GetProperty" />. If null is used, the default value is passed. Additional flags will be added to the mask.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to get.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the member to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.GetProperty(System.String,System.Type[],System.Object[])">
      <summary>
                    Gets a property for a wrapped object identified by name.
                </summary>
      <returns>
                    An object that contains the value of the property identified by <paramref name="name" />.
                </returns>
      <param name="name">
                    The name of property to get.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the member to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Object[])">
      <summary>
                    Used to access the members of the private object.
                </summary>
      <returns>
                    An object that represents the return value of a private member.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Object[],System.Globalization.CultureInfo)">
      <summary>
                    Used to access the members of the private object.
                </summary>
      <returns>
                    An object that represents the return value of the invoked member.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.
                
                    -or-
                null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Object[])">
      <summary>
                    Used to access the members of the private object.
                </summary>
      <returns>
                    An object that represents the return value of a private member.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the member is conducted. The type of lookup need not be specified.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Object[],System.Globalization.CultureInfo)">
      <summary>
                    Used to access the members of the private object.
                </summary>
      <returns>
                    An object representing the return value of the invoked member.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the member is conducted. The type of lookup need not be specified.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.
                
                    -or-
                null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[])">
      <summary>
                    Used to access the members of the private object.
                </summary>
      <returns>
                    An object that represents the return value of the invoked member.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the member is conducted. The type of lookup need not be specified.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.
                
                    -or-
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Globalization.CultureInfo)">
      <summary>
                    Used to access the members of the private object.
                </summary>
      <returns>
                    An object representing the return value of the invoked member.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the member is conducted. The type of lookup need not be specified.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.
                
                    -or-
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.
                
                    -or-
                null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Reflection.BindingFlags,System.Type[],System.Object[],System.Globalization.CultureInfo,System.Type[])">
      <summary>
                    Used to access generic members of a private object.
                </summary>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the field or property is conducted. The type of lookup need not be specified.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.
                
                    -or-
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.
                
                    -or-
                null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.
                </param>
      <param name="typeArguments">
                    An array of type arguments to use when invoking a generic method.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Type[],System.Object[])">
      <summary>
                    Used to access the methods of the private object.
                </summary>
      <returns>
                    An object that represents the return value of the invoked method.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.
                
                    -or-
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Type[],System.Object[],System.Globalization.CultureInfo)">
      <summary>
                    Used to access the members of the private object.
                </summary>
      <returns>
                    An object representing the return value of the invoked member.
                </returns>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.
                
                    -or-
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> object that represents the globalization locale to use, which might be necessary for locale-specific conversions, such as converting a numeric String to a Double.
                
                    -or-
                null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Invoke(System.String,System.Type[],System.Object[],System.Type[])">
      <summary>
                    Used to access generic members of a private object. 
                </summary>
      <param name="name">
                    The name of the member to invoke.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the method to access.
                
                    -or-
                
                    An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.
                </param>
      <param name="args">
                    Any arguments that the member requires.
                </param>
      <param name="typeArguments">
                    An array of type arguments to use when invoking a generic method.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.RealType">
      <summary>
                    Gets the type of the underlying object.
                </summary>
      <returns>
                    A <see cref="T:System.Type" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetArrayElement(System.String,System.Object,System.Int32[])">
      <summary>
                    Sets the array element by using an array of subscripts for each dimension.
                </summary>
      <param name="name">
                    The variable name of array to set.
                </param>
      <param name="value">
                    The value to assign to the array element.
                </param>
      <param name="indices">
                    An array that represents the location of the element to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetArrayElement(System.String,System.Reflection.BindingFlags,System.Object,System.Int32[])">
      <summary>
                    Sets the array element by using an array of subscripts for each dimension.
                </summary>
      <param name="name">
                    The variable name of array to set.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the element is conducted. The type of lookup need not be specified.
                </param>
      <param name="value">
                    The value to assign to the array element.
                </param>
      <param name="indices">
                    An array that represents the location of the element to set.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetField(System.String,System.Object)">
      <summary>
                    Sets a value for the field of the wrapped object, identified by name.
                </summary>
      <param name="name">
                    The name of the field to set a value.
                </param>
      <param name="value">
                    The value to set.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetField(System.String,System.Reflection.BindingFlags,System.Object)">
      <summary>
                    Sets a value for the field of the wrapped object, identified by name.
                </summary>
      <param name="name">
                    The name of the field to set a value.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the field is conducted. The type of lookup need not be specified. The default value is <see cref="F:System.Reflection.BindingFlags.SetField" />. If null is used, the default value is passed. Additional flags will be added to the mask.
                </param>
      <param name="value">
                    The value to set.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetFieldOrProperty(System.String,System.Object)">
      <summary>
                    Sets a value of a wrapped field or property based on the name.
                </summary>
      <param name="name">
                    The name of the private field or property to set.
                </param>
      <param name="value">
                    The value to set for <paramref name="name" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetFieldOrProperty(System.String,System.Reflection.BindingFlags,System.Object)">
      <summary>
                    Sets a value of a wrapped field or property based on the name.
                </summary>
      <param name="name">
                    The name of the private field or property to set.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the field or property is conducted. The type of lookup need not be specified.
                </param>
      <param name="value">
                    The value to set for <paramref name="name" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Object,System.Object[])">
      <summary>
                    Sets a property for a wrapped object identified by name.
                </summary>
      <param name="name">
                    The name of property to invoke.
                </param>
      <param name="value">
                    The value to set the property identified by <paramref name="name" />.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the property to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Reflection.BindingFlags,System.Object,System.Object[])">
      <summary>
                    Sets a property for a wrapped object identified by name with binding flags.
                </summary>
      <param name="name">
                    The name of property to invoke.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the property is conducted. The type of lookup need not be specified. The default value is <see cref="F:System.Reflection.BindingFlags.SetProperty" />. If null is used, the default value is passed. Additional flags will be added to the mask.
                </param>
      <param name="value">
                    The value to set the property identified by <paramref name="name" />.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the property to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Reflection.BindingFlags,System.Object,System.Type[],System.Object[])">
      <summary>
                    Sets an indexed property for a wrapped object identified by name.
                </summary>
      <param name="name">
                    The name of property to invoke.
                </param>
      <param name="invokeAttr">
                    A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specifies how the search for the property is conducted. The type of lookup need not be specified. The default value is <see cref="F:System.Reflection.BindingFlags.SetProperty" />. If null is used, the default value is passed. Additional flags will be added to the mask.
                </param>
      <param name="value">
                    The value to set the property identified by <paramref name="name" />.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to get.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the property to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.SetProperty(System.String,System.Type[],System.Object,System.Object[])">
      <summary>
                    Sets an indexed property for a wrapped object identified by name.
                </summary>
      <param name="name">
                    The name of property to invoke.
                </param>
      <param name="parameterTypes">
                    An array of <see cref="T:System.Type" /> objects that represents the number, order, and type of the parameters for the indexed property to get.
                </param>
      <param name="value">
                    The value to set the property identified by <paramref name="name" />.
                </param>
      <param name="args">
                    An array that contains the arguments to pass to the property to invoke.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or empty.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject.Target">
      <summary>
                    Gets or sets the wrapped object.
                </summary>
      <returns>
                    The wrapped object.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    Try to set this property to null.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ShadowingAttribute">
      <summary>
                    Do not use this class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ShadowingAttribute.#ctor(System.String)">
      <param name="fullNameOfSource"></param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ShadowingAttribute.FullNameOfSource"></member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert">
      <summary>
                    Verifies true/false propositions associated with strings in unit tests.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String)">
      <summary>
                    Verifies that the first string contains the second string.
                </summary>
      <param name="value">
                    The string that is expected to contain <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to occur within <paramref name="value" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="substring" /> is not found in <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String)">
      <summary>
                    Verifies that the first string contains the second string. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The string that is expected to contain <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to occur within <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="substring" /> is not found in <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
      <summary>
                    Verifies that the first string contains the second string. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The string that is expected to contain <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to occur within <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="substring" /> is not found in <paramref name="value" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
      <summary>
                    Verifies that the specified string does not match the regular expression.
                </summary>
      <param name="value">
                    The string that is not expected to match <paramref name="pattern" />.
                </param>
      <param name="pattern">
                    The regular expression that <paramref name="value" /> is not expected to match.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> matches <paramref name="pattern" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
      <summary>
                    Verifies that the specified string does not match the regular expression. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The string that is not expected to match <paramref name="pattern" />.
                </param>
      <param name="pattern">
                    The regular expression that <paramref name="value" /> is not expected to match.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> matches <paramref name="pattern" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>
                    Verifies that the specified string does not match the regular expression. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The string that is not expected to match <paramref name="pattern" />.
                </param>
      <param name="pattern">
                    The regular expression that <paramref name="value" /> is not expected to match.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> matches <paramref name="pattern" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String)">
      <summary>
                    Verifies that the first string ends with the second string.
                </summary>
      <param name="value">
                    The string that is expected to end with <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to be a suffix of <paramref name="value" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not end with <paramref name="substring" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String)">
      <summary>
                    Verifies that the first string ends with the second string. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The string that is expected to end with <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to be a suffix of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not end with <paramref name="substring" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
      <summary>
                    Verifies that the first string ends with the second string. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The string that is expected to end with <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to be a suffix of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not end with <paramref name="substring" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex)">
      <summary>
                    Verifies that the specified string matches the regular expression.
                </summary>
      <param name="value">
                    The string that is expected to match <paramref name="pattern" />.
                </param>
      <param name="pattern">
                    The regular expression that <paramref name="value" /> is expected to match.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not match <paramref name="pattern" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String)">
      <summary>
                    Verifies that the specified string matches the regular expression. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The string that is expected to match <paramref name="pattern" />.
                </param>
      <param name="pattern">
                    The regular expression that <paramref name="value" /> is expected to match.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not match <paramref name="pattern" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>
                    Verifies that the specified string matches the regular expression. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The string that is expected to match <paramref name="pattern" />.
                </param>
      <param name="pattern">
                    The regular expression that <paramref name="value" /> is expected to match.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not match <paramref name="pattern" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String)">
      <summary>
                    Verifies that the first string begins with the second string.
                </summary>
      <param name="value">
                    The string that is expected to begin with <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to be a prefix of <paramref name="value" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not begin with <paramref name="substring" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String)">
      <summary>
                    Verifies that the first string begins with the second string. Displays a message if the assertion fails.
                </summary>
      <param name="value">
                    The string that is expected to begin with <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to be a prefix of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not begin with <paramref name="substring" />.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
      <summary>
                    Verifies that the first string begins with the second string. Displays a message if the assertion fails, and applies the specified formatting to it.
                </summary>
      <param name="value">
                    The string that is expected to begin with <paramref name="substring" />.
                </param>
      <param name="substring">
                    The string expected to be a prefix of <paramref name="value" />.
                </param>
      <param name="message">
                    A message to display if the assertion fails. This message can be seen in the unit test results.
                </param>
      <param name="parameters">
                    An array of parameters to use when formatting <paramref name="message" />.
                </param>
      <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
        <paramref name="value" /> does not begin with <paramref name="substring" />.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute">
      <summary>
                    Identifies a method that contains code that must be used after the test has run and to free resources obtained by all the tests in the test class. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute" /> class. 
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfiguration">
      <summary>
                    Provides access to a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> that represents the microsoft.visualstudio.testtools section in an app.config file. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfiguration.ConfigurationSection">
      <summary>
                    Gets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> object.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection">
      <summary>
                    Provides access to data source configuration data. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection" /> class. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection.DataSources">
      <summary>
                    Gets a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" /> that contains data source configuration information.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext">
      <summary>
                    Used to store information that is provided to unit tests.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.#ctor">
      <summary>
                    Initializes a new instance of an object that derives from the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.AddResultFile(System.String)">
      <summary>
                    When overridden in a derived class, adds a file name to the list in TestResult.ResultFileNames.
                </summary>
      <param name="fileName">
                    The file name to add.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.BeginTimer(System.String)">
      <summary>
                    When overridden in a derived class, begins a timer with the specified name. 
                </summary>
      <param name="timerName">
                    The name of the timer to begin.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.CurrentTestOutcome">
      <summary>
                    You can use this property in a TestCleanup method to determine the outcome of a test that has run. 
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome" /> that states the outcome of a test that has run.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DataConnection">
      <summary>
                    When overridden in a derived class, gets the current data connection when the test is used for data driven testing.
                </summary>
      <returns>
                    A <see cref="T:System.Data.Common.DbConnection" /> object.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.DataRow">
      <summary>
                    When overridden in a derived class, gets the current data row when test is used for data driven testing.
                </summary>
      <returns>
                    A <see cref="T:System.Data.DataRow" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.EndTimer(System.String)">
      <summary>
                    When overridden in a derived class, ends a timer with the specified name
                </summary>
      <param name="timerName">
                    The name of the timer to end.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.Properties">
      <summary>
                    When overridden in a derived class, gets the test properties.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IDictionary" /> object that contains key/value pairs that represent the test properties.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDeploymentDir">
      <summary>
                    Gets the path to the test deployment directory.
                </summary>
      <returns>
                    The path to the test deployment directory.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDeploymentDir" /> property of the test context.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDir">
      <summary>
                    Gets the path to the test directory.
                </summary>
      <returns>
                    The path to the test directory.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestDir" />  property of the test context.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestLogsDir">
      <summary>
                    Gets the path to the test log directory.
                </summary>
      <returns>
                    The path to the test log directory.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestLogsDir" />   property of the test context.
                </exception>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestName">
      <summary>
                    Gets the test name.
                </summary>
      <returns>
                    The test name.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.TestName" />    property of the test context.
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.WriteLine(System.String,System.Object[])">
      <summary>
                    When overridden in a derived class, used to write trace messages while the test is running.
                </summary>
      <param name="format">
                    The string that contains the trace message.
                </param>
      <param name="args">
                    Arguments to add to the trace message.
                </param>
    </member>
    <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.AspNetDevelopmentServerPrefix">
      <summary>
                    Represents the prefix for ASP.NET Development Server.
                </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.RequestedPage">
      <summary>
                    Gets the requested page.
                </summary>
      <returns>
                    A <see cref="T:System.Web.UI.Page" /> object.
                </returns>
      <exception cref="T:System.InvalidCastException">
                    An invalid value type is associated with the <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext.RequestedPage" /> property of the test context.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute">
      <summary>
                    Used to identify test methods. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute" /> class. 
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute">
      <summary>
                    Used to specify the time-out period of a unit test.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute" /> class.
                </summary>
      <param name="timeout">
                    The time-out period of a unit test. This is measured in milliseconds.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.Timeout">
      <summary>
                    Gets the time-out period for a unit test.
                </summary>
      <returns>
                    The time-out period for a unit test. This is measured in milliseconds.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException" /> class with serialized data.
                </summary>
      <param name="info">
                    The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
                </param>
      <param name="context">
                    The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="info" /> parameter is null.
                </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                    The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
                </exception>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                    Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
                </summary>
      <param name="info">
                    The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
                </param>
      <param name="context">
                    The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="info" /> parameter is null.
                </exception>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.WebServiceHelper">
      <summary>
                    Contains helper methods for Web service testing. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.WebServiceHelper.TryUrlRedirection(System.Web.Services.Protocols.WebClientProtocol,Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,System.String)">
      <summary>
                    Redirects a Web service object to the ASP.NET Development Server instead of what is defined in the Web reference.
                </summary>
      <returns>true if a redirect occurred; otherwise, false.
                </returns>
      <param name="client">
                    An instance of the Web service type being tested.
                </param>
      <param name="context">
                    The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestContext" /> for this unit test.
                </param>
      <param name="identifier">
                    A unique string that identifies an ASP.NET Development Server instance. This matches the name parameter of an <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> on the test method.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute">
      <summary>
                    Specifies the settings that must be used for the ASP.NET Development Server for the test. This is primarily used for Web service unit tests.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> class with the server name and the path to the Web application.
                </summary>
      <param name="name">
                    The name of the ASP.NET Development Server. This name must be unique for all <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> specified on a single test.
                </param>
      <param name="pathToWebApp">
                    The path to the Web application. This can also include environmental variables.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute" /> class with the server name, the path to the Web application, and the Web application root.
                </summary>
      <param name="name">
                    The name of the server.
                </param>
      <param name="pathToWebApp">
                    The path to the Web application. This can also include environment variables like %TEMPDIR%\website1.
                </param>
      <param name="webAppRoot">
                    The Web application root.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.Name">
      <summary>
                    Gets the name of the ASP.NET Development Server.
                </summary>
      <returns>
                    The name of the ASP.NET Development Server.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.PathToWebApp">
      <summary>
                    Gets the path to the Web application.
                </summary>
      <returns>
                    The path to the Web application.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.WebAppRoot">
      <summary>
                    Gets the Web application root.
                </summary>
      <returns>
                    The Web application root.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute">
      <summary>
                    Specifies the settings to use when an ASP.NET Development Server is the host server for the test. This is used for ASP.NET unit tests. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute" /> class with the full path name.
                </summary>
      <param name="pathToWebApp">
                    The full path of the Web application. The path can include environment variables like %TEMPDIR%\website1.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute" /> class with the full path name and the Web application root.
                </summary>
      <param name="pathToWebApp">
                    The full path of the Web application. The path can include environment variables like %TEMPDIR%\website1.
                </param>
      <param name="webAppRoot">
                    The Web application root.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.PathToWebApp">
      <summary>
                    Gets the path of the Web application.
                </summary>
      <returns>
                    The path of the Web application.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.WebAppRoot">
      <summary>
                    Gets the Web application root.
                </summary>
      <returns>
                    The Web application root.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute">
      <summary>
                    Specifies the user name and password for ASP.NET sites that require basic authentication or Windows authentication. This class cannot be inherited.  
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute" /> class with a user name and password needed to access the test Web site.
                </summary>
      <param name="userName">
                    The user to authenticate.
                </param>
      <param name="password">
                    The associated password for the user.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute" /> class with a user name, password and domain needed to access the test Web site.
                </summary>
      <param name="userName">
                    The user to authenticate.
                </param>
      <param name="password">
                    The associated password for the user.
                </param>
      <param name="domain">
                    The domain of the user.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.Domain">
      <summary>
                    Gets the user's domain.
                </summary>
      <returns>
                    The name of the user's domain.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.Password">
      <summary>
                    Gets the user's password.
                </summary>
      <returns>
                    The user's password.
                </returns>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.UserName">
      <summary>
                    Gets the user's user name.
                </summary>
      <returns>
                    The user's user name.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute">
      <summary>
                    Specifies the URL that should be requested to give context to the test. This class cannot be inherited.  
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute" /> class.
                </summary>
      <param name="urlToTest">
                    The URL to give context to the test.
                </param>
    </member>
    <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute.UrlToTest">
      <summary>
                    Gets the URL that gives context to the test.
                </summary>
      <returns>
                    A URL string.
                </returns>
    </member>
  </members>
</doc>