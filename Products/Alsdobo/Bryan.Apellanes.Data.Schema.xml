<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bryan.Apellanes.Data.Schema</name>
    </assembly>
    <members>
        <member name="M:Bryan.Apellanes.Data.Schema.Column.#ctor(System.String,System.String)">
            <summary>
            Instantiate a column where Type = Long, AllowNull = false, Key = true
            </summary>
            <param name="name"></param>
            <param name="tableName"></param>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.Column.PropertyName">
            <summary>
            Gets the value of the PropertyName this Column
            will be converted to during code generation
            </summary>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.Column.DbDataType">
            <summary>
            Gets or sets the data type originally specified by the database that this 
            column was extracted from.  Null if this column was not created using an
            ISchemaExtractor.
            </summary>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.ForeignKeyColumn.#ctor">
            <summary>
            Empty constructor provided for deserialization
            </summary>
        </member>
        <member name="T:Bryan.Apellanes.Data.Schema.KeyColumn">
            <summary>
            A key/identity column.
            </summary>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.DaoGenerator.Generate(Bryan.Apellanes.Data.Schema.SchemaDefinition,System.String)">
            <summary>
            Generate code for the specified schema
            </summary>
            <param name="schema"></param>
            <param name="root"></param>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.DaoGenerator.Generate(Bryan.Apellanes.Data.Schema.SchemaDefinition,System.Func{System.String,System.IO.Stream},System.String)">
            <summary>
            Generate code for the specified schema
            </summary>
            <param name="schema">The schema to generate code for</param>
            <param name="targetResolver">If specified, generated code will be 
            written to the stream returned by this function</param>
            <param name="root">The root file path to use if no target resolver is specified</param>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.DaoGenerator.DisposeOnComplete">
            <summary>
            Gets or sets a value indicating whether dispose will
            be called on the output streams after code generation.
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.GenerateStarted">
            <summary>
            The event that fires prior to code generation
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.GenerateComplete">
            <summary>
            The event that fires when code generation is complete
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.CompileStarted">
            <summary>
            The event that fires when compilation starts
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.CompileComplete">
            <summary>
            The event that fires when compilation is complete
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.BeforeClassStreamResolved">
            <summary>
            The event that fires prior to resolving the target 
            stream for a table
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.AfterClassStreamResolved">
            <summary>
            The event that fires after the target stream is resolved for
            a table
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.BeforeCollectionStreamResolved">
            <summary>
            The event that fires before resolving the stream to write each
            collection to
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.AfterCollectionStreamResolved">
            <summary>
            Thre event that fires after resolving the stream to write each ccollection to
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.BeforeWriteClass">
            <summary>
            The event that fires before writing code to the target stream
            </summary>
        </member>
        <member name="E:Bryan.Apellanes.Data.Schema.DaoGenerator.AfterWriteClass">
            <summary>
            The event that fires after writing code to the target stream
            </summary>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.RazorParser`1.#ctor(System.String,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="defaultNamespace"></param>
            <param name="defaultClassName"></param>
            <param name="options">Applied to the GeneratedClassContext</param>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.RazorParser`1.Execute(System.IO.TextReader,System.Object,System.Action{System.String})">
            <summary>
            Execute the 
            </summary>
            <param name="input"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.RazorParser`1.DefaultRazorInspector">
            <summary>
            The default inspector used by any RazorParser that hasn't been assigned one
            </summary>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.SchemaDefinition.Load(System.String)">
            <summary>
            Loads a SchemaDefinition from the specified file, the file
            will be created if it doesn't exist.
            </summary>
            <param name="schemaFile"></param>
            <returns></returns>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.SchemaDefinition.Save">
            <summary>
            Serializes the current SchemaDefinition as json to the
            file specified in the File property
            </summary>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.SchemaDefinition.Save(System.String)">
            <summary>
            Serializes the current SchemaDefinition as json to the
            specified filePath
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.SchemaDefinition.DbType">
            <summary>
            Gets or sets the type of the database that this SchemaDefinition was
            extracted from.  May be null.
            </summary>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.SchemaDefinition.Name">
            <summary>
            Gets or sets the name of the current SchemaDefinition.
            </summary>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.SchemaDefinition.LastException">
            <summary>
            The most recent exception that occurred after trying to add a table
            or a foreign key
            </summary>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.SchemaManager.SetSchema(System.String)">
            <summary>
            Loads the specified schema and sets it as Current
            </summary>
            <param name="schemaName"></param>
            <returns></returns>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.SchemaManager.SetNewSchema(System.String)">
            <summary>
            Calls SetSchema if the specified schema does not already
            exist.
            </summary>
            <param name="schemaName"></param>
            <returns></returns>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.SchemaManager.AddColumn(System.String,Bryan.Apellanes.Data.Schema.Column)">
            <summary>
            Add the specified column to the specified table.
            </summary>
            <param name="tableName"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Bryan.Apellanes.Data.Schema.SchemaManager.GetReferencingForeignKeysForTable(System.String)">
            <summary>
            Get the ForeignKeyColumns where the specified table is the 
            referenced table.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:Bryan.Apellanes.Data.Schema.Table.ReferencingForeignKeys">
            <summary>
            All ForeignKeyColmns where the current table is referenced.
            </summary>
        </member>
    </members>
</doc>
