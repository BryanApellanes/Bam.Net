/*
	Copyright Â© Bryan Apellanes 2015  
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Reflection;
using Bam.Net.Incubation;
using Bam.Net;
using Bam.Net.Data;
using Bam.Net.Data.Oracle;
using Oracle.ManagedDataAccess;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess;

namespace Bam.Net.Data
{
    public class OracleSqlStringBuilder: SchemaWriter, IPLSqlStringBuilder
    {
		public OracleSqlStringBuilder()
        {
            CreateTableFormat = "CREATE TABLE {0} ({1})";
            KeyColumnFormat = "{0} NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY";
			GoText = "\r\n";
			TableNameFormatter = (t) => string.Format("\"{0}\"", t);
			ColumnNameFormatter = (c) => c;
            AddForeignKeyColumnFormat = "ALTER TABLE \"{0}\" ADD CONSTRAINT {1} FOREIGN KEY ({2}) REFERENCES \"{3}\" ({4})";
        }

		public OracleParameter IdParameter { get; set; }

        public static void Register(Incubator incubator)
        {
            incubator.Set<SqlStringBuilder>(new OracleSqlStringBuilder());

            OracleSqlStringBuilder builder = new OracleSqlStringBuilder();
            incubator.Set<OracleSqlStringBuilder>(builder);
        }

		public override void DropAllTables<T>()
		{
			base.DropAllTables<T>();
			Builder.Append("PURGE RECYCLEBIN");
			Go();
		}

		public override SqlStringBuilder Top<T>(int topCount)
		{
			throw new InvalidOperationException("Top is not properly implemented by OracleSqlStringBuilder; instead use OracleQuerySet which extends SqlStringBuilder");
		}

        protected override void WriteCreateTable(Type daoType)
        {
            ColumnAttribute[] columns = GetColumns(daoType);

			Builder.AppendFormat(CreateTableFormat,
				GetFormattedTableName(daoType),
				columns.ToDelimited(c =>
				{
					if (c is KeyColumnAttribute)
					{
                        return GetKeyColumnDefinition((KeyColumnAttribute)c);
					}
					else
					{
						return GetColumnDefinition(c);
					}
				}));
        }

		protected override void WriteForeignKeys(Type daoType)
		{
			Args.ThrowIfNull(daoType, "daoType");
			string datasetName = Dao.ConnectionName(daoType);//(daoType.GetConstructor(Type.EmptyTypes).Invoke(null) as Dao).ConnectionName();
			foreach (Type type in daoType.Assembly.GetTypes())
			{
				TableAttribute tableAttr = null;
				if (type.HasCustomAttributeOfType<TableAttribute>(out tableAttr))
				{
					if (Dao.ConnectionName(type).Equals(datasetName))
					{
						ForeignKeyAttribute[] columns = GetForeignKeys(type);
						foreach (ForeignKeyAttribute fk in columns)
						{
							if (fk != null)
							{
								// table1Name, fkName, column1Name, table2Name, column2Name
								Builder.AppendFormat(AddForeignKeyColumnFormat,
									GetFirstThirtyCharacters(fk.Table), 
									GetFirstThirtyCharacters(fk.ForeignKeyName),
									GetFirstThirtyCharacters(fk.Name), 
									GetFirstThirtyCharacters(fk.ReferencedTable),
									GetFirstThirtyCharacters(fk.ReferencedKey));

								Go();
							}
						}
					}
				}
			}
		}

		protected override void WriteForeignKeys(Assembly daoAssembly, Func<Type, bool> typePredicate = null)
		{
			Args.ThrowIfNull(daoAssembly, "daoAssembly");
			typePredicate = typePredicate == null ? t => t.HasCustomAttributeOfType<TableAttribute>() : typePredicate;
			foreach (Type type in daoAssembly.GetTypes())
			{
				if (typePredicate(type))
				{
					ForeignKeyAttribute[] columns = GetForeignKeys(type);
					foreach (ForeignKeyAttribute fk in columns)
					{
						if (fk != null)
						{
							// table1Name, fkName, column1Name, table2Name, column2Name
							Builder.AppendFormat("ALTER TABLE \"{0}\" ADD CONSTRAINT {1} FOREIGN KEY ({2}) REFERENCES \"{3}\" ({4})",
								fk.Table, fk.ForeignKeyName, fk.Name, fk.ReferencedTable, fk.ReferencedKey);

							Go();
						}
					}
				}
			}
		}
        protected override void WriteDropTable(Type daoType)
        {
            TableAttribute attr = null;
            if (daoType.HasCustomAttributeOfType<TableAttribute>(out attr))
            {
				Builder.AppendFormat("DROP TABLE {0}", GetFormattedTableName(daoType));
                Go();
            }
        }

		protected override void WriteDropForeignKeys(Type daoType)
		{
			TableAttribute table = null;
			if (daoType.HasCustomAttributeOfType<TableAttribute>(out table))
			{
				PropertyInfo[] properties = daoType.GetProperties();
				foreach (PropertyInfo prop in properties)
				{
					ForeignKeyAttribute fk = null;
					if (prop.HasCustomAttributeOfType<ForeignKeyAttribute>(out fk))
					{
						Builder.AppendFormat("ALTER TABLE {0} DROP CONSTRAINT {1}", GetFormattedTableName(table.TableName), GetFirstThirtyCharacters(fk.ForeignKeyName));
						Go();
					}
				}
			}
		}   

		public override SqlStringBuilder Insert(string tableName, params AssignValue[] values)
		{
			Builder.AppendFormat("INSERT INTO {0} ", GetFormattedTableName(tableName));
			InsertFormat insert = new InsertFormat { ParameterPrefix = ":" };
			foreach (AssignValue value in values)
			{
				insert.ColumnNameFormatter = ColumnNameFormatter;
				insert.AddAssignment(value);
			}

			insert.StartNumber = NextNumber;
			Builder.Append(insert.Parse());
			NextNumber = insert.NextNumber;
			this.parameters.AddRange(insert.Parameters);
			return this;
		}

		public override SqlStringBuilder Update(string tableName, params AssignValue[] values)
		{
			Builder.AppendFormat("UPDATE {0} ", GetFormattedTableName(tableName));
			SetFormat set = OracleFormatProvider.GetSetFormat(tableName, StringBuilder, NextNumber, values);
			NextNumber = set.NextNumber;
			this.parameters.AddRange(set.Parameters);
			return this;
		}

		public override SqlStringBuilder Id(string idAs)
		{
			StringBuilder.AppendFormat(" RETURNING Id INTO :{0}", idAs);
			GoText = "\r\n";
			ReturnsId = true;
			return this;
		}
		public override SqlStringBuilder Where(IQueryFilter filter)
		{
			WhereFormat where = OracleFormatProvider.GetWhereFormat(filter, StringBuilder, NextNumber);
			NextNumber = where.NextNumber;
			this.parameters.AddRange(where.Parameters);
			return this;
		}


		public override SqlStringBuilder Where(AssignValue filter)
		{
			WhereFormat where = OracleFormatProvider.GetWhereFormat(filter, StringBuilder, NextNumber);
			NextNumber = where.NextNumber;
			this.parameters.AddRange(where.Parameters);
			return this;
		}
		public override DataSet GetDataSet(Database db, bool releaseConnection = true, System.Data.Common.DbConnection conn = null, System.Data.Common.DbTransaction tx = null)
		{
			OracleDatasetProvider oracleGetDatasetProvider = new OracleDatasetProvider(this);
			return oracleGetDatasetProvider.GetDataSet(db, releaseConnection, conn, tx);
		}
        public override string GetKeyColumnDefinition(KeyColumnAttribute keyColumn)
        {
            return string.Format(KeyColumnFormat, keyColumn.Name); 
        }
        public override string GetColumnDefinition(ColumnAttribute column)
        {
			string type = GetType(column);
            return string.Format("{0} {1}", GetFirstThirtyCharacters(column.Name), type, column.AllowNull ? "" : " NOT NULL");
        }

		private string GetFormattedTableName(Type daoType)
		{
			string tableName = daoType.GetCustomAttributeOfType<TableAttribute>().TableName;
			return GetFormattedTableName(tableName);
		}

		private string GetFormattedTableName(string tableName)
		{
			return TableNameFormatter(GetFirstThirtyCharacters(tableName));
		}

		private static string GetFirstThirtyCharacters(string tableName)
		{
			if (tableName.Length > 30)
			{
				tableName = tableName.Substring(0, 30);
			}
			return tableName;
		}

		private string GetType(ColumnAttribute column)
		{
			switch(column.DbDataType)
			{
				case "Int":
				case "BigInt":					
					return "NUMBER({0})"._Format(GetNumberMaxLength(column));
				case "Decimal":
					return "NUMBER({0},2)"._Format(GetNumberMaxLength(column));
				case "VarBinary":
					return "BLOB";
				case "DateTime":
					return "DATE DEFAULT (sysdate)";
				case "Bit":
					return "CHAR CHECK ({0} IN (0,1))"._Format(column.Name);
				default:
					return "VARCHAR2({0})"._Format(column.MaxLength);
			}
		}

		private string GetNumberMaxLength(ColumnAttribute column)
		{
			string maxLength = column.MaxLength;
			if (string.IsNullOrEmpty(maxLength))
			{
				maxLength = "10";
			}

			return maxLength;
		}

		#region IPLSqlBulder Members

		public bool ReturnsId
		{
			get;
			set;
		}

		#endregion
	}
}
