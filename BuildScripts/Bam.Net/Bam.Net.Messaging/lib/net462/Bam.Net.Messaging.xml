<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Messaging</name>
    </assembly>
    <members>
        <member name="M:Bam.Net.Messaging.ISmtpSettingsProvider.CreateEmail(System.String,System.String)">
            <summary>
            When implemented should return
            an email whose smtp settings are already 
            set to those of the current IHasSmtpSettings
            implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the DirectMessage table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Where(System.Func{Bam.Net.Messaging.Data.DirectMessageColumns,Bam.Net.Data.QueryFilter{Bam.Net.Messaging.Data.DirectMessageColumns}},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a DirectMessageColumns 
            and returns a QueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;DirectMessageColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single DirectMessage instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Messaging.Data.DirectMessage.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of DirectMessages
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.DirectMessage.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.DirectMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a DirectMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DirectMessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the EmailMessage table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Where(System.Func{Bam.Net.Messaging.Data.EmailMessageColumns,Bam.Net.Data.QueryFilter{Bam.Net.Messaging.Data.EmailMessageColumns}},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a EmailMessageColumns 
            and returns a QueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;EmailMessageColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single EmailMessage instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Messaging.Data.EmailMessage.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of EmailMessages
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.EmailMessage.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.EmailMessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a EmailMessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EmailMessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Message table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Where(System.Func{Bam.Net.Messaging.Data.MessageColumns,Bam.Net.Data.QueryFilter{Bam.Net.Messaging.Data.MessageColumns}},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a MessageColumns 
            and returns a QueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;MessageColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Message instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Messaging.Data.Message.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Messaging.Data.Message.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Messages
            </summary>
        </member>
        <member name="M:Bam.Net.Messaging.Data.Message.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Messaging.Data.MessageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a MessageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MessageColumns and other values
            </param>
            <param name="db"></param>
        </member>
    </members>
</doc>
