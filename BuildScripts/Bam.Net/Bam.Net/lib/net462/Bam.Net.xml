<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net</name>
    </assembly>
    <members>
        <member name="M:Bam.Net.AdHocCSharpCompiler.ToAssembly(System.IO.DirectoryInfo,System.String)">
            <summary>
            Compile all .cs files found in the specified directory to 
            the specified assemblyFileName and return the assembly.  Does
            a recursive search for .cs files
            </summary>
            <param name="direcotry"></param>
            <param name="assemblyFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.AdHocCSharpCompiler.ToAssembly(System.IO.DirectoryInfo,System.String,System.CodeDom.Compiler.CompilerResults@)">
            <summary>
            Compile all .cs files found in the specified directory to 
            the specified assemblyFileName and return the assembly.  Does
            a recursive search for .cs files
            </summary>
            <param name="directory"></param>
            <param name="assemblyFileName"></param>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.AdHocCSharpCompiler.ToAssembly(System.IO.DirectoryInfo,System.String,System.CodeDom.Compiler.CompilerResults@,System.Boolean)">
            <summary>
            Compile all .cs files found in the specified directory to 
            the specified assemblyFileName and return the assembly.  Does
            a recursive search for .cs files
            </summary>
            <param name="directory"></param>
            <param name="assemblyFileName"></param>
            <param name="results"></param>
            <param name="throwOnError"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.AdHocCSharpCompiler.ToAssembly(System.IO.FileInfo[],System.String)">
            <summary>
            Compile the specified files containing csharp source into the assembly of the 
            specified assemblyFileName
            </summary>
            <param name="files"></param>
            <param name="assemblyFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Args.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an ArgumentNullException if the specified 
            param is null
            </summary>
            <param name="param"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:Bam.Net.Args.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an ArgumentNullException if the specified
            string is null or an empty string
            </summary>
            <param name="param"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:Bam.Net.Args.ThrowIf``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Throw an exception of generic type E if the specified
            condition is true using the specified format and
            format values to define the message of the exception
            </summary>
            <typeparam name="E"></typeparam>
            <param name="condition"></param>
            <param name="msgFormat"></param>
            <param name="values"></param>
        </member>
        <member name="M:Bam.Net.Args.Throw``1(System.String,System.Object[])">
            <summary>
            Throw an exception of generic type E using the specified
            format and format values to define the message of the
            exception
            </summary>
            <typeparam name="E"></typeparam>
            <param name="msgFormat"></param>
            <param name="values"></param>
        </member>
        <member name="M:Bam.Net.Args.Exception(System.String,System.Object[])">
            <summary>
            Create an exception using the specified format and
            format values to define the message of the exception
            </summary>
            <param name="msgFormat"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Args.Exception``1(System.String,System.Object[])">
            <summary>
            Create an exception of generic type E using the 
            specified format and format values to define
            the message of the exception
            </summary>
            <typeparam name="E">The type of the exception to return</typeparam>
            <param name="msgFormat">The string format</param>
            <param name="values">The arguments to pass to string.Format</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Args.Exception``1(System.String,System.Exception,System.Object[])">
            <summary>
            Create an exception of generic type E using the 
            specified format, format values and inner exception
            to define the message and inner exception of the 
            resultant exception
            </summary>
            <typeparam name="E"></typeparam>
            <param name="msgFormat"></param>
            <param name="innerException"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Args.PopMessageAndStackTrace(System.Exception,System.Text.StringBuilder@,System.Text.StringBuilder@)">
            <summary>
            "Pop" out a StringBuilder for the message and stack trace for the specified 
            Exception.
            </summary>
            <param name="ex"></param>
            <param name="message"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="T:Bam.Net.BackgroundThreadQueue`1">
            <summary>
            A queue processing facility that processes
            enqueued items in a background thread
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bam.Net.Configuration.Configurable.RequiredProperties">
            <summary>
            When implemented in a derived class should
            return an array of strings containing the 
            name of each property of the object which 
            are required to be set prior to execution.
            </summary>
        </member>
        <member name="T:Bam.Net.Configuration.DefaultConfigurationApplicationNameProvider">
            <summary>
            An ApplicationNameProvider that retrieves the ApplicationName
            value from the appSettings section of the default configuration file
            </summary>
        </member>
        <member name="T:Bam.Net.Configuration.DefaultConfiguration">
            <summary>
            A simple wrapper around the ConfigurationManager that simplifies
            configuration information access and enables programmatic
            manipulation of configuration values
            </summary>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetAppSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the NameValueCollection that configuration settings are retrieved from when 
            using the DefaultConfiguration static class.  The default is ConfigurationManager.AppSettings;
            </summary>
            <param name="appSettings"></param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetAppSettings(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sets the NameValueCollection that configuration settings are retrieved from when 
            using the DefaultConfiguration static class.  The default is ConfigurationManager.AppSettings;
            </summary>
            <param name="appSettings"></param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetAppSettings">
            <summary>
            Reset the inner appSettings to those provided by ConfigurationManager.AppSettings
            </summary>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetConnectionStrings(System.Configuration.ConnectionStringSettingsCollection)">
            <summary>
            Sets the ConnectionStringSettingsCollection that connection strings are retrieved from when 
            using the DefaultConfiguration static class. The default is ConfigurationManager.ConnectionStrings.
            </summary>
            <param name="connectionStrings"></param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.GetAppSetting(System.Type,System.String)">
            <summary>
            Get the property value for the specified type. If the value is not found 
            an empty string will be returned.
            </summary>
            <param name="type">The Type to retrieve the property for</param>
            <param name="property">The property to retrieve a value for</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.GetAppSetting(System.String)">
            <summary>
            Get the value of the specified key. If the value is not found an empty string will be returned.
            </summary>
            <param name="key">The key name to return the value for.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.GetAppSetting(System.String,System.String)">
            <summary>
            Get the value of the specified key. If the value is not found 
            the specified default value will be returned.
            </summary>
            <param name="key">The key name to return the value for.</param>
            <param name="defaultValue">The value that will be returned if the 
            specified key is not found.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.GetAppSetting(System.String,System.Boolean,System.String)">
            <summary>
            Get the value of the specified key.  If the value is not found
            and throwIfNullOrEmpty is true the specified messageFormat will 
            be used as the message of an InvalidOperationException with the 
            key as format args
            </summary>
            <param name="key"></param>
            <param name="throwIfNullOrEmpty"></param>
            <param name="messageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.GetConnectionString(System.String)">
            <summary>
            Return the specified connection string from the default configuration file.
            If the value is not found a blank entry with the specified name will 
            be added to the configuration file and an empty string will be returned.
            </summary>
            <param name="name">The name of the connection string to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.GetConnectionString(System.String,System.String)">
            <summary>
            Return the specified connection string from the default configuration file.
            If the value is not found the specified default value will be added to the
            configuration file and that value will be returned.
            </summary>
            <param name="name">The name of the connection string to retrieve</param>
            <param name="defaultValue">The value to return if the connection string
            is not found in the configuration file.  This value will also be added to 
            the configuration file.</param>
            <returns>string</returns>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.GetConnectionString(System.String,System.String,System.Boolean)">
            <summary>
            Return the specified connection string from the default confiruation file.
            If the value is not found the specified default value will be added to the
            configuration file and that value will be returned.
            </summary>
            <param name="name">The name of the connection string to retrieve</param>
            <param name="defaultValue">The value to return if the connection string
            is not found in the configuration file.  This value will also be added to 
            the configuration file.</param>
            <param name="add">If true and the specified name is not found the specified default
            value will be added to the configuration file.</param>
            <returns>string</returns>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetProperties(System.Object)">
            <summary>
            Set properties from the default config file.  The config file should contain keys in the form <i>TypeName.PropertyName</i>, 
            where <i>TypeName</i> is the name of the class and <i>PropertyName</i> is the name of the property to set
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetProperties(System.Object,System.Boolean)">
            <summary>
            Set properties from the default config file.  The config file should contain keys in the form <i>TypeName.PropertyName</i>, 
            where <i>TypeName</i> is the name of the class and <i>PropertyName</i> is the name of the property to set
            </summary>
            <param name="target"></param>
            <param name="throwIfMissingRequiredProperties">If required property isn't found in the default config
            throw an exception.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.CopyConfig(System.String)">
            <summary>
            Copies the currently executing assembly's config file to the specified
            path.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetPropertiesByProxyInstance(System.Object,System.Object)">
            <summary>
            Sets the properties of the target instance that match the property names of the specified proxy
            from the specified proxy instance.  
            </summary>
            <param name="target">The instance to set the properties for.</param>
            <param name="proxy">An instance of the proxy class to use.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetPropertiesByProxy(System.Object,System.Object)">
            <summary>
            Sets the properties of the current instance that match the property names of the specified proxy
            from the default config file.  The config file should contain keys in the form <i>TypeName.PropertyName</i>, 
            where <i>TypeName</i> is the name of the proxy class and <i>PropertyName</i> is the name of the property to set
            on the current instance.
            </summary>
            <param name="target">The instance to set the properties for.</param>
            <param name="proxy">An instance of the proxy class to use.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetPropertiesByProxy(System.Object,System.Object,System.Boolean)">
            <summary>
            Sets the properties of the current instance that match the property names of the specified proxy
            from the default config file.  The config file should contain keys in the form <i>TypeName.PropertyName</i>, 
            where <i>TypeName</i> is the name of the proxy class and <i>PropertyName</i> is the name of the property to set
            on the current instance.
            </summary>
            <param name="target">The instance to set the properties for.</param>
            <param name="proxy">An instance of the proxy class to use.</param>
            <param name="throwIfMissingRequiredProperties">Throws an exception if target implements IHasRequiredProperties
            and not all required properties have been set.  The overrided default is false.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetPropertiesByProxy(System.Object,System.Type)">
            <summary>
            Sets the properties of the specified target that match the property names of the specified proxy
            from the default config file.  The config file should contain keys in the form <i>TypeName.PropertyName</i>, 
            where <i>TypeName</i> is the name of the proxy class and <i>PropertyName</i> is the name of the property to set
            on the target.
            </summary>
            <param name="target">The instance to set the properties for.</param>
            <param name="proxyType">The type of the proxy to use.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.SetPropertiesByProxy(System.Object,System.Type,System.Boolean)">
            <summary>
            Sets the properties of the specified target that match the property names of the specified proxy
            from the default config file.  The config file should contain keys in the form <i>TypeName.PropertyName</i>, 
            where <i>TypeName</i> is the name of the proxy class and <i>PropertyName</i> is the name of the property to set
            on the target.
            </summary>
            <param name="target">The instance to set the properties for.</param>
            <param name="proxyType">The type of the proxy to use.</param>
            <param name="throwIfMissingRequiredProperties">Throws an exception if target implements IHasRequiredProperties
            and not all required properties have been set.  The overrided default is false.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.CopyProperties(System.Object,System.Object)">
            <summary>
            Copies properties that match in name and type from source
            to destination.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.CheckRequiredProperties(Bam.Net.Configuration.IHasRequiredProperties)">
            <summary>
            Checks the properties named in the RequiredProperties property of the specified
            IHasRequiredProperties object ensuring that each has been set. This method will 
            throw an error if any required property is null or an empty string.
            </summary>
            <param name="target">The IHasRequiredProperties implementation to check.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.CheckRequiredProperties(Bam.Net.Configuration.IHasRequiredProperties,System.Type)">
            <summary>
            Checks the properties named in the RequiredProperties property of the specified
            IHasRequiredProperties object ensuring that each has been set. This method will 
            throw an error if required properties have not been set.
            </summary>
            <param name="target">The IHasRequiredProperties implementation to check.</param>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.InvokeConfigMethods(System.Object)">
            <summary>
            Invokes methods declared in the appSettings section of the default configuration file.  
            </summary>
            <param name="target">The object instance to invoke methods on</param>
            <remarks>
            The keys 
            should be in the format &lt;Type.Name&gt;.InvokeMethod.&lt;MethodName&gt;.&lt;Order as int&gt;.  For
            example: PatternsDatabaseSetupPermissionsInfo.InvokeMethod.AddStandardDbOwnerGroup.0.  The trailing number
            determines the order of invocation relative to all other method invocations from configuration.
            The values should be a comma separated list of string parameters to be passed to the method upon invocation.
            Any additional spaces in the comma separated list of values will not be trimmed so the invoked methods
            should handle that possibility accordingly.
            </remarks>
        </member>
        <member name="M:Bam.Net.Configuration.DefaultConfiguration.InvokeConfigMethods(System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Invokes methods declared in the specified appSettingDictionary.  
            </summary>
            <param name="target">The object instance to invoke methods on</param>
            <param name="appSettingDictionary">A dictionary of methods to invoke along with the parameter values.</param>
            <remarks>
            The dictionary keys 
            should be in the format &lt;Type.Name&gt;.InvokeMethod.&lt;MethodName&gt;.&lt;Order as int&gt;.  For
            example: PatternsDatabaseSetupPermissionsInfo.InvokeMethod.AddStandardDbOwnerGroup.0.  The trailing number
            determines the order of invocation relative to all other method invocations from configuration.
            The values should be a comma separated list of string parameters to be passed to the method upon invocation.
            Any additional spaces in the comma separated list of values will not be trimmed so the invoked methods
            should handle that possibility accordingly.
            </remarks>
        </member>
        <member name="T:Bam.Net.Configuration.DefaultConfigurer">
            <summary>
            Configures IConfigurables by using DefaultConfiguration
            </summary>
        </member>
        <member name="T:Bam.Net.Configuration.IHasRequiredProperties">
            <summary>
            This interface is intended to be implemented by classes
            who wish to use the DefaultConfiguration class and 
            CascadeConfiguration class to set its properties.
            </summary>
        </member>
        <member name="P:Bam.Net.Configuration.IHasRequiredProperties.RequiredProperties">
            <summary>
            When implemented in a derived class should
            return an array of strings containing the 
            name of each property of the object which 
            are required to be set prior to execution.
            </summary>
        </member>
        <member name="T:Bam.Net.doc">
            <remarks/>
        </member>
        <member name="P:Bam.Net.doc.assembly">
            <remarks/>
        </member>
        <member name="P:Bam.Net.doc.members">
            <remarks/>
        </member>
        <member name="T:Bam.Net.assembly">
            <remarks/>
        </member>
        <member name="P:Bam.Net.assembly.name">
            <remarks/>
        </member>
        <member name="T:Bam.Net.PermissionSet">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSet.IPermission">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSet.type">
            <remarks/>
        </member>
        <member name="T:Bam.Net.PermissionSetIPermission">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSetIPermission.Any">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSetIPermission.class">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSetIPermission.version">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSetIPermission.Flags">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSetIPermission.Unrestricted">
            <remarks/>
        </member>
        <member name="P:Bam.Net.PermissionSetIPermission.AnyAttr">
            <remarks/>
        </member>
        <member name="T:Bam.Net.completionlist">
            <remarks/>
        </member>
        <member name="P:Bam.Net.completionlist.cref">
            <remarks/>
        </member>
        <member name="P:Bam.Net.completionlist.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.seealso">
            <remarks/>
        </member>
        <member name="P:Bam.Net.seealso.cref">
            <remarks/>
        </member>
        <member name="P:Bam.Net.seealso.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.permission">
            <remarks/>
        </member>
        <member name="P:Bam.Net.permission.cref">
            <remarks/>
        </member>
        <member name="P:Bam.Net.permission.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.include">
            <remarks/>
        </member>
        <member name="P:Bam.Net.include.file">
            <remarks/>
        </member>
        <member name="P:Bam.Net.include.path">
            <remarks/>
        </member>
        <member name="T:Bam.Net.typeparamref">
            <remarks/>
        </member>
        <member name="P:Bam.Net.typeparamref.name">
            <remarks/>
        </member>
        <member name="P:Bam.Net.typeparamref.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.paramref">
            <remarks/>
        </member>
        <member name="P:Bam.Net.paramref.name">
            <remarks/>
        </member>
        <member name="P:Bam.Net.paramref.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.list">
            <remarks/>
        </member>
        <member name="P:Bam.Net.list.listheader">
            <remarks/>
        </member>
        <member name="P:Bam.Net.list.item">
            <remarks/>
        </member>
        <member name="P:Bam.Net.list.type">
            <remarks/>
        </member>
        <member name="T:Bam.Net.listListheader">
            <remarks/>
        </member>
        <member name="P:Bam.Net.listListheader.term">
            <remarks/>
        </member>
        <member name="P:Bam.Net.listListheader.description">
            <remarks/>
        </member>
        <member name="T:Bam.Net.listItem">
            <remarks/>
        </member>
        <member name="P:Bam.Net.listItem.term">
            <remarks/>
        </member>
        <member name="P:Bam.Net.listItem.description">
            <remarks/>
        </member>
        <member name="P:Bam.Net.listItem.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.see">
            <remarks/>
        </member>
        <member name="P:Bam.Net.see.cref">
            <remarks/>
        </member>
        <member name="P:Bam.Net.see.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.code">
            <remarks/>
        </member>
        <member name="P:Bam.Net.code.language">
            <remarks/>
        </member>
        <member name="P:Bam.Net.code.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.c">
            <remarks/>
        </member>
        <member name="P:Bam.Net.c.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.content">
            <remarks/>
        </member>
        <member name="P:Bam.Net.content.Items">
            <remarks/>
        </member>
        <member name="P:Bam.Net.content.Text">
            <remarks/>
        </member>
        <member name="T:Bam.Net.typeparam">
            <remarks/>
        </member>
        <member name="P:Bam.Net.typeparam.name">
            <remarks/>
        </member>
        <member name="T:Bam.Net.param">
            <remarks/>
        </member>
        <member name="P:Bam.Net.param.name">
            <remarks/>
        </member>
        <member name="T:Bam.Net.exception">
            <remarks/>
        </member>
        <member name="P:Bam.Net.exception.cref">
            <remarks/>
        </member>
        <member name="T:Bam.Net.example">
            <remarks/>
        </member>
        <member name="T:Bam.Net.value">
            <remarks/>
        </member>
        <member name="T:Bam.Net.returns">
            <remarks/>
        </member>
        <member name="T:Bam.Net.remarks">
            <remarks/>
        </member>
        <member name="P:Bam.Net.remarks.Items1">
            <remarks/>
        </member>
        <member name="T:Bam.Net.para">
            <remarks/>
        </member>
        <member name="T:Bam.Net.summary">
            <remarks/>
        </member>
        <member name="P:Bam.Net.summary.Items1">
            <remarks/>
        </member>
        <member name="T:Bam.Net.member">
            <remarks/>
        </member>
        <member name="P:Bam.Net.member.Items">
            <remarks/>
        </member>
        <member name="P:Bam.Net.member.name">
            <remarks/>
        </member>
        <member name="T:Bam.Net.members">
            <remarks/>
        </member>
        <member name="P:Bam.Net.members.Items">
            <remarks/>
        </member>
        <member name="T:Bam.Net.EncryptAttribute">
            <summary>
            Denotes a class that requires clients use
            encrypted channels for method invocation calls
            </summary>
        </member>
        <member name="T:Bam.Net.Encryption.RSAKeyValue">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.Modulus">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.Exponent">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.P">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.Q">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.DP">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.DQ">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.InverseQ">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.RSAKeyValue.D">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Encryption.NewDataSet">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Encryption.NewDataSet.Items">
            <remarks/>
        </member>
        <member name="M:Bam.Net.Encryption.Aes.Encrypt(System.String)">
            <summary>
            Gets a Base64 encoded value representing the cypher of the specified value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Aes.Encrypt(System.String,Bam.Net.Encryption.AesKeyVectorPair)">
            <summary>
            Gets a Base64 encoded value representing the cypher of the specified
            value using the specified key.
            </summary>
            <param name="value"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Aes.ToBase64EncodedEncryptedXml(System.Object,Bam.Net.Encryption.AesKeyVectorPair@)">
            <summary>
            Get a base64 encoded encrypted xml serialization string representing the specified target object
            </summary>
            <param name="target">The object to serialize</param>
            <param name="key">The key used to encrypt and decrypt the resulting string</param>
            <returns>string</returns>
        </member>
        <member name="M:Bam.Net.Encryption.AesKeyVectorPair.Encrypt(System.String)">
            <summary>
            Gets a Base64 encoded value representing the cypher of the specified
            value using the specified key.
            </summary>
        </member>
        <member name="T:Bam.Net.EventSubscription">
            <summary>
            A descriptor for the constituent pieces of an
            in process EventSubscription
            </summary>
        </member>
        <member name="T:Bam.Net.ExceptionHandling.ExceptionArbiter">
            <summary>
            A Class responsible for arbitrating exceptions
            </summary>
        </member>
        <member name="T:Bam.Net.ExcludeAttribute">
            <summary>
            Use to exclude a method from being proxied or a property from 
            being "editable" in a call to Html.InputsFor.
            </summary>
        </member>
        <member name="T:Bam.Net.GeneratedAssemblyInfo">
            <summary>
            Provides information about dynamically generated assemblies
            </summary>
        </member>
        <member name="P:Bam.Net.GeneratedAssemblyInfo.AssemblyFilePath">
            <summary>
            The path to the Assembly (.dll)
            </summary>
        </member>
        <member name="M:Bam.Net.GeneratedAssemblyInfo.GetGeneratedAssembly(System.String,Bam.Net.IAssemblyGenerator)">
            <summary>
            Get the generated assembly for the specified fileName using the
            specified generator to generate it if necessary
            </summary>
            <param name="infoFileName"></param>
            <param name="generator"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Instant">
            <summary>
            A portable moment in time down to the millisecond
            </summary>
        </member>
        <member name="M:Bam.Net.Instant.DiffInMilliseconds(Bam.Net.Instant)">
            <summary>
            Returns the difference between the current instant 
            and the specified value in milliseconds
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Instant.DiffInMilliseconds(System.DateTime)">
            <summary>
            Returns the difference between the current instant 
            and the specified value in milliseconds
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Instant.ToDate">
            <summary>
            Return a DateTime object representing only the Date
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Instant.ToDateString">
            <summary>
            Returns the current instant in the format "{Month}/{Day}/{Year}"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Instant.ToDateTime">
            <summary>
            Return a DateTime object representing the current Instant instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.LocalAttribute">
            <summary>
            Used to denote a method that will not be 
            proxied and will execute locally.  Also
            allows a method to be network invoked if
            the service is exposed to the local loopback
            address 127.0.0.1
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.ILoggable.Subscribe(Bam.Net.Logging.ILogger)">
            <summary>
            When implemented in a derived class, subscribes 
            the specified logger to log the inner events 
            of the derived class.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Bam.Net.Logging.ILoggable.IsSubscribed(Bam.Net.Logging.ILogger)">
            <summary>
            When implemented in a derived class, 
            should return true if the specified 
            logger is already subscribed
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Logging.Loggable">
            <summary>
            An abstract base class providing methods for 
            subscribing to and firing events defined on derived
            classes.
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.Loggable.LogVerbosity">
            <summary>
            A value from 0 - 5, represented by the LogEventType enum.
            The higher the value the more log entries will 
            be logged.
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.Loggable.Subscribers">
            <summary>
            An array of all the ILoggers that have
            been subscribed to this Loggable
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Loggable.Subscribe(Bam.Net.Logging.Loggable)">
            <summary>
            Subscribe the current Loggables subscribers
            to the specified Loggable and vice versa
            </summary>
            <param name="loggable"></param>
        </member>
        <member name="M:Bam.Net.Logging.Loggable.Subscribe(Bam.Net.Logging.ILogger)">
            <summary>
            Subscribe the specified logger to
            all the events of the current type
            where the event delegate is defined
            as an EventHandler.  This method 
            will also take into account the 
            current value of LogVerbosity if
            the events found are addorned with the 
            Verbosity attribute
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Bam.Net.Logging.Loggable.IsSubscribed(Bam.Net.Logging.ILogger)">
            <summary>
            Returns true if the specified logger is 
            subscribed to the current Loggable
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Logging.Loggable.FireEvent(System.EventHandler)">
            <summary>
            Fire the specified event if there are
            subscribers
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Bam.Net.Logging.Loggable.FireEvent(System.EventHandler,System.EventArgs)">
            <summary>
            Fire the specified event if there are subscribers
            </summary>
            <param name="eventHandler"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="P:Bam.Net.Logging.VerbosityAttribute.MessageFormat">
            <summary>
            The "NamedFormat" message format to use when outputting messages
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.Severity">
            <summary>
            The same values as LogEventType and VerbosityLevel.
            Each exists for clarity in specific contexts.
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.VerbosityLevel">
            <summary>
            The same values as LogEventType.
            Both exist for clarity in specific
            contexts.
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.CsvLogger">
            <summary>
            A custom text file logger that logs events in
            a csv (comma separated values) format
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.Log.Default">
            <summary>
            Gets or sets the default logger.  Default is determined by the configuration 
            file.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Log.Reset">
            <summary>
            Reset Log.Current to null.  Used primarily for testing.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Log.AddEntry(System.String,System.Diagnostics.EventLogEntryType,System.String[])">
            <summary>
            Convenience method for passing in System.Diagnostics.EventLogEntryType instead of LogEventType.
            The specified EventLogEntryType will be converted to an equivalent LogEventType if necessary.
            </summary>
            <param name="messageSignature"></param>
            <param name="type"></param> 
            <param name="variableValues"></param>
        </member>
        <member name="M:Bam.Net.Logging.Log.BlockUntilEventQueueIsEmpty(System.Int32)">
            <summary>
            Blocks the current thread until the event queue is empty.  Keep
            in mind that other calls to AddEntry by other threads will 
            increment the number of events in the queue.  If the commit 
            thread is running it will be restarted.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Log.Start">
            <summary>
            Starts the background logging commit thread.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Log.Stop">
            <summary>
            Stops the background logging commit thread.
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.LogEventCollection">
            <summary>
            Represents a collection of LogEvents that can be persisted to a file.
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.LogEventCollection.EventLogEntries">
            <summary>
            Gets or sets the LogEvent array that constitute
            this LogEventCollection
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.LogEventType">
            <summary>
            The same values as Verbosity level.
            Both exist for clarity in specific
            contexts.
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.Logger.CommitCycleDelay">
            <summary>
            The number of milliseconds to wait after a LogEvent
            is queued to be committed before beginning the
            commit loop
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Logger.StartLoggingThread">
            <summary>
            Start the background logger commit thread.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Logger.BlockUntilEventQueueIsEmpty(System.Int32)">
            <summary>
            Blocks the current thread until the event queue is empty.
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.Logger.Verbosity">
            <summary>
            A number indicating what level of verbosity to log.  The default is 4.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Logger.CommitLogEvent(Bam.Net.Logging.LogEvent)">
            <summary>
            When overridden in a derived class will commit the specified logEvent
            to the underlying storage for the current Logger implementation.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:Bam.Net.Logging.Logger.GetEventId(System.String,System.String)">
            <summary>
            Returns an id for the specified applicationName and messageSignature.
            </summary>
            <param name="applicationName"></param>
            <param name="messageSignature"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Logging.MultiTargetLogger">
            <summary>
            The type of logger that Log.Default will be set to if
            AddLogger is called.  Commit() implementation only 
            calls Commit on each logger that has been added through
            the AddLogger method.  This class is not intended to be 
            used directly.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.MultiTargetLogger.AddLogger(Bam.Net.Logging.ILogger)">
            <summary>
            Adds the specified logger if it hasn't already been added.  If
            the specified logger is the current MultiTargetLogger it will not be added.
            If the specified logger is a NullLoger it will not be added.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:Bam.Net.Logging.MultiTargetLogger.Loggers">
            <summary>
            An array of all the loggers currently added to this 
            MultiTargetLogger
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.MultiTargetLogger.CommitLogEvent(Bam.Net.Logging.LogEvent)">
            <summary>
            Passes the specified logEvent to the Commit method
            of each of the ILoggers in Loggers.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:Bam.Net.Logging.NamespaceDoc">
            <summary>
            The Bam.Net.Logging namespace contains classes, interfaces and value types used to aide
            in log management.
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.NullLogger">
            <summary>
            The logger that gets created for Log.Default when
            logging is not configured in the configuration file
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.TextFileLogger">
            <summary>
            A logger used to log events to a text file
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.TextFileLogger.MaxBytes">
            <summary>
            Gets or sets the maximum size of any single log file created by this logger.
            No effect if XmlLogger, use MaxEntries instead.
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.TextFileLogger.Folder">
            <summary>
            Gets or sets the directory where logs are written
            </summary>
        </member>
        <member name="P:Bam.Net.Logging.TextFileLogger.File">
            <summary>
            Gets the FileInfo representing the current log.  This will change as the file reaches 
            the max size or entries per file for XmlLogger.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.TextFileLogger.CommitLogEvent(Bam.Net.Logging.LogEvent)">
            <summary>
            Writes the specified logEvent to the file referenced by the File property
            of the current TextFileLogger.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:Bam.Net.Logging.TextFileLogger.SetNextFileInfo">
            <summary>
            Increments the file number if the current file number already exists.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.TextFileLogger.GetAppDataFolder">
            <summary>
            Gets the path to the current user's AppData folder. If
            this is run in a Web app (HttpContext.Current isn't null)
            then the full path to ~/AppData/ is returned. 
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.WindowsEventIdProvider">
            <summary>
            Event Id provider for use with windows log, always returns 0
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.WindowsLogger">
            <summary>
            An LoggerBase implementation that commits logs to the 
            Windows event viewer.
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.XmlLogger">
            <summary>
            A logger that logs to an xml file
            </summary>
        </member>
        <member name="T:Bam.Net.ApplicationDiagnosticInfo">
            <summary>
            Diagnostic information about the current
            application process and thread
            </summary>
        </member>
        <member name="T:Bam.Net.IpcMessage">
            <summary>
            A file based
            IPC mechanism that doesn't use, MSMQ, NamedPipes
            or MMF (MemoryMappedFiles).  Uses a single file
            with a binary formatted copy of an instance of T 
            in the directory RootDirectory with the name specified.
            </summary>
        </member>
        <member name="M:Bam.Net.IpcMessage.Get(System.String,System.Type,System.String)">
            <summary>
            Gets a message with the specified name creating it 
            if necessary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.IpcMessage.LockTimeout">
            <summary>
            The number of milliseconds to wait to 
            try and acquire a lock
            </summary>
        </member>
        <member name="P:Bam.Net.IpcMessage.CurrentLockerId">
            <summary>
            Gets the process id of the process who has 
            the lock
            </summary>
        </member>
        <member name="M:Bam.Net.IpcMessageRoot.GetMessage``1(System.String)">
            <summary>
            Gets a message with the specified name 
            of the specified type creating it if necessary
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.IpcMessageRoot.GetMessage(System.String,System.Type)">
            <summary>
            Gets a message with the specified name 
            of the specified type creating it if necessary
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.NamedThread.Action">
            <summary>
            The Action originally passed to the constructor of 
            the current NamedThread.  This may be null
            if the Action specific constructor was not used
            </summary>
        </member>
        <member name="P:Bam.Net.NamedThread.Function">
            <summary>
            The Function originally passed to the constructor 
            of the current NamedThread.  This may be null if
            the Function specific constructor was not used
            </summary>
        </member>
        <member name="M:Bam.Net.NamedThread.op_Implicit(Bam.Net.NamedThread)~System.Threading.Thread">
            <summary>
            Implicitly convert NamedThread to Thread
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Razor.RazorBaseTemplate.DefaultInspector">
            <summary>
            The default Action that will be given razor parse results; primarily for
            debugging
            </summary>
        </member>
        <member name="P:Bam.Net.Razor.RazorParser`1.DefaultRazorInspector">
            <summary>
            The default inspector used by any RazorParser that hasn't been assigned one
            </summary>
        </member>
        <member name="M:Bam.Net.Razor.RazorParser`1.#ctor(System.String,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="defaultNamespace"></param>
            <param name="defaultClassName"></param>
            <param name="options">Applied to the GeneratedClassContext</param>
        </member>
        <member name="M:Bam.Net.Razor.RazorParser`1.ExecuteResource(System.String,System.Object)">
            <summary>
            Execute the specified razor resource template
            </summary>
            <param name="templateName">The name of the embedded resource template</param>
            <param name="options">Additional information to pass to the template engine including 
            the Model</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Razor.RazorParser`1.Execute(System.IO.TextReader,System.String,System.Object,System.Action{System.String},System.Reflection.Assembly[])">
            <summary>
            Executes the specified input and returns the resulting output
            </summary>
            <param name="input"></param>
            <param name="options">Arguments to pass to the template engine including the Model</param>
            <param name="inspector"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Razor.RazorRenderer.RenderResource``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Render the specified generic type T using the 
            specified embedded resource template.  The template
            must be embedded in the same Assembly where 
            T is defined in a subdirectory of "Templates"
            </summary>
            <typeparam name="T"></typeparam>
            <param name="templateName"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Razor.RazorTemplate`1">
            <summary>
            A base razor template whose model is of type 
            TModel
            </summary>
            <typeparam name="TModel">The type of the model</typeparam>
        </member>
        <member name="T:Bam.Net.Validate">
            <summary>
            Symantec convenience class
            </summary>
        </member>
        <member name="M:Bam.Net.Validate.RequiredProperties(Bam.Net.Configuration.IHasRequiredProperties)">
            <summary>
            Checks the properties named in the RequiredProperties property of the specified
            IHasRequiredProperties object ensuring that each has been set. This method will 
            throw an error if any required property is null or an empty string.
            </summary>
            <param name="toBeValidated">The IHasRequiredProperties implementation to check.</param>
        </member>
        <member name="M:Bam.Net.Web.FormParameterExtensionscs.FormEncode(System.Object)">
            <summary>
            Encode the specified value as though it were submitted by
            a form element on an html page
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Web.Headers.KeyToken">
            <summary>
            Header used to prove that the client knows the shared secret by using 
            it to create a hash value that this header is set to
            </summary>
        </member>
        <member name="P:Bam.Net.Web.Headers.Responder">
            <summary>
            Header used to request a specific responder on the server
            handle a given request
            </summary>
        </member>
        <member name="M:Bam.Net.Web.Http.GetJson``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the specified url and parses the result as Json into the specified
            generic type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Web.HttpArgs">
            <summary>
            Represents arguments passed to and from Http
            requests and responses; either query string or
            posted form data
            </summary>
        </member>
        <member name="M:Bam.Net.Web.HttpArgs.Has(System.String,System.String@)">
            <summary>
            Returns true if the current HttpArgs instance
            has the specified key
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value associated with key</param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Web.ProxyAlias">
            <summary>
            An alias for a proxied service class, typically
            the name of the client side javascript variable
            </summary>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.ToInfoHash(System.Collections.Generic.IEnumerable{System.Type},Bam.Net.HashAlgorithms,System.Text.Encoding)">
            <summary>
            Returns a hash representing the specified
            types using the specified HashAlgorithm 
            and encoding
            </summary>
            <param name="types"></param>
            <param name="algorithm"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.ToInfoString(System.Type)">
            <summary>
            Return a string representation of the specified 
            type.  This is primarily used for hashing the
            type for the purpose of uniquely identifying
            it across processes.  The resulting
            string cannot be easily converted back to 
            the original type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.ToInfoString(System.Reflection.PropertyInfo)">
            <summary>
            Return a string representation of the prop. This 
            is primarily used for hashing the property and
            the resulting string cannot be easily converted 
            back to the original PropertyInfo
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.InvokeStatic``1(System.Type,System.String,System.Object[])">
            <summary>
            Invoke the specified static method of the 
            specified (extension method "current") type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the specified method on the specified instance 
            using the specified arguments
            </summary>
            <param name="instance"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.InvokeGeneric``2(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the specified generic method with generic argument type TArg
            returning object of type T
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TArg"></typeparam>
            <param name="instance"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Invoke the specified method on the specified instance 
            using the specified arguments
            </summary>
            <param name="instance"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.HasProperty(System.Object,System.String)">
            <summary>
            Returns true if the specified instance is of a type
            that has the specified propertyName
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.HasProperty(System.Object,System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Returns true if the specified instance is of a type
            that has the specified propertyName
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.On``1(``0,System.String,System.EventHandler)">
            <summary>
            Subscribe the specified handler to the specified event.  This
            is mostly useful when the type is ambiguous because
            the underlying implementation uses reflection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="eventName"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Subscribe``1(``0,System.String,System.EventHandler)">
            <summary>
            Subscribe the specified handler to the specified event 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="eventName"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Subscribe(System.Object,System.String,System.Delegate)">
            <summary>
            Subscribe the specified handler to the specified event
            </summary>
            <param name="instance"></param>
            <param name="eventName"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Off``1(``0,System.String,System.Delegate)">
            <summary>
            Unsubscribe the specified handler from the specified event 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="eventName"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.UnSubscribe(System.Object,System.String,System.Delegate)">
            <summary>
            Unsubscribe the specified handler from the specified event 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="eventName"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.UnSubscribe``1(``0,System.String,System.Delegate)">
            <summary>
            Unsubscribe the specified handler from the specified event 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="eventName"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Property``1(System.Object,System.String,System.Boolean)">
            <summary>
            Get the property of the current instance with the specified name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="propertyName">The name of the property value to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Property(System.Object,System.String,System.Boolean)">
            <summary>
            Get the property of the current instance with the specified name
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.PropertyIfNullOrBlank(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Set the specified property if it is 
            null or an empty string
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="throwIfPropertyNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.PropertyIf(System.Object,System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            Set the specified property if the specified
            condition is true
            </summary>
            <param name="instance"></param>
            <param name="condition"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="throwIfPropertyNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Property(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Set the property with the specified name and return the instance 
            to enable chaining
            </summary>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Property(System.Object,System.Type,System.String,System.Object,System.Boolean)">
            <summary>      
            Set the property with the specified name and return the instance 
            to enable chaining
            </summary>
            <param name="instance"></param>
            <param name="instanceType"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="throwIfPropertyNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.Property``1(``0,System.String,System.Object,System.Boolean)">
            <summary>      
            Set the property with the specified name and return the instance 
            to enable chaining
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="throwIfPropertyNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.EachDataProperty``1(System.Object,System.Func{System.Reflection.PropertyInfo,System.Object,``0})">
            <summary>
            Return the results of the eacher by passing the PropertyInfo and value
            of each of the properties of instance where the property type is one
            of the base supported data types; bool, int, long, decimal, string, 
            byte[], DateTime or their nullable equivalent
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="eacher"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.EachDataProperty``1(System.Object,System.Type,System.Func{System.Reflection.PropertyInfo,System.Object,``0})">
            <summary>
            Return the results of the eacher by passing the PropertyInfo and value
            of each of the properties of instance where the property type is one
            of the base supported data types; bool, int, long, decimal, string, 
            byte[], DateTime or their nullable equivalent 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="type"></param>
            <param name="eacher"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.EachDataProperty``1(System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Func{System.Reflection.PropertyInfo,System.Object,``0})">
            <summary>
            Return the results of the eacher by passing the PropertyInfo and value
            of each of the properties of instance where the property type is one
            of the base supported data types; bool, int, long, decimal, string, 
            byte[], DateTime or their nullable equivalent
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="propertyPredicate"></param>
            <param name="eacher"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.EachDataProperty``1(System.Object,System.Type,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Func{System.Reflection.PropertyInfo,System.Object,``0})">
            <summary>
            Return the results of the eacher by passing the PropertyInfo and value
            of each of the properties of instance where the property is declared
            on the specified type and the property type is one of the base 
            supported data types; bool, int, long, decimal, string, byte[], 
            DateTime or their nullable equivalent
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="type"></param>
            <param name="propertyPredicate"></param>
            <param name="eacher"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ReflectionExtensions.ToTypeString(System.Type,System.Boolean)">
            <summary>
            Return the Type as the string that can be used to 
            declare it in code
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.SerializationExtensions">
            <summary>
            Container for serialization related extensioni methods
            </summary>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.XmlSerialize(System.Object,System.String)">
            <summary>
            Serialize the object to the specified filePath.  The same as
            ToXmlFile().
            </summary>
            <param name="target"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.ToXmlFile(System.Object,System.String)">
            <summary>
            Serialize the object to the specified filePath.  The same as XmlSerialzie()
            </summary>
            <param name="target"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.MemorySize(System.Object)">
            <summary>
            Get the ammount of memory occupied by the 
            specified target (current target if used as extension method)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.FromXmlFile``1(System.IO.FileInfo)">
            <summary>
            Deserialize the xml file as the specified type
            </summary>
            <typeparam name="T">The type of the return value</typeparam>
            <param name="file">Th xml file</param>
            <returns>instance of T</returns>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.FromXmlFile``1(System.String)">
            <summary>
            Deserialize the xml file as the specified generic type
            </summary>
            <typeparam name="T">The type of the return value</typeparam>
            <param name="filePath">The path to the xml file</param>
            <returns>instance of T</returns>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.FromXmlFile(System.String,System.Type)">
            <summary>
            Deserialize the xml file as the speicified type
            </summary>
            <param name="filePath">The path to the xml file</param>
            <param name="type">The type of the return value</param>
            <returns>instance of specified type deserialized from the specified file</returns>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.FromXml``1(System.String)">
            <summary>
            Deserialize the specified xmlString as the specified 
            generic type
            </summary>
            <typeparam name="T">The type of return value</typeparam>
            <param name="xmlString">The string to deserialize</param>
            <returns>instance of T</returns>
        </member>
        <member name="M:Bam.Net.SerializationExtensions.FromXml``1(System.String,System.Text.Encoding)">
            <summary>
            Deserialize the specified xml as the specified generic type using the specified encoding.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.GetFirstMethodWithAttributeOfType``1(System.Type,``0@)">
            <summary>
            Gets the MethodInfo for the first method found in the specified typeToAnalyze
            that has a custom attribute of the specified type T.  Returns null if none
            are found.
            </summary>
            <typeparam name="T">the type of the custom attribute to look for</typeparam>
            <param name="typeToAnalyze">the type to analyze</param>
            <param name="attr"></param>
            <returns>MethodInfo or null</returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.GetFirstProperyWithAttributeOfType``1(System.Type)">
            <summary>
            Gets the first PropertyInfo with a custom attribute of the specified generic type T
            </summary>
            <typeparam name="T">The generic type of the attribute to search for</typeparam>
            <param name="typeToAnalyze"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.GetFirstProperyWithAttributeOfType``1(System.Type,``0@)">
            <summary>
            Gets the first PropertyInfo with a custom attribute of the specified generic type T
            </summary>
            <typeparam name="T">The generic type of the attribute to search for</typeparam>
            <param name="typeToAnalyze">The type to analyze</param>
            <param name="attribute">The first attribute found of the specified generic type.</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.GetPropertiesWithAttributeOfType``1(System.Type)">
            <summary>
            Get all the PropertyInfos that have the specified Attribute T addorning them.
            </summary>
            <typeparam name="T">The type of the attribute to that must be addorning the property</typeparam>
            <param name="typeToAnalyze">The type to search for properties on</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.GetPropertiesWithAttributeOfType``1(System.Type,System.Type)">
            <summary>
            Get all the PropertyInfos that have the specified Attribute T addorning them.
            </summary>
            <typeparam name="T">The type of the attribute to that must be addorning the property</typeparam>
            <param name="typeToAnalyze">The type to search for properties on</param>
            <param name="limitToType">The type that the property must be of for it to be returned</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.GetPropertiesWithAttributeOfType``1(System.Type,System.Boolean)">
            <summary>
            Get all the PropertyInfos that have the specified Attribute T addorning them.
            </summary>
            <typeparam name="T">The type of the attribute to that must be addorning the property</typeparam>
            <param name="typeToAnalyze">The type to search for properties on</param>
            <param name="limitToType">The of that the property must be of for it to be returned</param>
            <param name="inherit">Specifies whether to search the inheritance chain.</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.GetPropertiesWithAttributeOfType``1(System.Type,System.Type,System.Boolean)">
            <summary>
            Get all the PropertyInfos that have the specified Attribute T addorning them.
            </summary>
            <typeparam name="T">The type of the attribute to that must be addorning the property</typeparam>
            <param name="typeToAnalyze">The type to search for properties on</param>
            <param name="limitToType">The of that the property must be of for it to be returned</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.CustomAttributeExtension.HasCustomAttributeOfType``1(System.Reflection.MemberInfo,System.Boolean,``0@,System.Boolean)">
            <summary>
            Determine if the MemberInfo is addorned with the specified generic attribute type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <param name="attribute"></param>
            <param name="concreteAttribute">If true, must be the attribute specified and not an attribute that extends the specified attribute</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Email.Server(System.String)">
            <summary>
            The same as SmtpHost
            </summary>
            <param name="serverHostName"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Expect">
            <summary>
            A utility for making assertions
            </summary>
        </member>
        <member name="M:Bam.Net.Expect.IsTrue(System.Boolean)">
            <summary>
            Asserts that the current boolean is true
            </summary>
            <param name="boolToCheck"></param>
        </member>
        <member name="M:Bam.Net.Expect.Throws(System.Action,System.String)">
            <summary>
            Executes the specified actionThatThrowsException action passing the exception to the specified 
            catchDelegate and throws an ExpectFailedException if the actionThatThrowsException doesn't
            throw an Exception
            </summary>
            <param name="actionThatThrowsException"></param>
            <param name="catchDelegate"></param>
            <param name="message"></param>
        </member>
        <member name="M:Bam.Net.Expect.Throws(System.Action,System.Action{System.Exception},System.String)">
            <summary>
            Executes the specified actionThatThrowsException action passing the exception to the specified 
            catchDelegate and throws an ExpectFailedException if the actionThatThrowsException doesn't
            throw an Exception
            </summary>
            <param name="actionThatThrowsException"></param>
            <param name="catchDelegate"></param>
            <param name="message"></param>
        </member>
        <member name="M:Bam.Net.Expect.IsGreaterThan(System.Int32,System.Int32)">
            <summary>
            Checks if the specified "left" value is greater than the specified "right" value.
            </summary>
            <param name="left">int on the left of &gt;</param>
            <param name="right">int on the right of &gt;</param>
        </member>
        <member name="M:Bam.Net.Expect.IsGreaterThan(System.Int64,System.Int64)">
            <summary>
            Checks if the specified "left" value is greater than the specified "right" value.
            </summary>
            <param name="left">int on the left of &gt;</param>
            <param name="right">int on the right of &gt;</param>
        </member>
        <member name="M:Bam.Net.Expect.IsGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Checks if the specified "left" value is greater than the specified "right" value.
            </summary>
            <param name="left">int on the left of &gt;</param>
            <param name="right">int on the right of &gt;</param>
        </member>
        <member name="M:Bam.Net.Expect.IsGreaterThanOrEqualTo(System.Int32,System.Int32,System.String)">
            <summary>
            Checks if the specified "left" value is greater than or equal to the specified "right" value. 
            </summary>
            <param name="left">int on the left of &gt;=</param>
            <param name="right">int on the right of &gt;=</param>
        </member>
        <member name="M:Bam.Net.Expect.AreSame(System.Object,System.Object)">
            <summary>
            Checks if the specified objects are the same using == (!=).
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:Bam.Net.Expect.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Checks if the specified objects are the same using == (!=).
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:Bam.Net.Expect.AreEqual(System.Object,System.Object)">
            <summary>
            Does an equality comparison using expected.Equals()
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:Bam.Net.Expect.AreEqual(System.String,System.String)">
            <summary>
            Does an equality comparison using expected.Equals()
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:Bam.Net.Expect.AreEqual(System.String,System.String,System.String)">
            <summary>
            Does an equality comparison using expected.Equals()
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="failureMessage">The message to display if the comparison fails</param>
        </member>
        <member name="M:Bam.Net.Expect.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Checks if the specified objects are equal using the Equals() method.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:Bam.Net.Expect.DerivesFromType``1(System.Object)">
            <summary>
            Throws an ExpectFailedException if the type doesn't 
            derive from the specified generic type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToCheck"></param>
        </member>
        <member name="M:Bam.Net.Expect.IsObjectOfType``1(System.Object)">
            <summary>
            Asserts that the current instance is of the specified generic type.
            Throws an excpetion if the assertion fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToCheck"></param>
        </member>
        <member name="M:Bam.Net.Expect.IsObjectOfType``1(System.Object,System.String)">
            <summary>
            Checks if the specified object is of type T using GetType().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToCheck"></param>
        </member>
        <member name="M:Bam.Net.Expect.IsInstanceOfType``1(System.Object,System.String)">
            <summary>
            Asserts that the object is an instance of the specified generic type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToCheck"></param>
            <param name="failureMessage"></param>
        </member>
        <member name="M:Bam.Net.Expect.IsNullOrEmpty(System.String)">
            <summary>
            Asserts that the specified string is null or empty.  Throws
            an exception if the assertion fails.
            </summary>
            <param name="stringToCheck"></param>
        </member>
        <member name="M:Bam.Net.Expect.IsNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts that the specified string is null or empty.  Throws
            an exception if the assertion fails.
            </summary>
            <param name="stringToCheck"></param>
        </member>
        <member name="M:Bam.Net.Expect.IsExtenderOfType``1(System.Object)">
            <summary>
            Checks if the specified object extends type T using the "is" operator.  The same as Extends&lt;T&gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToCheck"></param>
        </member>
        <member name="M:Bam.Net.Expect.Extends``1(System.Object)">
            <summary>
            Checks if the specified object extends type T using the "is" operator.
            </summary>
            <typeparam name="T">The type to be extended.</typeparam>
            <param name="objectToCheck">The object to check if it extends the specified type T.</param>
        </member>
        <member name="M:Bam.Net.Expect.IsNull(System.Object,System.String)">
            <summary>
            Throws an exception if the specified objectToCheck is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToCheck"></param>
            <param name="failureMessage"></param>
        </member>
        <member name="M:Bam.Net.Expect.Fail">
            <summary>
            Throw an ExpectFailedException
            </summary>
        </member>
        <member name="M:Bam.Net.Expect.Fail(System.String)">
            <summary>
            Throw an ExpectFailedException with the specified message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Bam.Net.Extensions.IsAffirmative(System.String)">
            <summary>
            Returns true if the string equals "true", "t", "yes", "y" or "1" using a case
            insensitive comparison
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.IsNegative(System.String)">
            <summary>
            Returns true if the string equals "false", "f", "no", "n" or 0 using a case
            insensitive comparison
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.IsExitRequest(System.String)">
            <summary>
            Returns true if the string equals "q", "quit", "exit" or "bye" using a 
            case insensitvie comparison
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.GetNextFileName(System.String)">
            <summary>
            If the specified file exists, a new path with 
            an underscore and a number appended will be 
            returned where the new path does not exist
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.GetNextFileName(System.String,System.Int32@)">
            <summary>
            If the specified file exists, a new path with 
            an underscore and a number appended will be 
            returned where the new path does not exist
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.GetNextDirectoryName(System.String)">
            <summary>
            If the specified directory exists a new path with 
            a number appended will be returned where the 
            new path does not exist
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.GetNextDirectoryName(System.String,System.Int32@)">
            <summary>
            If the specified directory exists a new path with 
            a number appended will be returned where the 
            new path does not exist
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ReadUntil(System.String,System.Char,System.String@)">
            <summary>
            Read the specified string up to the first instance of the specified charToFind
            returning the characters read and producing remainder as an out parameter.  Discards
            the specified charToFind returning only values on either side
            </summary>
            <param name="toRead"></param>
            <param name="charToFind"></param>
            <param name="remainder"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Trim(System.DateTime)">
            <summary>
            Return a copy of the specified DateTime with milliseconds
            set to 0
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyAs``1(System.Object)">
            <summary>
            Copy the current source instance as the specified generic
            type T copying all properties that match in name and type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyAs(System.Object,System.Type,System.Object[])">
            <summary>
            Copy the current sourcce instance as the spcified type
            copying all properties that match in name and type
            </summary>
            <param name="source"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyAsDynamic``1(System.Object)">
            <summary>
            Copy the specified instance to a dynamic instance where the new
            instance only has the properties addorned with the specified 
            custom attribute T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyFile(System.IO.FileInfo,System.String)">
            <summary>
            Similar to File.CopyTo but keeps the file extension.
            Example, "this.txt".CopyFile("that"); will return
            a FileInfo representing "that.txt".
            </summary>
            <param name="file"></param>
            <param name="newFileNameWithoutExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyFile(System.IO.FileInfo,System.String,System.String)">
            <summary>
            Similar to File.CopyTo but keeps the file extension.
            Example, "this.txt".CopyFile("that"); will return
            a FileInfo representing "that.txt".
            </summary>
            <param name="file"></param>
            <param name="newFileNameWithoutExtension"></param>
            <param name="directoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Execute the specified Func this 
            many times
            </summary>
            <typeparam name="T"></typeparam>
            <param name="count"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate over the current IEnumerable passing
            each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(``0[],System.Action{``0})">
            <summary>
            Iterate over the current array passing
            each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterate over the current IEnumerable passing
            each element to the specified function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="function"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Iterate over the current array passing
            each element to the specified function.  
            Return true to continue the loop return 
            false to stop
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="function"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Iterate over the current IEnumerable passing
            each element to the specified function.  
            Return true to continue the loop return 
            false to stop
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="function"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(``0[],System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Iterate over the current array passing
            each element to the specified function.  
            Return true to continue the loop return 
            false to stop
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="function"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Iterate over the current IEnumerable passing
            each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(``0[],System.Action{``0,System.Int32})">
            <summary>
            Iterate over the current array passing
            each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Rest``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0,System.Int32})">
            <summary>
            Iterate over the current IEnumerable 
            from the specified index passing
            each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Rest``1(``0[],System.Int32,System.Action{``0,System.Int32})">
            <summary>
            Iterate over the current array from the 
            specified index passing
            each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Rest``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0})">
            <summary>
            Iterate over the current IEnumerable starting from the specified index
            passing each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Rest``1(``0[],System.Int32,System.Action{``0})">
            <summary>
            Iterate over the current array from the specified
            startIndex passing
            each element to the specified action
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(``0[],System.Action{``0})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(``0[],System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.BackwardsEach``1(``0[],System.Action{``0,System.Int32})">
            <summary>
            Iterate backwards over the specified array (IEnumerable).
            This will allow one to remove the current element without
            causing an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="action"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Each``1(System.Object[],System.Func{System.Object,``0})">
            <summary>
            Iterate over the current array passing 
            each element to the specified function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="func"></param>
            <returns>The result of each call to the specified function</returns>
        </member>
        <member name="M:Bam.Net.Extensions.DynamicConstruct``1(System.Type,System.Object[])">
            <summary>
            Construct an instance of the type using a dynamically defined and
            compiled lambda.  This "should" replace existing Construct&lt;T&gt;
            implementation after benchmarks prove this one is faster
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="ctorParams"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.DynamicConstruct(System.Type,System.Object[])">
            <summary>
            Construct an instance of the type using a dynamically defined and
            compiled lambda.  This "should" replace existing Construct&lt;T&gt;
            implementation after benchmarks prove this one is faster.
            Testing shows this is actually roughly 2x slower than the existing 
            Construct methods.  Keeping here for novelty reference
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="ctorParams"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Construct``1(System.Type,System.Object[])">
            <summary>
            Construct an instance of the type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="ctorParams"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Construct(System.Type,System.Object[])">
            <summary>
            Construct an instance of the specified type passing in the
            specified parameters to the constructor.
            </summary>
            <param name="type"></param>
            <param name="ctorParams"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Or(System.String,System.String)">
            <summary>
            If the current string is null or empty returns
            the specified "instead" string otherwise returns
            the current string.
            </summary>
            <param name="valueOrNull"></param>
            <param name="instead"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions._Format(System.String,System.Object[])">
            <summary>
            An extension method to enable functional programming access
            to string.Format.
            </summary>
            <param name="format"></param>
            <param name="formatArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.DoubleCheckLock``1(System.Object,``0@,System.Func{``0})">
            <summary>
            Double null check the specified toInit locking on the current
            object using the specified ifNull function to instantiate if 
            toInit is null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sync"></param>
            <param name="toInit"></param>
            <param name="ifNull"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToJsonFile(System.Object,System.String)">
            <summary>
            Serialize the current object to json in the specified path
            </summary>
            <param name="value"></param>
            <param name="path"></param>
        </member>
        <member name="M:Bam.Net.Extensions.ToJsonFile(System.Object,System.IO.FileInfo)">
            <summary>
            Serialize the current object to json to the specified file
            </summary>
            <param name="value"></param>
            <param name="file"></param>
        </member>
        <member name="M:Bam.Net.Extensions.ToJsonStream(System.Object)">
            <summary>
            Return a Stream containing the current
            object as json
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.FromJsonFile``1(System.IO.FileInfo)">
            <summary>
            Reads the file and deserializes the contents as the specified
            generic type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.FromJson``1(System.String)">
            <summary>
            Deserialize the current string as the specified
            generic type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.FromJson(System.String,System.Type)">
            <summary>
            Deserialize the current json string as the specified
            type
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.FromJsonFile``1(System.String)">
            <summary>
            Deserialize the contents of the file path specified
            in the current string to the type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Sha1(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Calculate the SHA1 for the contents of the specified file
            </summary>
            <param name="file"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Sha256(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Calculate the SHA256 for the contents of the specified file
            </summary>
            <param name="file"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.IsText(System.IO.FileInfo)">
            <summary>
            Attempts to determine if the file is a text file
            by reading the first 5000 bytes and testing 
            each byte to see if it is a valid Unicode 
            character.  If a byte is found that doesn't have
            a Unicode representation the return value will
            be false
            </summary>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ReadLine(System.String)">
            <summary>
            Read the first line of the string and return the 
            result.  A line is defined as a sequence of characters 
            followed by a line feed ("\n"), a carriage return ("\r"), 
            or a carriage return immediately followed by a line feed ("\r\n").
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ReadLine(System.String,System.String@)">
            <summary>
            Read the first line of the string returning
            the remainder and outing the line.
            A line is defined as a sequence of characters 
            followed by a line feed ("\n"), a carriage return 
            ("\r"), or a carriage return immediately followed 
            by a line feed ("\r\n").
            </summary>
            <param name="value"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Head(System.String,System.Int32)">
            <summary>
            Return the specified number of characters
            from the beginning of the string
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Head(System.String,System.Int32,System.String@)">
            <summary>
            Return the specified count of characters from the
            begginning of the string returning the remaining
            value and outing the head
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Tail(System.String,System.Int32)">
            <summary>
            Return the specified number of characters
            from the end of the string
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Tail(System.String,System.Int32,System.String@)">
            <summary>
            Return the specified count of characters from the 
            end of the string returning the remaining value
            and outing the tail
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomString(System.Int32)">
            <summary>
            Return a random string of the specified
            length
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomString(System.String,System.Int32)">
            <summary>
            Add the specified length of random characters
            to the current string.  Only  lowercase
            letters.
            </summary>
            <param name="result"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Plus(System.String,System.String)">
            <summary>
            Append the specified toAppend string to the current
            string
            </summary>
            <param name="current"></param>
            <param name="toAppend"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomChar">
            <summary>
            Returns a random lower-case character a-z or 0-9
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomBool">
            <summary>
            Get a random boolean
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomLetters(System.Int32)">
            <summary>
            Return the specified number of random letters
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomLetters(System.String,System.Int32)">
            <summary>
            Append the specified number of characters
            to the end of the string
            </summary>
            <param name="val"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomLetter">
            <summary>
            Returns a random lowercase letter from a-z."
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:Bam.Net.Extensions.RandomNumber">
            <summary>
            Returns a pseudo-random number from 0 to 9.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Pluralize(System.String)">
            <summary>
            Attempts to return the plural version of the supplied word (assumed to be a noun)
            using basic rules.
            </summary>
            <param name="stringToPluralize"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Truncate(System.String,System.Int32)">
            <summary>
            Drops the specified number of characters from the end of the 
            string toTruncate and returns the result
            </summary>
            <param name="toTruncate"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.TruncateFront(System.String,System.Int32)">
            <summary>
            Drop the specified number of characters from the beginning of the
            string toTruncate and returns the result
            </summary>
            <param name="toTruncate"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.First(System.String,System.Int32)">
            <summary>
            Return the first specified number of characters
            </summary>
            <param name="stringToTrim"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.PropertiesToLine(System.Object)">
            <summary>
            Read the properties of the specified object and return the 
            values as a string on a single line
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.SafeReadFile(System.String)">
            <summary>
            Returns the content of the file refferred to by the current
            string instance.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.SafeWriteFile(System.String,System.String,System.Action{System.Object})">
            <summary>
            Write the specified textToWrite to the current filePath
            </summary>
            <param name="filePath"></param>
            <param name="textToWrite"></param>
            <param name="postWriteAction"></param>
        </member>
        <member name="M:Bam.Net.Extensions.SafeWriteToFile(System.String,System.String,System.Action{System.Object})">
            <summary>
            Write the current textToWrite to the specified filePath
            </summary>
            <param name="textToWrite"></param>
            <param name="filePath"></param>
            <param name="postWriteAction"></param>
        </member>
        <member name="M:Bam.Net.Extensions.SafeWriteFile(System.String,System.String,System.Boolean,System.Action{System.Object})">
            <summary>
            Write the specified text to the specified file in a thread safe way.
            </summary>
            <param name="filePath">The path to the file to write.</param>
            <param name="textToWrite">The text to write.</param>
            <param name="overwrite">True to overwrite.  If false and the file exists an InvalidOperationException will be thrown.</param>
        </member>
        <member name="M:Bam.Net.Extensions.SafeAppendToFile(System.String,System.String)">
            <summary>
            Appends the specified text to the specified file in a thread safe way.
            If the file doesn't exist it will be created.
            </summary>
            <param name="filePath"></param>
            <param name="textToAppend"></param>
        </member>
        <member name="M:Bam.Net.Extensions.ClearFileAccessLocks(System.Object)">
            <summary>
            Clears the locks createed for writing and appending
            to files
            </summary>
        </member>
        <member name="M:Bam.Net.Extensions.AddMissing``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Adds the specified value if the specified key has not been added
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Bam.Net.Extensions.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Set the value for the specified key in the dictionary in a way that won't 
            throw an exception if the key isn't already there
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Bam.Net.Extensions.PascalSplit(System.String,System.String)">
            <summary>
            Splits the specified text at capital letters inserting the specified separator.
            </summary>
            <param name="stringToPascalSplit"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CaseAcronym(System.String,System.Boolean)">
            <summary>
            Return an acronym for the specified string using the 
            captial letters in the string
            </summary>
            <param name="stringToAcronymize"></param>
            <param name="alwaysUseFirst"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.PascalCase(System.String,System.Boolean,System.String[])">
            <summary>
            Returns a pascal cased string from the specified string using the specified 
            separators.  For example, the input "The quick brown fox jumps over the lazy
            dog" with the separators of "new string[]{" "}" should return the string 
            "TheQuickBrownFoxJumpsOverTheLazyDog".
            </summary>
            <param name="stringToPascalize"></param>
            <param name="preserveInnerUppers">If true uppercase letters that appear in 
            the middle of a word remain uppercase if false they are converted to lowercase.</param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDelimited``1(``0[],Bam.Net.ToDelimitedDelegate{``0})">
            <summary>
            Intended to delimit the specified array of T using the
            specified ToDelimitedDelegate.  Each item will be represented
            by the return value of the specified ToDelimitedDelegate.
            </summary>
            <typeparam name="T">The type of objects in the specified array</typeparam>
            <param name="objectsToStringify">The objects</param>
            <param name="toDelimiteder">The ToDelimitedDelegate used to represent each object</param>
            <returns>string</returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDelimited``1(``0[],Bam.Net.ToDelimitedDelegate{``0},System.String)">
            <summary>
            Intended to delimit the specified array of T using the
            specified ToDelimitedDelegate.  Each item will be represented
            by the return value of the specified ToDelimitedDelegate.
            </summary>
            <typeparam name="T">The type of objects in the specified array</typeparam>
            <param name="objectsToStringify">The objects</param>
            <param name="toDelimiteder">The ToDelimitedDelegate used to represent each object</param>
            <returns>string</returns>
        </member>
        <member name="M:Bam.Net.Extensions.DelimitSplit(System.String,System.String[],System.Boolean)">
            <summary>
            Split the string on the specified delimiters removing empty entries
            and optionally trimming each value
            </summary>
            <param name="valueToSplit"></param>
            <param name="delimiters"></param>
            <param name="trimValues"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.GetEnumerableType(System.Reflection.PropertyInfo)">
            <summary>
            Get the type of the array or enumerable of the specified 
            property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.HasEnumerableOfMe(System.Type,System.Type)">
            <summary>
            Returns true if the specified toCheck type has 
            an enumerable property that is of the current type
            </summary>
            <param name="self"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.HasEnumerableOfMe(System.Type,System.Type,System.Reflection.PropertyInfo@)">
            <summary>
            Returns true if the specified toCheck type has 
            an enumerable property that is of the current type
            </summary>
            <param name="self"></param>
            <param name="toCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.IsProperty(System.Reflection.MethodInfo)">
            <summary>
            Determines if the method is a special property method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.BuildDynamicType``1(System.Object)">
            <summary>
            Creates an in memory clone of the specified objectToClone.  The 
            clone will only have the properties of objectToClone that are
            addorned with the specified PropertyAttributeFilter generic type.
            </summary>
            <typeparam name="PropertyAttributeFilter">The attribute to look for when copying properties</typeparam>
            <param name="objectToClone">The object to clone</param>
            <returns>An in memory type that is not persisted to disk.</returns>
        </member>
        <member name="M:Bam.Net.Extensions.BuildDynamicType``1(System.Type)">
            <summary>
            Creates an in memory clone of the specified objectToClone.  The 
            clone will only have the properties of objectToClone that are
            addorned with the specified PropertyAttributeFilter generic type.
            </summary>
            <typeparam name="PropertyAttributeFilter">The attribute to look for when copying properties</typeparam>
            <param name="typeToClone"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.BuildDynamicType``1(System.Object,System.Boolean)">
            <summary>
            Creates an in memory clone of the specified objectToClone.  The 
            clone will only have the properties of objectToClone that are
            addorned with the specified PropertyAttributeFilter generic type.
            </summary>
            <typeparam name="PropertyAttributeFilter">The attribute to look for when copying properties</typeparam>
            <param name="objectToClone">The object to clone</param>
            <param name="concreteAttribute">If true the attributes must be of the specified type and not extenders of the type.</param>
            <returns>An in memory type that is not persisted to disk.</returns>
        </member>
        <member name="M:Bam.Net.Extensions.BuildDynamicType``1(System.Object,System.Reflection.Emit.AssemblyBuilder@)">
            <summary>
            Creates an in memory clone of the specified objectToClone.  The 
            clone will only have the properties of objectToClone that are
            addorned with the specified PropertyAttributeFilter generic type.
            </summary>
            <typeparam name="PropertyAttributeFilter">The attribute to look for when copying properties</typeparam>
            <param name="objectToClone">The object to clone</param>
            <returns>An in memory type that is not persisted to disk.</returns>
        </member>
        <member name="M:Bam.Net.Extensions.BuildDynamicType``1(System.Object,System.Reflection.Emit.AssemblyBuilder@,System.Boolean)">
            <summary>
            Creates an in memory clone of the specified objectToClone.  The 
            clone will only have the properties of objectToClone that are
            addorned with the specified PropertyAttributeFilter generic type.
            </summary>
            <typeparam name="PropertyAttributeFilter">The attribute to look for when copying properties</typeparam>
            <param name="objectToClone">The object to clone</param>
            <param name="concreteAttribute">If true the attributes must be of the specified type and not extenders of the type.</param>
            <returns>An in memory type that is not persisted to disk.</returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDynamic(System.Data.DataRow)">
            <summary>
            Converts a DataRow to a dynamic instance where the proeprty names
            are the names of the columns in the row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDynamic(System.Data.DataRow,System.String)">
            <summary>
            Converts a DataRow to a dynamic object instance.  
            </summary>
            <param name="row">The row to convert</param>
            <param name="typeName">The name of the type to use in reflection operations</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ValuePropertiesToDynamic(System.Object)">
            <summary>
            Creates a dynamic object from the specified instance populating only
            the properties that are of value types
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ValuePropertiesToDynamic(System.Object,System.Type@)">
            <summary>
            Creates a dynamic object from the specified instance populating only
            the properties that are of value types
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyEventHandlers(System.Object,System.Object)">
            <summary>
            Copies all the subscribed event handlers from source to
            the destination
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.GetEventSubscriptions(System.Object,System.String)">
            <summary>
            Gets all the subscribed event subscriptions for the specified event name
            </summary>
            <param name="instance"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.GetEventSubscriptions(System.Object)">
            <summary>
            Gets All the subscribed event subscriptions
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyProperties(System.Object,System.Object)">
            <summary>
            Copies all properties from source to destination where the name and
            type match.  Accounts for nullability and treats non nullable and
            nullable primitives as compatible
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CloneProperties(System.Object,System.Object)">
            <summary>
            Same as CopyProperties but will clone properties
            whos type implements ICloneable
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.CopyProperty(System.Object,System.Object,System.String)">
            <summary>
            Copy the value of the specified property from the source
            to the destination
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Bam.Net.Extensions.ToDynamicData(System.Object)">
            <summary>
            Clone the specified instance to a dynamic object instance
            copying only properties
            that are represented in the Bam.Net.Data.Schema.DataTypes enum
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.DataClone``1(``0)">
            <summary>
            Clone the specified instance copying only properties
            that are represented in the Bam.Net.Data.Schema.DataTypes enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.Combine(System.Object,System.Object[])">
            <summary>
            Combines the current instance with the specified toMerge values
            creating a new type with all the properties of each and value 
            set to the last one in
            </summary>
            <param name="instance"></param>
            <param name="toMerge"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDynamicType(System.Object,System.String,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Create a dynamic type for the object with the specified typeName
            using the specified propertyPredicate to determine what properties
            of the original type to include
            </summary>
            <param name="instance"></param>
            <param name="typeName"></param>
            <param name="propertyPredicate"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDynamicType(System.Object,System.String,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Reflection.Emit.AssemblyBuilder@,System.Boolean)">
            <summary>
            Create a dynamic type for the object with the specified typeName
            using the specified propertyPredicate to determine what properties
            of the original type to include
            </summary>
            <param name="instance"></param>
            <param name="typeName"></param>
            <param name="propertyPredicate"></param>
            <param name="assemblyBuilder"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.FromDictionary``1(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Object[])">
            <summary>
            Convert the specified dicationary to an instance
            of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="ctorParams"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDynamicList(System.Data.DataTable)">
            <summary>
            Convert the table into a list of dynamic objects
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Extensions.ToDynamicList(System.Data.DataTable,System.String)">
            <summary>
            Conver the table into a list of dynamic objects with the specified typeName
            used for reflection
            </summary>
            <param name="table"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.MethodCase">
            <summary>
            Determines whether generated JavaScript methods 
            will be camel case (camel has his head down; first letter lowercase)
            or pascal case 
            </summary>
        </member>
        <member name="T:Bam.Net.Providers">
            <summary>
            Type safe way of getting session level singletons.  Safer
            than using the Session object because it doesn't use
            magic strings and optionally allows for the object to be 
            set once only without being overwritten.
            </summary>
        </member>
        <member name="M:Bam.Net.Providers.SetSessionProviderIfNull``1(System.Object,System.Boolean)">
            <summary>
            Set the session provider if it has not been set yet.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <param name="allowReset"></param>
        </member>
        <member name="M:Bam.Net.Providers.SetSessionProvider``1(System.Object)">
            <summary>
            Sets the session provider of Type T to the specified concrete instance provider.
            The generic argument T "should" be an interface so different implementations
            can be set and used for testing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
        </member>
        <member name="M:Bam.Net.Providers.SetSessionProvider``1(System.Object,System.Boolean)">
            <summary>
            Sets the session provider of Type T to the specified concrete instance provider.
            The generic argument T "should" be an interface so different implementations
            can be set and used for testing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
        </member>
        <member name="M:Bam.Net.Providers.GetSessionProvider``1">
            <summary>
            Gets a provider of the specified type T for the current session.
            </summary>
            <typeparam name="T">The type implemented by the object to return.  This can be an interface an abstract
            class or any type in the inheritance hierarchy of the stored object.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Providers.GetSessionProvider``1(System.Object)">
            <summary>
            Gets a provider of the specified type T for the current session.  If it hasn't been 
            set yet it will be set to the instance provided.  Once set it cannot be set again.
            </summary>
        </member>
        <member name="M:Bam.Net.Providers.GetSessionProvider``1(System.Object,System.Boolean)">
            <summary>
            Gets a provider of the specified type T for the current session.  If it hasn't been 
            set yet it will be set to the instance provided.  Once set it can only be set again
            if allowOverWrite is true.
            </summary>
            <typeparam name="T">The type implemented by the object to return.  This can be an interface an abstract
            class or any type in the inheritance hierarchy of the stored object.</typeparam>
            <param name="setToIfNotFound">The instance to set the session provider to if it has not already been set.</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Providers.SetApplicationProvider``1(System.Object)">
            <summary>
            Set a singleton instance provider of the generic type T.
            Can only be called once per type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
        </member>
        <member name="M:Bam.Net.Providers.SetApplicationProvider``1(System.Object,System.Boolean)">
            <summary>
            Set a singleton instance provider of the generic type T.
            Can only be called again if allowOverwrite is true.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <param name="allowOverwrite"></param>
        </member>
        <member name="M:Bam.Net.Providers.GetApplicationProvider``1">
            <summary>
            Get a singleton instance provider of the generic type T.  If not 
            currently set it will be set to the object provided.  Once set
            the application provider of the specified type cannot be set to a different
            instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Providers.GetApplicationProvider``1(System.Object)">
            <summary>
            Get a singleton instance provider of the generic type T.  If not 
            currently set it will be set to the object provided.  Once set
            the application provider of the specified type cannot be set to a different
            instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setToIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Providers.GetApplicationSingleton``1">
            <summary>
            Gets a singleton of the specified generic type.  If the singleton
            hasn't been set a new instance will be created using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Providers.GetSessionSingleton``1">
            <summary>
            Gets a session singleton of the specified type T. 
            Will be instantiated as necessary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Providers.GetSessionSingleton``1(System.String@)">
            <summary>
            Gets a session singleton of the specified type T. 
            Will be instantiated as necessary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.ProxyAttribute">
            <summary>
            Used to specify the name of the client proxy instance.
            </summary>
        </member>
        <member name="P:Bam.Net.ProxyAttribute.VarName">
            <summary>
            The name of the client variable
            </summary>
        </member>
        <member name="P:Bam.Net.ProxyAttribute.MethodCase">
            <summary>
            Describes the client side method case
            </summary>
        </member>
        <member name="M:Bam.Net.ResourceTextFiles.AddExtensionToLoad(System.String)">
            <summary>
            Adds an extension to be loaded when resource text 
            files are loaded
            </summary>
            <param name="ext"></param>
        </member>
        <member name="M:Bam.Net.ServiceExe.ProcessCommandLineArgs(System.String[])">
            <summary>
            Returns true if there were recognized command line
            arguments to be processed otherwise false.  Not to be confused
            with the command line arguments intended for CommandLineInterface
            implementations.  This method will process service 
            related comand line arguments.  A call to SetInfo should
            be made prior to this call to ensure all ServiceInfo 
            is already set.
            <br />
            <br />
            Valid values are:<br />
            -i [-ck:{credentialKey}]        Install the current ServiceExe implementation as a service. Using the specified appSettings key to look for credentials in the config file.  Expected keys would be key="{credentialKey}" and key="{credentialKey}Password".  Values will be retrieved using DefaultConfiguration<br />
            -i [true]                       Install the current ServiceExe implementation as a service allowing desktop interaction.  Cannot be combined with -ck option.<br />
            -s                              Start the service<br />
            -k                              Kill (stop) the service<br />
            -r                              Restart the service (stop and start)<br />
            -u                              Uninstall the service<br />
            -dl [-f]                        Delete the log.  Specify -f to force deletion without prompting to confirm<br />
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.ServiceExe.SetInfo(Bam.Net.ServiceInfo)">
            <summary>
            Set the ServiceName, DisplayName and Description for the current 
            service.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Bam.Net.ServiceExe.CreateLog(System.String)">
            <summary>
            Creates a Windows event log for the extender of ServiceExe.
            serviceName must be defined.
            </summary>
        </member>
        <member name="M:Bam.Net.Exec.SetThread(System.String,System.Action)">
            <summary>
            Create a NamedThread with the specified name to run
            the specified action when it is started.
            </summary>
            <param name="name"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Exec.TakesTooLong(System.Action,System.Int32)">
            <summary>
            Returns true if the specified action takes longer than the
            specified number of millisecondsToWait to finish executing
            </summary>
            <param name="action"></param>
            <param name="millisecondsToWait"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Exec.TakesTooLong``1(System.Func{``0},System.Func{``0,``0},System.Int32)">
            <summary>
            Returns true if the specified function takes longer to execute than the specified secondsToWait.
            </summary>
            <typeparam name="TResult">The Type returned by the sepcified function, also the return and parameter type of the
            specified callBack.</typeparam>
            <param name="function">The function to execute and time</param>
            <param name="callBack">The callBack to execute when function completes</param>
            <param name="millisecondsToWait">The number of seconds to allow the function to execute before returning true</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Bam.Net.Exec.TakesTooLong``1(System.Func{System.Object,``0},System.Func{``0,``0},System.TimeSpan,System.Object,System.String)">
            <summary>
            Executes the specified function in a separate thread waiting the specified timeToWait.  If
            the function is not done executing in the specified timeToWait returns true otherwise false.
            Will return true if the function throws an exception with the logic being that the 
            function was not able to complete its work
            </summary>
            <typeparam name="TResult">The Type returned by the sepcified function, also the return and parameter type of the
            specified callBack.</typeparam>
            <param name="function">The function to execute and time</param>
            <param name="callBack">The callBack to execute when function completes</param>
            <param name="timeToWait">The ammount of time to allow the function to execute before returning true</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Bam.Net.Exec.TimeExecution(System.Action)">
            <summary>
            Execute the specified action and return a TimeSpan
            representing how much time it took to execute
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Exec.Time(System.Action)">
            <summary>
            Execute the specified action and return a TimeSpan
            representing how much time it took to execute
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Exec.Time``1(System.Func{``0},``0@)">
            <summary>
            Execute the specified Func and return a TimeSpan
            representing how much time it took to execute
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Exec.TimeExecution``1(System.Func{``0},``0@)">
            <summary>
            Time the execution of the specified function returning a TimeSpan
            instance representing the ammount of time it took for the function
            to run
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Exec.TimeExecution``2(System.Func{``0,``1},``0,``1@)">
            <summary>
            Execute the specified Func and return a TimeSpan
            representing how much time it took to execute
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="input"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserUtil.StripDomain(System.String)">
            <summary>
            Returns the value at index 1 after splitting the specified name
            at the backslash character (\).  If there are no backslash characters the 
            full value is returned.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserUtil.GetCurrentUser">
            <summary>
            Returns the current user of the application.  If this 
            method is called from a web application the current web
            user is returned, otherwise the name of the owner of the
            current process is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserUtil.GetCurrentUser(System.Boolean)">
            <summary>
            Returns the current user of the application.  If this 
            method is called from a web application the current web
            user is returned, otherwise the name of the owner of the
            current process is returned.
            </summary>
            <param name="includeDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserUtil.GetCurrentWindowsUser(System.Boolean)">
            <summary>
            Gets the current Windows user.  This is typically the owner of the currently
            running process.
            </summary>
            <param name="includeDomain">True to return &lt;domain&gt;\&lt;userName&gt;, if false &lt;userName&gt;</param>
            <returns>User as string</returns>
        </member>
        <member name="M:Bam.Net.UserUtil.GetCurrentWindowsUserDomain">
            <summary>
            Gets the domain of the current Windows user.  The current Windows user is 
            typically the owner of the currently running process.
            </summary>
            <returns>The domain of the current Windows user.</returns>
        </member>
        <member name="M:Bam.Net.UserUtil.GetCurrentUserDomain">
            <summary>
            Gets the domain of the current user.  If running in a web app the 
            web user's domain is returned otherwise the domain of the current
            windows user is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bam.Net._">
            <summary>
            Repurposed magic underscore to be a convenience wrapper
            to the Extensions static class.  May consider implementing
            CSharp version of lodash functions or at least some
            subset to start (https://lodash.com/).
            </summary>
        </member>
    </members>
</doc>
