<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Encryption</name>
    </assembly>
    <members>
        <member name="T:Bam.Net.Encryption.Crypto">
            <summary>
            This class was taken verbatim from the highest ranked answer from 
            http://stackoverflow.com/questions/202011/encrypt-and-decrypt-a-string
            although it wasn't marked as the answer it appears to be sufficient
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.Crypto.EncryptStringAES(System.String,System.String)">
            <summary>
            Encrypt the given string using AES.  The string can be decrypted using 
            DecryptStringAES().  The sharedSecret parameters must match.
            </summary>
            <param name="plainText">The text to encrypt.</param>
            <param name="sharedSecret">A password used to generate a key for encryption.</param>
        </member>
        <member name="M:Bam.Net.Encryption.Crypto.DecryptStringAES(System.String,System.String)">
            <summary>
            Decrypt the given string.  Assumes the string was encrypted using 
            EncryptStringAES(), using an identical sharedSecret.
            </summary>
            <param name="cipherText">The text to decrypt.</param>
            <param name="sharedSecret">A password used to generate a key for decryption.</param>
        </member>
        <member name="M:Bam.Net.Encryption.Encrypted.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="data">The plain text data to be encrypted</param>
            <param name="b64Key">A plaintext value to derive a key from</param>
            <param name="b64IV">A plain text vlaue to derive 
            the initialization vector from</param>
        </member>
        <member name="T:Bam.Net.Encryption.Vault">
            <summary>
            An encrypted key value store used to prevent
            casual access to sensitive data like passwords.  Encrypted data is stored
            in a sqlite file by default or a Database you specify
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Vault table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.Vault}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.Vault}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Encryption.Vault.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.Vault}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Where(System.Func{Bam.Net.Encryption.VaultColumns,Bam.Net.Data.QueryFilter{Bam.Net.Encryption.VaultColumns}},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a VaultColumns 
            and returns a QueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;VaultColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Vault instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Encryption.Vault.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Encryption.Vault.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Vaults
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Retrieve(System.String)">
            <summary>
            Get the vault with the specified name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Retrieve(System.String,System.String)">
            <summary>
            Get the Vault with the specified name using the
            specified password to create it if it doesn't exist
            </summary>
            <param name="name"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Retrieve(Bam.Net.Data.Database,System.String,System.String)">
            <summary>
            Get a Vault from the specified database with the
            specified name using the specified password to
            create it if it doesn't exist.  Will return null
            if password is not specified and the vault 
            doesn't exist in the specified database
            </summary>
            <param name="database"></param>
            <param name="vaultName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Create(System.IO.FileInfo,System.String)">
            <summary>
            Create a vault in the specified file by the 
            specified name.  If the vault already exists
            in the specified file the existing vault
            will be returned
            </summary>
            <param name="file"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Create(Bam.Net.Data.Database,System.String,System.String,Bam.Net.Encryption.RsaKeyLength)">
            <summary>
            Create a Vault in the specified database by the specified
            name using the specified password to create it if it
            doesn't exist
            </summary>
            <param name="database"></param>
            <param name="name"></param>
            <param name="password"></param>
            <param name="rsaKeyLength"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Vault.Set(System.String,System.String)">
            <summary>
            Set a key value pair.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the VaultItem table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.VaultItem}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.VaultItem}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.VaultItem}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Where(System.Func{Bam.Net.Encryption.VaultItemColumns,Bam.Net.Data.QueryFilter{Bam.Net.Encryption.VaultItemColumns}},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a VaultItemColumns 
            and returns a QueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;VaultItemColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single VaultItem instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Encryption.VaultItem.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Encryption.VaultItem.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of VaultItems
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultItem.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultItemColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultItemColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultItemColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the VaultKey table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.VaultKey}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.VaultKey}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Encryption.VaultKey}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Where(System.Func{Bam.Net.Encryption.VaultKeyColumns,Bam.Net.Data.QueryFilter{Bam.Net.Encryption.VaultKeyColumns}},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a VaultKeyColumns 
            and returns a QueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;VaultKeyColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single VaultKey instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Encryption.VaultKey.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Encryption.VaultKey.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of VaultKeys
            </summary>
        </member>
        <member name="M:Bam.Net.Encryption.VaultKey.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Encryption.VaultKeyColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a VaultKeyColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between VaultKeyColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Encryption.Extensions.EncryptWithPublicKey(System.String,Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair,System.Text.Encoding)">
            <summary>
            Encrypt with the Public key of the specified keyPair
            </summary>
            <param name="input"></param>
            <param name="keyPair"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Extensions.EncryptWithPrivateKey(System.String,Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair,System.Text.Encoding)">
            <summary>
            Encrypt the specified input and return the encrypted byte[] converted to 
            base 64
            </summary>
            <param name="input"></param>
            <param name="keyPair"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Pem.PublicKeyToPem(Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)">
            <summary>
            Returns the public portion of the specified keyPair in 
            pem format (compatible with openssl)
            </summary>
            <param name="keyPair"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Pem.FromPublicKey(Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)">
            <summary>
            Returns the public portion of the specified keyPair in 
            pem format (compatible with openssl)
            </summary>
            <param name="keyPair"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Pem.ToPem(Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)">
            <summary>
            Returns the specified keyPair in
            pem format (compatible with openssl)
            </summary>
            <param name="keyPair"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Encryption.Pem.FromPrivateKey(Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)">
            <summary>
            Returns the private portion of the specified keyPair in
            pem format (compaitble with openssl)
            </summary>
            <param name="keyPair"></param>
            <returns></returns>
        </member>
    </members>
</doc>
