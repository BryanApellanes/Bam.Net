<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.UserAccounts</name>
    </assembly>
    <members>
        <member name="M:Bam.Net.UserAccounts.Data.Group.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Group table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Where(System.Func{Bam.Net.UserAccounts.Data.GroupColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.GroupColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a GroupColumns 
            and returns a QueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Group.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Group.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Group instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Group.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Group.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Group.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the GroupPermission table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Where(System.Func{Bam.Net.UserAccounts.Data.GroupPermissionColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.GroupPermissionColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a GroupPermissionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.GroupPermission.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single GroupPermission instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.GroupPermission.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.GroupPermission.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.GroupPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a GroupPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between GroupPermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Account table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Where(System.Func{Bam.Net.UserAccounts.Data.AccountColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.AccountColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a AccountColumns 
            and returns a QueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Account.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Account.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Account instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Account.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Account.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.AccountColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a AccountColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between AccountColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Create(Bam.Net.UserAccounts.Data.User,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new Confirmation with the Created and
            Token properties set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Account.Expire">
            <summary>
            Expires the confirmation by setting the Created property to DateTime.MinValue
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the LockOut table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Where(System.Func{Bam.Net.UserAccounts.Data.LockOutColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.LockOutColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LockOutColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.LockOut.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single LockOut instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.LockOut.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.LockOut.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LockOutColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LockOutColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LockOutColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Login table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Where(System.Func{Bam.Net.UserAccounts.Data.LoginColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.LoginColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LoginColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Login.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Login.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Login instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Login.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Login.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Login.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.LoginColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Password table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Where(System.Func{Bam.Net.UserAccounts.Data.PasswordColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.PasswordColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Password.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Password.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Password instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Password.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Password.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Password.Set(Bam.Net.UserAccounts.Data.User,System.String)">
            <summary>
            Saves the hash of the specified password
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the PasswordFailure table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Where(System.Func{Bam.Net.UserAccounts.Data.PasswordFailureColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.PasswordFailureColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordFailureColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.PasswordFailure.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single PasswordFailure instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.PasswordFailure.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordFailure.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordFailureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordFailureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordFailureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the PasswordQuestion table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Where(System.Func{Bam.Net.UserAccounts.Data.PasswordQuestionColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.PasswordQuestionColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordQuestionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.PasswordQuestion.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single PasswordQuestion instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.PasswordQuestion.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordQuestion.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordQuestionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordQuestionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordQuestionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the PasswordReset table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Where(System.Func{Bam.Net.UserAccounts.Data.PasswordResetColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.PasswordResetColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PasswordResetColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.PasswordReset.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single PasswordReset instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.PasswordReset.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PasswordResetColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PasswordResetColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PasswordResetColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.PasswordReset.Create(Bam.Net.UserAccounts.Data.User,System.Int32)">
            <summary>
            Create a PasswordReset window
            </summary>
            <param name="user"></param>
            <param name="expiresInMinutesFromNow"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Permission table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Where(System.Func{Bam.Net.UserAccounts.Data.PermissionColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.PermissionColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PermissionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Permission.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Permission.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Permission instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Permission.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Permission.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Permission.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.PermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Role table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Where(System.Func{Bam.Net.UserAccounts.Data.RoleColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.RoleColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a RoleColumns 
            and returns a QueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Role.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Role.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Role instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Role.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Role.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Role.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.RoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a RoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between RoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Session table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Where(System.Func{Bam.Net.UserAccounts.Data.SessionColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.SessionColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SessionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Session.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Session.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Session instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Session.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Session.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Get(Bam.Net.UserAccounts.Data.User,System.Boolean)">
            <summary>
            Get a Session instance for the specified userName, null will 
            be returned if it doesn't exist
            </summary>
            <param name="userName"></param>
            <param name="isActive"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Session.Touch(System.Boolean)">
            <summary>
            Updates the LastActivity property and sets IsActive to true
            </summary>
            <param name="save"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the SessionState table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Where(System.Func{Bam.Net.UserAccounts.Data.SessionStateColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.SessionStateColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SessionStateColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.SessionState.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single SessionState instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.SessionState.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.SessionState.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SessionStateColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SessionStateColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SessionStateColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Setting table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Where(System.Func{Bam.Net.UserAccounts.Data.SettingColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.SettingColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SettingColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Setting.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Setting.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Setting instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.Setting.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.Setting.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.Setting.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.SettingColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SettingColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SettingColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the TreeNode table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Where(System.Func{Bam.Net.UserAccounts.Data.TreeNodeColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.TreeNodeColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a TreeNodeColumns 
            and returns a QueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.TreeNode.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TreeNode instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.TreeNode.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.TreeNode.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.TreeNodeColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TreeNodeColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TreeNodeColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the User table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Where(System.Func{Bam.Net.UserAccounts.Data.UserColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.UserColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.User.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.User.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single User instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.User.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.User.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.GetByUserNameOrDie(System.String)">
            <summary>
            Get the User object for the specified userName or throw 
            an UserNameNotFoundException if they are not found
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.Ensure(System.String)">
            <summary>
            Ensures that the User with the specified userName 
            exists in the database
            </summary>
            <param name="userName"></param>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.GetByUserName(System.String)">
            <summary>
            Get the user with the specified userName or null if the user is not found
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.User.GetByEmail(System.String)">
            <summary>
            Get the user with the specified email address
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the UserBehavior table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Where(System.Func{Bam.Net.UserAccounts.Data.UserBehaviorColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.UserBehaviorColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserBehaviorColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserBehavior.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserBehavior instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserBehavior.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserBehavior.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserBehaviorColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserBehaviorColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserBehaviorColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the UserGroup table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Where(System.Func{Bam.Net.UserAccounts.Data.UserGroupColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.UserGroupColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserGroupColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserGroup.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserGroup instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserGroup.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserGroup.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserGroupColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserGroupColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserGroupColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the UserPermission table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Where(System.Func{Bam.Net.UserAccounts.Data.UserPermissionColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.UserPermissionColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserPermissionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserPermission.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserPermission instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserPermission.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserPermission.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserPermissionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserPermissionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserPermissionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary> 
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the UserRole table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Where(System.Func{Bam.Net.UserAccounts.Data.UserRoleColumns,Bam.Net.Data.QueryFilter{Bam.Net.UserAccounts.Data.UserRoleColumns}},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserRoleColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Where(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserRole.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserRole instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.UserAccounts.Data.UserRole.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.UserAccounts.Data.UserRole.Count(Bam.Net.Data.WhereDelegate{Bam.Net.UserAccounts.Data.UserRoleColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserRoleColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserRoleColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="T:Bam.Net.UserAccounts.PageResult">
            <summary>
            The single page application equivalent of
            RedirectAction
            </summary>
        </member>
        <member name="T:Bam.Net.UserAccounts.UserManager">
            <summary>
            Class used to manage users of an application
            </summary>
        </member>
        <member name="F:Bam.Net.UserAccounts.UserManager.AccountConfirmationEmailName">
            <summary>
            The name of the account confirmation email template
            </summary>
        </member>
        <member name="F:Bam.Net.UserAccounts.UserManager.PasswordResetEmailName">
            <summary>
            The name of the password reset email template
            </summary>
        </member>
        <member name="T:Bam.Net.UserAccounts.DaoMembershipProvider">
            <summary>
            This class should be moved to a different assembly for custom "Membership" providers
            </summary>
        </member>
        <member name="M:Bam.Net.UserAccounts.DaoRoleProvider.InitializeFromConfig">
            <summary>
            Initialize roles from the config file.  This will look for the 
            appSetting with the key "Roles" and assume that it is a
            semi-colon (;) separated list of key value pairs delimited by colons (:)
            where the key is the name of a role to initialize and the 
            value is a comma separated list of users to create and add to 
            the role.
            </summary>
        </member>
    </members>
</doc>
