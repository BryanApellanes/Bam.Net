<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Testing</name>
    </assembly>
    <members>
        <member name="T:Bam.Net.Testing.After">
            <summary>
            Convenience entry point into creating and initializing the 
            SetupContext for a test.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.After.Setup(System.Action{Bam.Net.Testing.SetupContext})">
            <summary>
            Instantiates the SetupContext for a test and passes that
            instance to the specified setup Action delegate.
            </summary>
            <param name="setup"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Testing.Assertion">
            <summary>
            Represents an assertion made during a test.
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.Assertion.SuccessMessage">
            <summary>
            Gets or sets the partial message to display if the assertion passes.
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.Assertion.Passed">
            <summary>
            Gets or sets a boolean value indicating whether the assertion
            passed.
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.Assertion.FailureMessage">
            <summary>
            Gets or sets the partial failure message to display if the assertion fails.
            </summary>
        </member>
        <member name="T:Bam.Net.Testing.Because">
            <summary>
            Provides a mechanism by which assertions are tracked for a test.
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.Because.TestDescription">
            <summary>
            Gets the desciption of the current test being run
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.Because.SetupContext">
            <summary>
            Gets the SetupContext instance for the current test.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.Because.ObjectUnderTest``1">
            <summary>
            Gets the object under test from the underlying SetupContext.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Testing.Because.Passed">
            <summary>
            Gets a value indicating whether the current test has passed.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.Because.ItsTrue(System.String,System.Boolean,System.String)">
            <summary>
            Asserts that the specified value is true
            </summary>
            <param name="descriptionOfTrueAssertion">A description of the true value.  Read as:  ItsTrue "Michael Jordan is the best of all time"</param>
            <param name="shouldBeTrue"></param>
            <param name="failureMessage"></param>
        </member>
        <member name="M:Bam.Net.Testing.Because.ItsFalse(System.String,System.Boolean,System.String)">
            <summary>
            Asserts that the specified value is false
            </summary>
            <param name="descriptionOfFalseAssertion">A descriptioni of the false value.  Read as: ItsFalse "John Stockton was the " </param>
            <param name="shouldBeFalse"></param>
            <param name="failureMessage"></param>
        </member>
        <member name="M:Bam.Net.Testing.Because.ResultIs``1">
            <summary>
            Asserts that the type of the result of the test Function 
            is the same as the type specified by generic type T.  Only valid
            if the test method returned a value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bam.Net.Testing.Because.ResultEquals(System.Object)">
            <summary>
            Asserts that the result of the test function
            is equal to the specified object using the .Equals 
            method.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Bam.Net.Testing.Because.ResultIsSameAs(System.Object)">
            <summary>
            Asserts that the result of the test function
            is the same as the specified object using
            the equality comparison operator ==
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Bam.Net.Testing.Because.IllLookAtIt(System.Object)">
            <summary>
            Does not perform an assertion, rather outputs the string representation of the specified obj
            using ToString().
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Bam.Net.Testing.Because.IllLookAtTheResultsProperties``1">
            <summary>
            Does not perform an assertion, rather outputs the properties of the
            result of the test function
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bam.Net.Testing.Because.IllLookAtItsProperties``1(``0)">
            <summary>
            Does not perform an assertion, rather outputs the properties of the specified obj.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Bam.Net.Testing.Because.ResultDerivesFrom``1">
            <summary>
            Asserts that the result inherits from (derives from/is a subclass of) the specified
            generic type T.  Only valid if the test method returned a value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bam.Net.Testing.Because.Result">
            <summary>
            The return value of the test method execution
            </summary>        
        </member>
        <member name="M:Bam.Net.Testing.Because.ThrowExceptionIfTheTestFailed(System.String)">
            <summary>
            Throws an exception if the test failed.  Same as OrNot.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Bam.Net.Testing.Because.UnlessItFailed(System.String)">
            <summary>
            Throws an exception if the test failed.  Same as ThrowExceptionIfTheTestFailed.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.CommandLineTestInterface.AttachBeforeAndAfterHandlers">
            <summary>
            Attach the before and after handling methods by subscribing the 
            methods addorned with BeforeUnitTests, BeforeEachUnitTest, AfterUnitTests
            and AfterEachUnitTest attributes to appropriate test events
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.CommandLineTestInterface.NullifyBeforeAndAfterHandlers">
            <summary>
            Set TestsStarting, TestsFinished, TestStarting and TestFinished
            to null effectively detaching any handlers that may have
            been attached
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.CommandLineTestInterface.AttachBeforeAndAfterHandlers(System.Reflection.Assembly)">
            <summary>
            Attach the before and after handling methods by subscribing the 
            methods addorned with BeforeUnitTests, BeforeEachUnitTest, AfterUnitTests
            and AfterEachUnitTest attributes to appropriate test events
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="E:Bam.Net.Testing.CommandLineTestInterface.TestFailed">
            <summary>
            Event that fires when a test fails.
            </summary>
        </member>
        <member name="E:Bam.Net.Testing.CommandLineTestInterface.TestPassed">
            <summary>
            Event that fires when a test passes.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.CommandLineTestInterface.Info(System.String,System.Object[])">
            <summary>
            Outputs an information message to the console.
            </summary>
            <param name="message">The message text to output.</param>
        </member>
        <member name="M:Bam.Net.Testing.CommandLineTestInterface.Warn(System.String,System.Object[])">
            <summary>
            Outputs a warning to the console.
            </summary>
            <param name="message">The message text to output</param>
        </member>
        <member name="M:Bam.Net.Testing.CommandLineTestInterface.Error(System.String,System.Exception,System.Object[])">
            <summary>
            Outputs an error to the console.
            </summary>
            <param name="message">The message text to output</param>
            <param name="ex">The Exception that occurred.</param>
        </member>
        <member name="M:Bam.Net.Testing.CommandLineTestInterface.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            Outputs an error to the console and exits.
            </summary>
            <param name="message">The message to output.</param>
            <param name="ex">The Exception that occurred.</param>
        </member>
        <member name="E:Bam.Net.Testing.Integration.IntegrationTestRunner.IntegrationTestFailed">
            <summary>
            Event that fires when a test fails.
            </summary>
        </member>
        <member name="E:Bam.Net.Testing.Integration.IntegrationTestRunner.IntegrationTestPassed">
            <summary>
            Event that fires when a test passes.
            </summary>
        </member>
        <member name="T:Bam.Net.Testing.IAssertionWriter">
            <summary>
            Defines methods used to write passed and failed assertions.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.IAssertionWriter.WritePassedAssertions(Bam.Net.Testing.Assertion[])">
            <summary>
            When implemented in a derived class should write  
            the specified assertions in the "passed" format.
            Implementers "should" validate that the assertions
            actually passed.
            </summary>
            <param name="assertions"></param>
        </member>
        <member name="M:Bam.Net.Testing.IAssertionWriter.WriteFailedAssertions(Bam.Net.Testing.Assertion[])">
            <summary>
            When implemented in a derived class should write the
            specified assertions in the "failed" format.
            Implementers "should" validate that the assertions actually
            failed.
            </summary>
            <param name="assertions"></param>
        </member>
        <member name="T:Bam.Net.Testing.IBecauseWriter">
            <summary>
            Defines the method used to write the results of a test.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.IBecauseWriter.Write(Bam.Net.Testing.Because)">
            <summary>
            When implemented by a derived class should
            write the results of a test contained in 
            the specified Because instance.
            </summary>
            <param name="because">The Because object containing test details including results.</param>
        </member>
        <member name="T:Bam.Net.Testing.SetupContext">
            <summary>
            Represents the setup or initialization context used for a test.
            Different from the Context.
            </summary>
            <remarks>
            Though it isn't required that the SetupContext be used for test 
            initialization it is provided as an option.
            </remarks>
        </member>
        <member name="M:Bam.Net.Testing.SetupContext.WhenA``1(System.String,System.Action{``0})">
            <summary>
            Prepares the test context for object under test of type T.
            </summary>
            <typeparam name="T">The type of the object under test</typeparam>
            <param name="actionDescription">A description of what action is being tested</param>
            <param name="test">The Action to run, the object under test will be provided as a 
            parameter so the developer can interact with it.</param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.SetupContext.WhenA``1(System.String,System.Func{``0,System.Object})">
            <summary>
            Prepares the test context for object under test of type T.
            </summary>
            <typeparam name="T">The type of the object under test</typeparam>
            <param name="actionDescription">A description of what action is being tested</param>
            <param name="test">The Func to run, the object under test will be provided as a 
            parameter so the developer can interact with it. Must return a value.</param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Testing.TestContext`1">
            <summary>
            The context specific to a single set of tests.  Tracks
            the SetupContext, the test delegate and the assertions
            made during the verification phase of the test.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bam.Net.Testing.TestContext`1.#ctor(Bam.Net.Testing.SetupContext,System.String,System.Action{`0})">
            <summary>
            Creates a new test Context instance using the specified setupContext and 
            test description.
            </summary>
            <param name="setupContext">The setup or initialization context used for this
            test.</param>
            <param name="testDescription">The description of the current test.</param>
            <param name="testMethod">The delegate containing the test actions</param>
        </member>
        <member name="M:Bam.Net.Testing.TestContext`1.#ctor(Bam.Net.Testing.SetupContext,System.String,System.Func{`0,System.Object})">
            <summary>
            Creates a new test Context instance using the specified setupContext and 
            test description.
            </summary>
            <param name="setupContext">The setup or initialization context used for this
            test.</param>
            <param name="testDescription">The description of the current test.</param>
            <param name="outputAction">The delegate containing the test which returns a value
            that can be validated during the verification phase of the test.</param>
        </member>
        <member name="P:Bam.Net.Testing.TestContext`1.TheTest">
            <summary>
            Causes the test to run, same as It.
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.TestContext`1.It">
            <summary>
            Causes the test to run, same as TheTest.
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.TestContext`1.ShouldPass(System.Action{Bam.Net.Testing.Because})">
            <summary>
            The entry point into test validation.  Calls the specified
            actionToAssertResults passing it the Because object of the 
            current test Context.
            </summary>
            <param name="actionToAssertResults"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.TestContext`1.ShouldPass(System.Action{Bam.Net.Testing.Because,`0})">
            <summary>
            The entry point into test validation.  Calls the specified 
            actionToAssertResults passing it the Because object of the
            current test context and the object under test.
            </summary>
            <param name="actionToAssertResults"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.TestContext`1.SoBeHappy">
            <summary>
            Calls Write() on the IBecauseWriter for the current test and
            marks the test complete.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.TestContext`1.SoBeHappy(System.Action{Bam.Net.Testing.SetupContext})">
            <summary>
            Calls Write() on the IBecauseWriter for the current test and
            marks the test complete then runs the specified cleanup action.  
            Same as Cleanup.
            </summary>
            <param name="cleanup"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.TestContext`1.Cleanup(System.Action{Bam.Net.Testing.SetupContext})">
            <summary>
            Calls Write() on the IBecauseWriter for the current test and
            marks the test complete then runs the specified cleanup action.  
            Same as SoBeHappy.
            </summary>
            <param name="cleanup"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Testing.UnitTest">
            <summary>
            Attribute used to mark a method as a Unit Test
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.UnitTestResult.Passed">
            <summary>
            Boolean indicating whether the test passed
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.UnitTestResult.MethodName">
            <summary>
            The name of the test method 
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.UnitTestResult.Description">
            <summary>
            The information value of the test method if any
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.UnitTestResult.AssemblyFullName">
            <summary>
            The full name of the assembly the test was in
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.UnitTestResult.Exception">
            <summary>
            The exception message if any
            </summary>
        </member>
        <member name="P:Bam.Net.Testing.UnitTestResult.StackTrace">
            <summary>
            The stack trace if any
            </summary>
        </member>
        <member name="T:Bam.Net.Testing.When">
            <summary>
            Convenience entry point into a test that requires no setup through the SetupContext
            </summary>
        </member>
        <member name="M:Bam.Net.Testing.When.A``1(System.String,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actionDescription"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.When.A``1(System.String,``0,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actionDescription"></param>
            <param name="objectUnderTest"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.When.A``1(System.String,System.Action{``0})">
            <summary>
            Prepares the test Context with an empty SetupContext instantiating the 
            object under test to an instance of T using the default constructor of type T.
            </summary>
            <typeparam name="T">The type of the </typeparam>
            <param name="actionDescription"></param>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Testing.When.A``1(System.String,``0,System.Action{``0})">
            <summary>
            Prepares the test Context with an empty SetupContext setting the object under test
            to the specified objectUnderTest
            </summary>
            <typeparam name="T">The type of the object under test.</typeparam>
            <param name="actionDescription">A description of what the test action will do</param>
            <param name="objectUnderTest">The object instance being tested</param>
            <param name="test">the test delegate</param>
            <returns>Context</returns>
        </member>
    </members>
</doc>
