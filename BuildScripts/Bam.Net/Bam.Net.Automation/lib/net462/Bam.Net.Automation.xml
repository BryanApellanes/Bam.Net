<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Automation</name>
    </assembly>
    <members>
        <member name="P:Bam.Net.Automation.AssemblyAttributeInfo.AttributeName">
            <summary>
            The name of the assembly attribute to set
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.AssemblyAttributeInfo.NuspecProperty">
            <summary>
            The name of the nuspec property to set the value to or null
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the DeferredJobData table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.DeferredJobData}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.DeferredJobData}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.DeferredJobData}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Where(System.Func{Bam.Net.Automation.Data.DeferredJobDataColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.Data.DeferredJobDataColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a DeferredJobDataColumns 
            and returns a QueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;DeferredJobDataColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single DeferredJobData instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.Data.DeferredJobData.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of DeferredJobDatas
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.DeferredJobData.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.DeferredJobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a DeferredJobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DeferredJobDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the JobData table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.JobData}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.JobData}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.JobData}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Where(System.Func{Bam.Net.Automation.Data.JobDataColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.Data.JobDataColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a JobDataColumns 
            and returns a QueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;JobDataColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single JobData instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.Data.JobData.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.Data.JobData.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of JobDatas
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobData.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a JobDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the JobRunData table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.JobRunData}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.JobRunData}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.Data.JobRunData}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Where(System.Func{Bam.Net.Automation.Data.JobRunDataColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.Data.JobRunDataColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a JobRunDataColumns 
            and returns a QueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;JobRunDataColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single JobRunData instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.Data.JobRunData.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.Data.JobRunData.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of JobRunDatas
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Data.JobRunData.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.Data.JobRunDataColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a JobRunDataColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between JobRunDataColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="T:Bam.Net.Automation.AdvancedInstaller.DOCUMENT">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.COMPONENT">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.Type">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.CreateVersion">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.version">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.Modules">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.RootPath">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.Language">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENT.Id">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENT">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENT.ROW">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENT.ATTRIBUTE">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENT.cid">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Property">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Value">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.ValueLocId">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Type">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.MultiBuildValue">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Directory">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Directory_Parent">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.DefaultDir">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.IsPseudoRoot">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Component">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.ComponentId">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Directory_">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Attributes">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.KeyPath">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Feature">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Title">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Description">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Display">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Level">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Components">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.File">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Component_">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.FileName">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.SourcePath">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.SelfReg">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.NextFile">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.DigSign">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.BuildKey">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.BuildName">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.BuildOrder">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.BuildType">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Languages">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.InstallationType">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.UseLargeSchema">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.MsiPackageType">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Path">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Fragment">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Name">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Dialog_">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Control_">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Event">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Argument">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Condition">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Ordering">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Options">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Action">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Target">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Source">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.WithoutSeq">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.MultiBuildTarget">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Environment">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Index">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Sequence">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.DescriptionLocId">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.IsPredefined">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Builds">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Registry">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Root">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.Key">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.UpgradeCode">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.VersionMin">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.VersionMax">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTROW.ActionProperty">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTATTRIBUTE">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTATTRIBUTE.name">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.DOCUMENTCOMPONENTATTRIBUTE.value">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.AdvancedInstaller.NewDataSet">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.AdvancedInstaller.NewDataSet.Items">
            <remarks/>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the BuildJob table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.ContinuousIntegration.Data.BuildJob}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.ContinuousIntegration.Data.BuildJob}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.ContinuousIntegration.Data.BuildJob}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Where(System.Func{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a BuildJobColumns 
            and returns a QueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;BuildJobColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single BuildJob instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of BuildJobs
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildJob.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildJobColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildJobColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildJobColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the BuildResult table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.ContinuousIntegration.Data.BuildResult}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.ContinuousIntegration.Data.BuildResult}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.ContinuousIntegration.Data.BuildResult}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Where(System.Func{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a BuildResultColumns 
            and returns a QueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;BuildResultColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single BuildResult instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of BuildResults
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Data.BuildResult.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.ContinuousIntegration.Data.BuildResultColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a BuildResultColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between BuildResultColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="P:Bam.Net.Automation.ContinuousIntegration.DeploymentWorker.ProjectNames">
            <summary>
            A comma and/or semi-color separated list of project names
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.Loggers.BuildLogger`1.SetLoggerProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set properties on the underlying Bam.Net.Logging.ILogger where names match
            the keys in the specified properties dictionary
            </summary>
            <param name="properties"></param>
        </member>
        <member name="P:Bam.Net.Automation.ContinuousIntegration.GetSourceWorker.TagName">
            <summary>
            Gets or sets the name of the source control 
            Tag to retrieve
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.ContinuousIntegration.GetSourceWorker.ServerSourcePath">
            <summary>
            Gets or sets the path on the server where source 
            should be retrieved from.  For Git this is the
            repository path, for Tfs this is the team project
            branch path
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.ContinuousIntegration.GetSourceWorker.GetLatest">
            <summary>
            Returns true if the TagName is latest
            </summary>
        </member>
        <member name="T:Bam.Net.Automation.ContinuousIntegration.ProjectBuildWorker">
            <summary>
            A Worker that will attempt to build only the specified
            ProjectFileName.  A recursive search will be done
            to find it, it may be either a .csproj file, .vbproj file or
            .sln file.
            </summary>
        </member>
        <member name="T:Bam.Net.Automation.ContinuousIntegration.AllProjectsBuildWorker">
            <summary>
            A Worker that will attempt to build all the projects 
            that it finds in the specified SourceDirectory.
            A recursive search will be done for all .csproj 
            and .vbproj files.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.ContinuousIntegration.AllProjectsBuildWorker.GetBuildFiles">
            <summary>
            Gets the solution files to build
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Automation.Ftp">
            <summary>
            Fluent wrapper around System.Net.FtpClient
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the NotificationSubscription table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Where(System.Func{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a NotificationSubscriptionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;NotificationSubscriptionColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single NotificationSubscription instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of NotificationSubscriptions
            </summary>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscription.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the TestDefinition table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Where(System.Func{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a TestDefinitionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;TestDefinitionColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestDefinition instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of TestDefinitions
            </summary>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestDefinition.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the TestExecution table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestExecution}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestExecution}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestExecution}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Where(System.Func{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a TestExecutionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;TestExecutionColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestExecution instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of TestExecutions
            </summary>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestExecution.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.GetOneNotificationSubscriptionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns})">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.OneNotificationSubscriptionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns})">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single NotificationSubscription instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.NotificationSubscriptionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a Bam.Net.Automation.TestReporting.Data.NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between Bam.Net.Automation.TestReporting.Data.NotificationSubscriptionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TopNotificationSubscriptionsWhere(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns})">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountNotificationSubscriptions">
            <summary>
            Return the count of NotificationSubscriptions
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountNotificationSubscriptionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.NotificationSubscriptionColumns})">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a NotificationSubscriptionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between NotificationSubscriptionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.GetOneTestSuiteDefinitionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns})">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.OneTestSuiteDefinitionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns})">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestSuiteDefinition instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TestSuiteDefinitionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a Bam.Net.Automation.TestReporting.Data.TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between Bam.Net.Automation.TestReporting.Data.TestSuiteDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TopTestSuiteDefinitionsWhere(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns})">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestSuiteDefinitions">
            <summary>
            Return the count of TestSuiteDefinitions
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestSuiteDefinitionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns})">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.GetOneTestDefinitionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns})">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.OneTestDefinitionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns})">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestDefinition instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TestDefinitionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a Bam.Net.Automation.TestReporting.Data.TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between Bam.Net.Automation.TestReporting.Data.TestDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TopTestDefinitionsWhere(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns})">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestDefinitions">
            <summary>
            Return the count of TestDefinitions
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestDefinitionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestDefinitionColumns})">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestDefinitionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.GetOneTestExecutionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns})">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.OneTestExecutionWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns})">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestExecution instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TestExecutionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a Bam.Net.Automation.TestReporting.Data.TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between Bam.Net.Automation.TestReporting.Data.TestExecutionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TopTestExecutionsWhere(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns})">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestExecutions">
            <summary>
            Return the count of TestExecutions
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestExecutionsWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestExecutionColumns})">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestExecutionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestExecutionColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.GetOneTestSuiteExecutionSummaryWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns})">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.OneTestSuiteExecutionSummaryWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns})">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestSuiteExecutionSummary instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TestSuiteExecutionSummariesWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns})">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a Bam.Net.Automation.TestReporting.Data.TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between Bam.Net.Automation.TestReporting.Data.TestSuiteExecutionSummaryColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.TopTestSuiteExecutionSummariesWhere(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns})">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestSuiteExecutionSummaries">
            <summary>
            Return the count of TestSuiteExecutionSummaries
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.Repository.TestReportingRepository.CountTestSuiteExecutionSummariesWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns})">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the TestSuiteDefinition table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Where(System.Func{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a TestSuiteDefinitionColumns 
            and returns a QueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;TestSuiteDefinitionColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestSuiteDefinition instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of TestSuiteDefinitions
            </summary>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinition.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteDefinitionColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteDefinitionColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteDefinitionColumns and other values
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the TestSuiteExecutionSummary table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.BatchAll(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary}},Bam.Net.Data.Database)">
            <summary>
            Process all records in batches of the specified size
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.BatchQuery(System.Int32,Bam.Net.Data.QueryFilter,System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>			 
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.BatchQuery(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},System.Action{System.Collections.Generic.IEnumerable{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary}},Bam.Net.Data.Database)">
            <summary>
            Process results of a query in batches of the specified size
            </summary>	
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Where(System.Func{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns,Bam.Net.Data.QueryFilter{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns}},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a QueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;TestSuiteExecutionSummaryColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single TestSuiteExecutionSummary instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of TestSuiteExecutionSummaries
            </summary>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummary.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Automation.TestReporting.Data.Dao.TestSuiteExecutionSummaryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TestSuiteExecutionSummaryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TestSuiteExecutionSummaryColumns and other values
            </param>
            <param name="database">
            Which database to query or null to use the default
            </param>
        </member>
        <member name="T:Bam.Net.Automation.TestReporting.Data.TestSuiteDefinition">
            <summary>
            Represents a logical set of TestDefinitions
            belonging to a common suite of tests
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.TestReporting.Data.TestDefinition.MethodName">
            <summary>
            The name of the test method 
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.TestReporting.Data.TestDefinition.Description">
            <summary>
            The information value of the test method if any
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.TestReporting.Data.TestDefinition.AssemblyFullName">
            <summary>
            The full name of the assembly the test was in
            </summary>
        </member>
        <member name="T:Bam.Net.Automation.TestReporting.Data.TestExecution">
            <summary>
            Represents the result of executing
            a single test
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.TestReporting.Data.TestExecution.Passed">
            <summary>
            Boolean indicating whether the test passed
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.TestReporting.Data.TestExecution.Exception">
            <summary>
            The exception message if any
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.TestReporting.Data.TestExecution.StackTrace">
            <summary>
            The stack trace if any
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.TestReportService.GetSuiteDefinition(System.String)">
            <summary>
            Get an exisintg SuiteDefinition with the specified suiteTitle or
            create it if none exists
            </summary>
            <param name="suiteTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.TestReportService.GetTestDefinition(System.String,System.String)">
            <summary>
            Get an existing TestDefinition for the specified suiteTitle and testTitle
            or create it if none exists
            </summary>
            <param name="suiteTitle"></param>
            <param name="testTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.UnitTestRunReportingListener.GetTestSuiteDefinition(Bam.Net.CommandLine.ConsoleMethod)">
            <summary>
            Get a TestSuiteDefinition for the specified test creating it if necessary
            and populating the internal cache
            </summary>
            <param name="test"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.TestReporting.UnitTestRunReportingListener.SetTestSuiteExecutionSummary(Bam.Net.Automation.TestReporting.Data.TestSuiteDefinition)">
            <summary>
            Set a TestSuiteExecutionSummary for the specified test creating it if necessary
            and populating the internal cache
            </summary>
            <param name="suite"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.SuspendedJob.#ctor(Bam.Net.IpcMessageRoot,Bam.Net.Automation.Job)">
            <summary>
            Instantiate a new SuspendedJob instance saving
            the specified job as an IpcMessage to the 
            specified IpcMessageRoot.  A new InstanceId
            will be assigned.
            </summary>
            <param name="messageRoot"></param>
            <param name="job"></param>
        </member>
        <member name="M:Bam.Net.Automation.SuspendedJob.#ctor(Bam.Net.IpcMessageRoot,System.String)">
            <summary>
            Instantiate a new Suspended job instance which can 
            be reinstantiated from the specified messageRoot 
            using the specified instanceId
            </summary>
            <param name="messageRoot"></param>
            <param name="instanceId"></param>
        </member>
        <member name="P:Bam.Net.Automation.NotificationWorker.Recipients">
            <summary>
            A comma/or semi-colon separated list of
            recipients (typically email addresses, but depends on 
            the implementation)
            </summary>
        </member>
        <member name="T:Bam.Net.Automation.JobConductorService">
            <summary>
            The master for all jobs.
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.JobConductorService.AddWorker(System.String,System.String,System.String)">
            <summary>
            Add a worker of the specified type to the job with the specified
            jobName assigning the specified workerName .
            </summary>
            <param name="workerTypeName"></param>
            <param name="workerName"></param>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.JobConductorService.AddWorker``1(System.String,Bam.Net.Automation.JobConf)">
            <summary>
            Adds a worker of generic type T to the
            specified JobConf.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="conf"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.JobConductorService.JobExists(System.String)">
            <summary>
            Returns true if a job with the specified name
            exists under the current Orchestrator.  Determined
            by looking in the current Orchestrator's JobsDirectory.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.JobConductorService.EnqueueJob(System.String,System.Int32)">
            <summary>
            Enqueue a job to be run next (typically instant if no other
            jobs are running)
            </summary>
            <param name="name"></param>
            <param name="stepNumber"></param>
        </member>
        <member name="M:Bam.Net.Automation.JobConductorService.StartJobRunnerThread">
            <summary>
            Starts the JobRunner thread.  This method
            must be called prior to queueing up jobs
            or the jobs will not be run.
            </summary>
        </member>
        <member name="T:Bam.Net.Automation.Job">
            <summary>
            A set of workers that are run in sequence
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Job.GetWorkStateData``1">
            <summary>
            Tries to cast CurrentWorkState to WorkState&lt;T&gt;
            and returns WorkState.Data if it exists, otherwise 
            returns null;
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Automation.Job.CurrentWorkerName">
            <summary>
            Represents the name of the currently running worker
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.Job.WorkStateMessage">
            <summary>
            The Message property of the CurrentWorkState
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.JobConf.CurrentIndex">
            <summary>
            Represents the "Order" that will be assigned to the next
            worker added
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.JobConf.WorkerFiles">
            <summary>
            An array of worker config file paths to
            load
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.JobConf.JobDirectory">
            <summary>
            The root of the Job
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.JobConf.GetWorker``1(System.String)">
            <summary>
            Gets a worker of the specified generic type 
            loading it from a file if the worker file exists
            creating it otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="workerName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.JobConf.GetFilePath">
            <summary>
            Returns the save to path for the current
            JobConf.  In the form {JobDirectory}\\{Name}.job
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Automation.Nuget.conventionbasedpackage">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.conventionbasedpackage.metadata">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.Nuget.package">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.package.metadata">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.package.files">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.Nuget.packageMetadata">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.id">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.version">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.title">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.authors">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.owners">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.licenseUrl">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.projectUrl">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.iconUrl">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.requireLicenseAcceptance">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.requireLicenseAcceptanceSpecified">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.description">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.summary">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.releaseNotes">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.copyright">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.language">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.tags">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.dependencies">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.frameworkAssemblies">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadata.references">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.Nuget.packageMetadataDependency">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadataDependency.id">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadataDependency.version">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.Nuget.packageMetadataFrameworkAssembly">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadataFrameworkAssembly.assemblyName">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadataFrameworkAssembly.targetFramework">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.Nuget.packageMetadataReference">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageMetadataReference.file">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.Nuget.packageFile">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageFile.src">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageFile.target">
            <remarks/>
        </member>
        <member name="P:Bam.Net.Automation.Nuget.packageFile.exclude">
            <remarks/>
        </member>
        <member name="T:Bam.Net.Automation.ProcessWorker">
            <summary>
            Work done as a command line process
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.Worker.StepNumber">
            <summary>
            Used by the job to sort this worker into its proper
            place in order relative to other workers
            </summary>
        </member>
        <member name="M:Bam.Net.Automation.Worker.State``1(Bam.Net.Automation.WorkState{``0})">
            <summary>
            Gets or sets the current WorkState of this Worker
            </summary>
            <typeparam name="T"></typeparam>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Automation.Worker.ConfigureFromWorkstate">
            <summary>
            Sets all the properties of the current
            worker from the properties of the current
            WorkState.  All writable string properties that
            match in name will be copied to the 
            current worker
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.ZipFolderWorker.SourceDirectory">
            <summary>
            The directory to zip
            </summary>
        </member>
        <member name="P:Bam.Net.Automation.ZipFolderWorker.TargetPath">
            <summary>
            The full path or job relative path to the
            final zip file including the desired extension
            </summary>
        </member>
    </members>
</doc>
