<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Incubation</name>
    </assembly>
    <members>
        <member name="T:Bam.Net.Incubation.Asking">
            <summary>
            Fluent entry point to FluentIncubationContext
            </summary>
        </member>
        <member name="M:Bam.Net.Incubation.FluentIncubationContext`1.Returns``1">
            <summary>
            Specify the return type T for the specified 
            type I ( same as To )
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.FluentIncubationContext`1.To``1">
            <summary>
            Specify the return type T for the specified 
            type I ( same as Returns )
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Incubation.Incubator">
            <summary>
            A simple dependency injection container.
            </summary>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.CombineWith(Bam.Net.Incubation.Incubator,System.Boolean)">
            <summary>
            Copy the values from the specified incubator to the current; the same as CopyFrom
            </summary>
            <param name="incubator">The incubator to copy from</param>
            <param name="overwrite">If true, values in the current incubator
            will be over written by values of the same types from the specified
            incubator otherwise the current value will be kept</param>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.CopyFrom(Bam.Net.Incubation.Incubator,System.Boolean)">
            <summary>
            Copy the values from the specified incubator to the current; the same as CombineWith
            </summary>
            <param name="incubator">The incubator to copy from</param>
            <param name="overwrite">If true, values in the current incubator
            will be over written by values of the same types from the specified
            incubator otherwise the current value will be kept</param>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Construct``1">
            <summary>
            Constructs an instance of type T by finding a constructor
            that can take objects of types that have already been 
            constructed or set.  If the constructor parameters have not
            been instantiated an InvalidOperationException will be 
            thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.GetWithoutSet``1">
            <summary>
            Construct an instance of type T without
            setting the new instance as the new internal gettable instance
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.GetWithoutSet(System.Type)">
            <summary>
            Construct an instance of type T without
            setting the new instance as the new internal gettable instance
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Construct(System.Type)">
            <summary>
            Construct an instance of the specified type
            injecting constructor params from the current 
            incubator
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.SetProperties(System.Object)">
            <summary>
            Set writable properties of the specified instance to 
            instances in the current Incubator.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Construct``1(System.Object[])">
            <summary>
            Constructs an object of type T passing the specified ctorParams to the 
            contructor.
            </summary>
            <typeparam name="T">The type of the object to instantiate.</typeparam>
            <param name="ctorParams">The object values to pass to the constructor of type T.</param>
            <exception cref="T:System.InvalidOperationException">If the constructor with a signature matching
            the types of the specified ctorParams is not found.</exception>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Construct(System.Type,System.Object[])">
            <summary>
            Constructs an object of the specified type passing the specified
            ctorParams to the constructor.
            </summary>
            <param name="type"></param>
            <param name="ctorParams"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Construct``1(System.Type[])">
            <summary>
            Constructs an object of type T using existing instances
            of the specified ctorParamTypes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ctorParamTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Get``1(System.Type[])">
            <summary>
            Gets an object of type T if it has been instantiated otherwise
            calls Construct and returns the result.
            </summary>
            <typeparam name="T">The type of the object get.</typeparam>
            <param name="ctorParamTypes">Array of types used to retrieve the parameters passed to the contructor of
            type T</param>
            <returns>T</returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Get``1">
            <summary>
            Gets an object of type T if it has been instantiated otherwise
            calls Construct and returns the result.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <returns>T</returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Get``1(``0)">
            <summary>
            Gets an object of type T if it has been instantiated otherwise
            sets the inner instance to the specified setToIfNull and returns
            it.  This results in the specified setToIfNull being returned
            for subsequent calls to this method.
            </summary>
            <typeparam name="T">The type of the object to get</typeparam>
            <param name="setToIfNull">The instance to set the inner instance to if
            it has not been previously set</param>
            <returns>T</returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Get``1(System.Object[])">
            <summary>
            Gets an object of type T if it has been instantiated otherwise
            calls Construct and returns the result.
            </summary>
            <typeparam name="T">The type of the object to get.</typeparam>
            <param name="ctorParams">Array of objects to pass to the constructor of type T</param>
            <returns>T</returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.Set``1(``0,System.Boolean)">
            <summary>
            Sets the inner instance of type T to the specified
            instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="P:Bam.Net.Incubation.Incubator.ClassNameTypes">
            <summary>
            Types as they would be resolved when using 
            the values in ClassNames
            </summary>
        </member>
        <member name="P:Bam.Net.Incubation.Incubator.MappedTypes">
            <summary>
            All the Types that are mapped to instances
            or instanciators
            </summary>
        </member>
        <member name="P:Bam.Net.Incubation.Incubator.Item(System.Type)">
            <summary>
            Gets the inner instance of the type specified or
            null if it has not been set through a call to Set(), Get() or 
            Construct().
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Incubator.SetCtorParam(System.Type,System.String,System.Object)">
            <summary>
            Set the value to pass into the constructor when 
            constructing the specified type
            </summary>
            <param name="forType"></param>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="T:Bam.Net.Incubation.Requesting">
            <summary>
            Fluent entry point to FluentIncubationContext
            </summary>
        </member>
        <member name="M:Bam.Net.Incubation.Requesting.AskingFor``1(Bam.Net.Incubation.Incubator)">
            <summary>
            Bind the specified type I ( same as Bind )
            </summary>
            <typeparam name="I"></typeparam>
            <param name="incubator"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.Requesting.Bind``1(Bam.Net.Incubation.Incubator)">
            <summary>
            Bind the specified type I ( same as AskingFor )
            </summary>
            <typeparam name="I"></typeparam>
            <param name="incubator"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Incubation.StringExtensions.ToDelimited``1(``0[],Bam.Net.Incubation.ToDelimitedDelegate{``0})">
            <summary>
            Intended to delimit the specified array of T using the
            specified ToDelimitedDelegate.  Each item will be represented
            by the return value of the specified ToDelimitedDelegate.
            </summary>
            <typeparam name="T">The type of objects in the specified array</typeparam>
            <param name="objectsToStringify">The objects</param>
            <param name="toDelimiteder">The ToDelimitedDelegate used to represent each object</param>
            <returns>string</returns>
        </member>
        <member name="M:Bam.Net.Incubation.StringExtensions.ToDelimited``1(``0[],Bam.Net.Incubation.ToDelimitedDelegate{``0},System.String)">
            <summary>
            Intended to delimit the specified array of T using the
            specified ToDelimitedDelegate.  Each item will be represented
            by the return value of the specified ToDelimitedDelegate.
            </summary>
            <typeparam name="T">The type of objects in the specified array</typeparam>
            <param name="objectsToStringify">The objects</param>
            <param name="toDelimiteder">The ToDelimitedDelegate used to represent each object</param>
            <returns>string</returns>
        </member>
    </members>
</doc>
