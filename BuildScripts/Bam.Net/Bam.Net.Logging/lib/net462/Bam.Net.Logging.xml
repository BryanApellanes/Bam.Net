<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Logging</name>
    </assembly>
    <members>
        <member name="T:Bam.Net.Logging.DaoLogger">
            <summary>
            A basic database logger.  Logs all entries
            to a single table called LogEvent
            </summary>
        </member>
        <member name="T:Bam.Net.Logging.DaoLogger2">
            <summary>
            A database logger that uses a 
            a schema that will grow less over
            time by breaking out the parts
            of the event into separate tables
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the CategoryName table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Where(System.Func{Bam.Net.Logging.Data.CategoryNameColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.CategoryNameColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a CategoryNameColumns 
            and returns a QueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;CategoryNameColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single CategoryName instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.CategoryName.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.CategoryName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of CategoryNames
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.CategoryName.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.CategoryNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the ComputerName table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Where(System.Func{Bam.Net.Logging.Data.ComputerNameColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.ComputerNameColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a ComputerNameColumns 
            and returns a QueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;ComputerNameColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single ComputerName instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.ComputerName.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.ComputerName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of ComputerNames
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.ComputerName.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ComputerNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a ComputerNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ComputerNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Event table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Where(System.Func{Bam.Net.Logging.Data.EventColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.EventColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a EventColumns 
            and returns a QueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;EventColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Event instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.Event.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.Event.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Events
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Event.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a EventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the EventParam table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Where(System.Func{Bam.Net.Logging.Data.EventParamColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.EventParamColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a EventParamColumns 
            and returns a QueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;EventParamColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single EventParam instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.EventParam.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.EventParam.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of EventParams
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.EventParam.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.EventParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a EventParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between EventParamColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Param table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Where(System.Func{Bam.Net.Logging.Data.ParamColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.ParamColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a ParamColumns 
            and returns a QueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;ParamColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Param instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.Param.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.Param.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Params
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Param.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.ParamColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a ParamColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ParamColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Signature table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Where(System.Func{Bam.Net.Logging.Data.SignatureColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.SignatureColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SignatureColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;SignatureColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Signature instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.Signature.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.Signature.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Signatures
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.Signature.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SignatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SignatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SignatureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the SourceName table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Where(System.Func{Bam.Net.Logging.Data.SourceNameColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.SourceNameColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a SourceNameColumns 
            and returns a QueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;SourceNameColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single SourceName instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.SourceName.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.SourceName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of SourceNames
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.SourceName.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.SourceNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a SourceNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between SourceNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the UserName table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Where(System.Func{Bam.Net.Logging.Data.UserNameColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.UserNameColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserNameColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;UserNameColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserName instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.UserName.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.UserName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of UserNames
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.UserName.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.UserNameColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserNameColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserNameColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the LogEvent table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Where(System.Func{Bam.Net.Logging.Data.LogEventColumns,Bam.Net.Data.QueryFilter{Bam.Net.Logging.Data.LogEventColumns}},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LogEventColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;LogEventColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single LogEvent instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Logging.Data.LogEvent.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Logging.Data.LogEvent.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of LogEvents
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Data.LogEvent.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Logging.Data.LogEventColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LogEventColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LogEventColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="T:Bam.Net.Logging.Info">
            <summary>
            A convenience entry point to log information level events
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Info.Log(System.String,System.Object[])">
            <summary>
            Log an Information level event
            </summary>
            <param name="messageSignature"></param>
            <param name="args"></param>
        </member>
        <member name="T:Bam.Net.Logging.Warn">
            <summary>
            A convenience entry point to log Warning level events
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Warn.Log(System.String,System.Object[])">
            <summary>
            Log a Warning level event
            </summary>
            <param name="messageSignature"></param>
            <param name="args"></param>
        </member>
        <member name="T:Bam.Net.Logging.Error">
            <summary>
            A convenience entry point to log Error level events
            </summary>
        </member>
        <member name="M:Bam.Net.Logging.Error.Log(System.String,System.Exception,System.Object[])">
            <summary>
            Log an Error level event
            </summary>
            <param name="messageSignature"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:Bam.Net.Logging.Error.Log(System.String,System.Object[])">
            <summary>
            Log an Error level event
            </summary>
            <param name="messageSignature"></param>
            <param name="args"></param>
        </member>
    </members>
</doc>
