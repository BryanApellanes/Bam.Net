<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Server</name>
    </assembly>
    <members>
        <member name="T:Bam.Net.Server.AppConf">
            <summary>
            Configuration for a Bam Application
            </summary>
        </member>
        <member name="M:Bam.Net.Server.AppConf.AddService``1(System.Func{``0})">
            <summary>
            Add a service of the specified type to be 
            instanciated by the specified function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceInstanciator"></param>
        </member>
        <member name="M:Bam.Net.Server.AppConf.AddService``1(``0)">
            <summary>
            Add the specified instance as a service to 
            be exposed to the client
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="P:Bam.Net.Server.AppConf.Name">
            <summary>
            The name of the application.  This will be the name of the 
            folder being served from the "apps" folder of the root
            of the BamServer
            </summary>
        </member>
        <member name="P:Bam.Net.Server.AppConf.DefaultLayout">
            <summary>
            The name of the default layout 
            </summary>
        </member>
        <member name="P:Bam.Net.Server.AppConf.DefaultPage">
            <summary>
            The name of the page to serve when the 
            root is requested "/".
            </summary>
        </member>
        <member name="P:Bam.Net.Server.AppConf.AppInitializer">
            <summary>
            The assembly qualified name of an IAppInitializer
            implementation that will be called on application 
            initialization
            </summary>
        </member>
        <member name="P:Bam.Net.Server.AppConf.AppInitializerAssemblyPath">
            <summary>
            The file path to the assembly that contains
            the type specified by AppInitializer
            </summary>
        </member>
        <member name="M:Bam.Net.Server.AppConf.DomApplicationIdFromAppName(System.String)">
            <summary>
            Get the application id used in the dom by parsing the appName.
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Server.AppContentResponder.ContentResponder">
            <summary>
            Gets the main ContentResponder, which is the content responder
            for the server level of the current BamServer
            </summary>
        </member>
        <member name="P:Bam.Net.Server.AppContentResponder.ServerRoot">
            <summary>
            The server content root
            </summary>
        </member>
        <member name="P:Bam.Net.Server.AppContentResponder.AppRoot">
            <summary>
            The application content root
            </summary>
        </member>
        <member name="M:Bam.Net.Server.AppContentResponder.Initialize">
            <summary>
            Initializes the file system from the embedded zip resource
            that represents a bare bones app.
            </summary>
        </member>
        <member name="M:Bam.Net.Server.Bam.Scripts(System.Web.Mvc.WebViewPage,System.String)">
            <summary>
            Gets script tags for all scripts pertaining to the specified appName.
            </summary>
            <param name="page"></param>
            <param name="appName"></param>
            <param name="reloadConfigScripts"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Bam.CommonConfigScripts(System.Web.Mvc.WebViewPage,System.Object)">
            <summary>
            Get script tags that reference the scripts listed in the /bam/apps/config.js file
            </summary>
            <param name="page"></param>
            <param name="namedFormatValues"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Bam.AppConfigScripts(System.Web.Mvc.WebViewPage,System.Object)">
            <summary>
            Get script tags that reference the scripts listed in 
            the /bam/apps/{appName}/config.js file.
            </summary>
            <param name="page"></param>
            <param name="namedFormatValues"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Bam.AppScripts(System.Web.Mvc.WebViewPage,System.Object)">
            <summary>
            Get script tags that reference scripts in the pages folder
            </summary>
            <param name="page"></param>
            <param name="namedFormatValues"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Bam.AppInitScript(System.Web.Mvc.WebViewPage,System.Object)">
            <summary>
            Get a script tag that references the /bam/apps/{appName}/init.js script
            </summary>
            <param name="page"></param>
            <param name="namedFormatValues"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.BamApplicationManager.GetPages(System.String)">
            <summary>
            Called by client code
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Server.BamDaoServer">
            <summary>
            BamServer where EnableDao is true
            and EnableServiceProxy is false
            </summary>
        </member>
        <member name="T:Bam.Net.Server.BamServer">
            <summary>
            The core BamServer
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Initializing">
            <summary>
            The event that fires when server initialization begins
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Initialized">
            <summary>
            The event that fires when server initialization is complete
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.SchemaInitializing">
            <summary>
            The event that fires when a schema is about to be initialized
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.SchemaInitialized">
            <summary>
            The event that fires when a schema is done initializing
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.SchemasInitializing">
            <summary>
            The event that fires before beginning any schema initialization
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.SchemasInitialized">
            <summary>
            The event that fires when all schemas have completed initialization
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.LoadingConf">
            <summary>
            The event that fires before loading the server configuration
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.LoadedConf">
            <summary>
            the event that fires when loading the server configuration is complete
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.CreatingApp">
            <summary>
            The event that fires before creating an application
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.CreatedApp">
            <summary>
            The event that fires when creating an application is complete
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Responding">
            <summary>
            The event that fires when a response has been sent
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Responded">
            <summary>
            The event that fires when a response has been sent
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.NotResponded">
            <summary>
            The event that fires when a repsonse is not sent
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.ResponderAdded">
            <summary>
            The event that fires when a responder is added
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.SettingConf">
            <summary>
            The event that fires before setting the configuration
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.SettedConf">
            <summary>
            The event that fires when setting the configuration is complete
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.SavedConf">
            <summary>
            The event that fires when the configuration is saved
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Starting">
            <summary>
            The event that fires before starting the server
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Started">
            <summary>
            The event that fires when the server has started
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Stopping">
            <summary>
            The event that fires before the server is stopped
            </summary>
        </member>
        <member name="E:Bam.Net.Server.BamServer.Stopped">
            <summary>
            The event that fires when the server has stopped
            </summary>
        </member>
        <member name="M:Bam.Net.Server.BamServer.InitializeCommonSchemas">
            <summary>
            Initialize server level schemas
            </summary>
        </member>
        <member name="M:Bam.Net.Server.BamServer.SubscribeResponders(Bam.Net.Logging.ILogger)">
            <summary>
            Subscribe the specified logger to the events of the
            ContentResponder.  Will also subscribe to the DaoResponder
            if EnableDao is true and the ServiceProxyReponder if
            EnableServiceProxy is true.  Additionally, will subscribe to
            any other responders that have been added using AddResponder
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Bam.Net.Server.BamServer.Subscribe(Bam.Net.Logging.ILogger)">
            <summary>
            Subscribe the specified logger to the 
            events of the current BamServer
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Bam.Net.Server.BamServer.LoadConf">
            <summary>
            Loads the server configuration from either a json file, yaml file
            or the default config depending on which is found first in that 
            order.
            </summary>
        </member>
        <member name="M:Bam.Net.Server.BamServer.SaveConf(System.Boolean,Bam.Net.Server.ConfFormat)">
            <summary>
            Saves the current configuration if the config 
            file doesn't currently exist
            </summary>
            <param name="format">The format to save the configuration in</param>
            <param name="overwrite">If true overwrite the existing cofig file</param>
            <returns>The BamConf</returns>
        </member>
        <member name="P:Bam.Net.Server.BamServer.ContentResponder">
            <summary>
            The primary responder for all content files
            </summary>
        </member>
        <member name="M:Bam.Net.Server.BamServer.AddAppService``1(System.String,System.Func{System.Type,``0})">
            <summary>
            Add or update the app service using the specified instanciator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appName"></param>
            <param name="instanciator"></param>
        </member>
        <member name="M:Bam.Net.Server.BamServer.AddResponder(Bam.Net.Server.IResponder)">
            <summary>
            Add an IResponder implementation to this
            request handler
            </summary>
            <param name="responder"></param>
        </member>
        <member name="P:Bam.Net.Server.BamServer.ResponderNotFoundHandler">
            <summary>
            Get or set the default handler used when no appropriate
            responder is found for a given request.  This is the 
            Action responsible for responding with a 404 status code
            and supplying any additional information to the client.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamServer.ExceptionHandler">
            <summary>
            Get or set the default exception handler.  This is the
            Action responsible for responding with a 500 status code
            and supplying any additional information to the client
            pertaining to exceptions that may occur on the server.
            </summary>
        </member>
        <member name="M:Bam.Net.Server.BamServer.GetCurrentConf(System.Boolean)">
            <summary>
            Get a BamConf instance which represents the current
            state of the BamServer
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Server.BamServer.EnableDao">
            <summary>
            If true will cause the initialization of the 
            DaoResponder which will process all *.db.js
            and *.db.json files.  See http://breviteedocs.wordpress.com/dao/
            for information about the expected format 
            of a *.db.js file.  The format of *db.json 
            would be the json equivalent of the referenced
            database object (see link).  See
            Bam.Net.Data.Schema.DataTypes for valid
            data types.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamServer.EnableServiceProxy">
            <summary>
            If true will cause the initialization of the
            ServiceProxyResponder which will register
            all classes addorned with the Proxy attribute
            as service proxy executors
            </summary>
        </member>
        <member name="P:Bam.Net.Server.FileUploadEventArgs.Continue">
            <summary>
            Continue the handling of the upload
            </summary>
        </member>
        <member name="T:Bam.Net.Server.HttpPostedFile">
            <summary>
            Modified from http://stackoverflow.com/questions/8466703/httplistener-and-file-upload
            </summary>
        </member>
        <member name="M:Bam.Net.Server.Listeners.BamServerEventListenerBinder.Bind">
            <summary>
            Bind the BamServerEventListener implementations defined in BamConf 
            to the server events
            </summary>
        </member>
        <member name="T:Bam.Net.Server.BamServerEventListener">
            <summary>
            An abstract base class used to subscribe special handlers
            to server events
            </summary>
        </member>
        <member name="T:Bam.Net.Server.BamServiceProxyServer">
            <summary>
            BamServer where EnableDao is false
            and EnableServiceProxy is true
            </summary>
        </member>
        <member name="M:Bam.Net.Server.DaoConf.GetDefault(System.Type,Bam.Net.Server.BamConf)">
            <summary>
            Get a DaoConf with default settings (uses SQLite)
            </summary>
            <param name="daoType"></param>
            <param name="bryanConf"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.DaoConf.GetDefault(System.String,Bam.Net.Server.BamConf)">
            <summary>
            Get a DaoConf with default settings (uses SQLite)
            </summary>
            <param name="connectionName"></param>
            <param name="bryanConf"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Server.DaoConf.ConnectionName">
            <summary>
            The name of the connection (this equates to ContextName in some instances (example, qi.js) and 
            is also the name of the connection string setting used in the default configuration file)
            </summary>
        </member>
        <member name="P:Bam.Net.Server.DaoConf.RegistrarCaller">
            <summary>
            The AssemblyQualifiedName of an IRegistrarCaller implementation
            used to register the underlying database type (SQLite, SqlClient, etc.)
            </summary>
        </member>
        <member name="M:Bam.Net.Server.DaoConf.Register">
            <summary>
            Calls the appropriate RegistrarCaller for the ConnectionName of this DaoConf
            </summary>
        </member>
        <member name="M:Bam.Net.Server.DesignController.LessBootstrapVariables(Bam.Net.Drawing.ColorPalette)">
            <summary>
            Saves the specified ColorScheme to ~/bam/json/colorscheme.json and returns 
            the updated contents of variables.less
            </summary>
            <param name="scheme"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Fs.MoveFile(System.String,System.String)">
            <summary>
            Move the file from src to dest.  The source
            and dest must be relative to the current Fs
            root.
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="T:Bam.Net.Server.HttpHeaderResponder">
            <summary>
            A responder that checks the value of the X-Responder HttpHeader
            to determine if the current request is intended for this responder
            </summary>
        </member>
        <member name="M:Bam.Net.Server.HttpHeaderResponder.MayRespond(Bam.Net.ServiceProxy.IHttpContext)">
            <summary>
            Returns true if the request Header named "X-Responder" exists 
            and the value is equal to the value of RespondToHeaderValue
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Server.HttpHeaderResponder.RespondToHeaderName">
            <summary>
            The name of the HttpHeader to check the value for, to determine
            if the request is intended for the current responder
            </summary>
        </member>
        <member name="P:Bam.Net.Server.HttpHeaderResponder.RespondToHeaderValue">
            <summary>
            The value of the HttpHeader if the request is intended for the
            currenct responder
            </summary>
        </member>
        <member name="T:Bam.Net.Server.FileContentHash">
            <summary>
            Hash of file content
            </summary>
        </member>
        <member name="T:Bam.Net.Server.DustTemplateInitializer">
            <summary>
            Class used to initialize dust templates for all 
            Dao components
            </summary>
        </member>
        <member name="M:Bam.Net.Server.DustTemplateInitializer.RenderAppTemplates">
            <summary>
            Render templates for all the currently registered application DaoProxyRegistrations
            </summary>
        </member>
        <member name="M:Bam.Net.Server.DustTemplateInitializer.RenderCommonTemplates">
            <summary>
            Render templates for all the currently registered common DaoProxyRegistrations
            </summary>
        </member>
        <member name="P:Bam.Net.Server.ReflectionLoader.TypesToLoad">
            <summary>
            The names of types to load
            </summary>
        </member>
        <member name="P:Bam.Net.Server.ReflectionLoader.AssemblySearchPatterns">
            <summary>
            The search pattern used to identify assembly
            files
            </summary>
        </member>
        <member name="P:Bam.Net.Server.ReflectionLoader.Paths">
            <summary>
            A list of directory paths to search
            </summary>
        </member>
        <member name="P:Bam.Net.Server.ReflectionLoader.SearchClassNames">
            <summary>
            If true, Load will do .GetTypes().Where(...)
            </summary>
        </member>
        <member name="T:Bam.Net.Server.Renderers.CompiledDustTemplate">
            <summary>
            Represents the compiled result of a dust tempalte.  Dust.js will 
            compile dust templates to javascript.  The compilation process
            can take time depending on the size of the template.  This class
            saves the result in a json file along with a hash of the original
            source to determine if compilation is necessary.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Renderers.AppDustRenderer.CompiledTemplates">
            <summary>
            All application compiled dust templates including Server level
            layouts, templates and app custom and type templates
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Renderers.AppDustRenderer.CompiledLayoutTemplates">
            <summary>
            Represents the compiled javascript result of doing dust.compile
            against all the files found in ~s:/common/views/layouts.
            </summary>
        </member>
        <member name="T:Bam.Net.Server.Renderers.CommonDustRenderer">
            <summary>
            The renderer used to render the results of a 
            common (server level) dust template provided a given object
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Renderers.CommonDustRenderer.CompiledTemplates">
            <summary>
            Represents the compiled javascript result of doing dust.compile
            against all the files found in ~s:/common/views.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Renderers.CommonDustRenderer.CompiledLayoutTemplates">
            <summary>
            Represents the compiled javascript result of doing dust.compile
            against all the files found in ~s:/common/views/layouts.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Renderers.CommonDustRenderer.CompiledCommonTemplates">
            <summary>
            Represents the compiled javascript result of doing dust.compile
            against all the files found in ~s:/dust/layouts.
            </summary>
        </member>
        <member name="M:Bam.Net.Server.Renderers.CommonDustRenderer.RenderLayout(Bam.Net.Server.LayoutModel,System.IO.Stream)">
            <summary>
            Render the specified LayoutModel to the specifie output Stream
            </summary>
            <param name="toRender"></param>
            <param name="output"></param>
        </member>
        <member name="T:Bam.Net.Server.Renderers.CommonTemplateRenderer">
            <summary>
            The renderer used to render a template for 
            a given object.  In other words writes
            the default template for an object.
            </summary>
        </member>
        <member name="M:Bam.Net.Server.Renderers.CommonTemplateRenderer.Render(System.Object,System.IO.Stream)">
            <summary>
            Writes a FieldSet for the specified object toRender.
            </summary>
            <param name="toRender"></param>
            <param name="output"></param>
        </member>
        <member name="M:Bam.Net.Server.Renderers.HtmlRenderer.Render">
            <summary>
            Render the response to the output stream of ExecutionRequest.Response
            </summary>
        </member>
        <member name="E:Bam.Net.Server.Renderers.RendererFactory.CreatingRenderer">
            <summary>
            The event that fires before resolving the renderer for the current request
            </summary>
        </member>
        <member name="M:Bam.Net.Server.Renderers.Renderer.Respond(Bam.Net.ServiceProxy.ExecutionRequest)">
            <summary>
            Sets the content type then calls Render(request.Result, request.Response.OutputStream);
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Bam.Net.Server.Rest.RestResponder.Post(Bam.Net.ServiceProxy.IHttpContext)">
            <summary>
            Create an entry for the specified body
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Server.Rest.RestResponse">
            <summary>
            Encapsulates a response to a rest request
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Rest.RestResponse.Success">
            <summary>
            True if the request succeeded
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Rest.RestResponse.Message">
            <summary>
            The failure message or null on success
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Rest.RestResponse.Data">
            <summary>
            The result of the request
            </summary>
        </member>
        <member name="T:Bam.Net.Server.RouteParser">
            <summary>
            Utiltiy to parse routes based on a token format.
            </summary>
            <remarks>
            Casing doesn't matter!
            </remarks>
            <example>
            <code>
            var parser = new RouteParser("{protocol}://mydomain.com/{itemCategory}/{itemId}");
            var variables = parser.Variables; //should be .Count == 3
            var values = parser.ParseRouteInstance("https://mydomain.com/foo/1");
            //values = { { "protocol" => "https"}, { "itemCategory" => "foo"}, { "itemId" => "1" } }
            </code>
            </example>
        </member>
        <member name="P:Bam.Net.Server.RouteParser.RouteFormat">
            <summary>
            This is the route template that values are extracted based on.
            </summary>
            <value>
            A string containing variables denoted by the <c>VariableStartChar</c> and the <c>VariableEndChar</c>
            </value>
        </member>
        <member name="P:Bam.Net.Server.RouteParser.VariableStartChar">
            <summary>
            This is the character that denotes the beginning of a variable name.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.RouteParser.VariableEndChar">
            <summary>
            This is the character that denotes the end of a variable name.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.RouteParser.Variables">
            <summary>
            A hash set of all variable names parsed from the <c>RouteFormat</c>.
            </summary>
        </member>
        <member name="M:Bam.Net.Server.RouteParser.ParseRouteFormat">
            <summary>
            Initialize the Variables set based on the <c>RouteFormat</c>
            </summary>
        </member>
        <member name="M:Bam.Net.Server.RouteParser.ParseRouteInstance(System.String)">
            <summary>
            Extract variable values from a given instance of the route you're trying to parse.
            </summary>
            <param name="routeInstance">The route instance.</param>
            <returns>A dictionary of Variable names mapped to values.</returns>
        </member>
        <member name="M:Bam.Net.Server.RouteParser.SetVariable(System.String,System.String,System.String)">
            <summary>
            Replace a variable in the <c>RouteFormat</c> with a specified value.
            </summary>
            <param name="variableName">The variable name to replace.</param>
            <param name="variableValue">The value to replace with.</param>
            <param name="workingRoute">An 'in progress' route that may contain values that have already been replaced.</param>
            <returns>A <c>workingRoute</c></returns>
        </member>
        <member name="M:Bam.Net.Server.Rpc.RpcMessage.Parse(System.String)">
            <summary>
            Parse the Json as an RpcMessage the 
            specific type of the message will depend
            on the json itself as described here http://www.jsonrpc.org/specification
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Server.Rpc.RpcNotification.Params">
            <summary>
            The parameters.  This object will be either
            a JObject or JArray as indicated by the state
            of RpcParams
            </summary>
        </member>
        <member name="T:Bam.Net.Server.Rpc.RpcParameters.Structure">
            <summary>
            Describes the parameters as being 
            by Position or by name
            </summary>
        </member>
        <member name="M:Bam.Net.Server.Rpc.RpcRequest.Execute">
            <summary>
            Execute the request and return the response
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Rpc.RpcResponse.GetOutput">
            <summary>
            Get the object/value intended to be rendered to the
            output stream as json.  This method exists to 
            enable the RpcBatch to return an array and the RpcRequest
            to return a single RpcResponse
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Includes.GetScriptTags">
            <summary>
            Renders the Scripts as a series of html script tags
            with the src attributes set to the value of each 
            Script string and the type attribute set to 
            "text/javascript"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.Includes.GetStyleSheetLinkTags">
            <summary>
            Renders the Css as a series of link tags
            </summary>
            <returns></returns>
        </member>
        <member name="F:Bam.Net.Server.InitializeFrom.Resource">
            <summary>
            Initialize from the embedded resource file 
            that comes with the Bam system
            </summary>
        </member>
        <member name="F:Bam.Net.Server.InitializeFrom.ZipPath">
            <summary>
            Initialize from a zip file
            specified path
            </summary>
        </member>
        <member name="M:Bam.Net.Server.LayoutConf.#ctor">
            <summary>
            Required for deserialization
            </summary>
        </member>
        <member name="T:Bam.Net.Server.LayoutModel">
            <summary>
            Model used to write the default application layout
            for an application
            </summary>
        </member>
        <member name="P:Bam.Net.Server.LayoutModel.DomApplicationId">
            <summary>
            Used to sanitize the app name
            </summary>
        </member>
        <member name="T:Bam.Net.Server.BamConf">
            <summary>
            Configuratoin for the BamServer
            </summary>
        </member>
        <member name="F:Bam.Net.Server.BamConf.ContentRootConfigKey">
            <summary>
            The key in the app.config to look for the ContentRoot value
            to use for the server
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.Fs">
            <summary>
            Server content fs root
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.GenerateDao">
            <summary>
            If true the BamServer will generate Data Access Objects 
            for any *.db.js files it finds
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.ServiceSearchPattern">
            <summary>
            The search pattern used to find assemblies
            that contain services that should be loaded
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.DaoSearchPattern">
            <summary>
            The file search pattern used to filter 
            assemblies for Dao registration
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.ContentRoot">
            <summary>
            The root of the filesystem that will be served
            </summary>
        </member>
        <member name="M:Bam.Net.Server.BamConf.AddProxyAlias(System.String,System.Type)">
            <summary>
            Add an alias for the specified Type
            </summary>
            <param name="alias"></param>
            <param name="typeToAlias"></param>
        </member>
        <member name="P:Bam.Net.Server.BamConf.LoggerPaths">
            <summary>
            Directory paths to search for ILogger implementations
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.LoggerSearchPattern">
            <summary>
            The file search pattern used to 
            load assemblies that contain ILogger implementations
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.AppConfigs">
            <summary>
            Represents the configs for each application found in ~s:/apps 
            (where each subdirectory is assumed to be a Bam application)
            </summary>
        </member>
        <member name="P:Bam.Net.Server.BamConf.Item(System.String)">
            <summary>
            Get the AppConf for the specified appName
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.BamConf.InitializeAppConfigs">
            <summary>
            Deserializes each appConf found in subdirectories of
            the ~s:/apps folder.  For example, if there is a subfolder named
            Monkey in ~s:/apps then this method will search for ~s:/apps/Monkey/appConf.json
            then ~s:/apps/Monkey/appConf.yaml if the json file isn't found.  If neither
            is found a new AppConf is created and serialized to the json file
            specified above.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.BamConf.Load(System.String)">
            <summary>
            Load the BamConf from one of BamConf.json, BamConf.yaml, BamConf.xml
            or the Default configuration file whichever is found first in that order.  Default 
            will always be provided and will never return null.  A json config will be created
            if no config is found of any of the formats json, yaml or xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.BamConf.Save(System.String,System.Boolean,Bam.Net.Server.ConfFormat)">
            <summary>
            Saves the current BamConf into the specified root
            </summary>
            <param name="rootDir">The directory to save into</param>
            <param name="overwrite">If true, overwrite any existing file</param>
            <param name="format">The file format to use, will affect the resulting file extension</param>
        </member>
        <member name="T:Bam.Net.Server.ContentResponder">
            <summary>
            The primary responder for all content files found in ~s:/ (defined as BamServer.ContentRoot)
            </summary>
        </member>
        <member name="P:Bam.Net.Server.ContentResponder.Root">
            <summary>
            The server content root path, not to be confused with the 
            application root which should be [Root]\apps\[appName]
            </summary>
        </member>
        <member name="E:Bam.Net.Server.ContentResponder.CommonTemplateRendererInitializing">
            <summary>
            The event that fires when templates are being initialized.
            This occurs after file system initialization
            </summary>
        </member>
        <member name="E:Bam.Net.Server.ContentResponder.CommonTemplateRendererInitialized">
            <summary>
            The event that fires when templates have completed initialization.
            </summary>
        </member>
        <member name="M:Bam.Net.Server.ContentResponder.InitializeAppResponders">
            <summary>
            Initialize all the AppContentResponders for the 
            apps found in the ~s:/apps folder
            </summary>
        </member>
        <member name="M:Bam.Net.Server.ContentResponder.GetAppIncludes(Bam.Net.Server.AppConf)">
            <summary>
            Gets the Includes for the specified AppConf.  Also adds
            the init.js and all viewModel .js files.
            </summary>
            <param name="appConf"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Server.ServiceProxyResponder">
            <summary>
            Responder responsible for generating service proxies
            and responding to service proxy requests
            </summary>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.AddAppService``1(System.String,``0)">
            <summary>
            Add the specified instance to the specified appName
            </summary>
            <typeparam name="T"></typeparam>
            <param name="appName"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.AddCommonService``1(``0)">
            <summary>
            Add the specified instance as a service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.AddCommonService(System.Object)">
            <summary>
            Add the specified instance as an executor
            </summary>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.AddCommonService(System.Type,System.Object)">
            <summary>
            Add the specified instance as an executor
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.RemoveCommonService``1">
            <summary>
            Remove the executor of the specified generic type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.RemoveCommonService(System.Type)">
            <summary>
            Remove the executor of the specified type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.RemoveCommonService(System.String)">
            <summary>
            Remove the executor with the specified className
            </summary>
            <param name="className"></param>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.Contains``1">
            <summary>
            Returns true if the specified generic type has 
            been added as an executor
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.Contains(System.Type)">
            <summary>
            Returns true if the specified type has been 
            added as an executor
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Server.ServiceProxyResponder.CommonServices">
            <summary>
            List of service class names
            </summary>
        </member>
        <member name="M:Bam.Net.Server.ServiceProxyResponder.MayRespond(Bam.Net.ServiceProxy.IHttpContext)">
            <summary>
            Always returns true for a ServiceProxyResponder as
            this responder is last in line.
            </summary>
            <param name="context"></param>
        </member>
        <member name="E:Bam.Net.Server.ResponderBase.Responded">
            <summary>
            The event that fires when a response is sent
            </summary>
        </member>
        <member name="E:Bam.Net.Server.ResponderBase.NotResponded">
            <summary>
            The event that fires when a response is not sent
            </summary>
        </member>
        <member name="M:Bam.Net.Server.ResponderBase.MayRespond(Bam.Net.ServiceProxy.IHttpContext)">
            <summary>
            Returns true if the AbsolutePath of the requested
            Url starts with the name of the current class.  Extenders
            will provide different implementations based on their
            requirements
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Bam.Net.Server.ResponderEventHandler">
            <summary>
            The delegate used to define responder events
            </summary>
            <param name="responder"></param>
            <param name="context"></param>
        </member>
        <member name="P:Bam.Net.Server.ResponderList.HandlingResponder">
            <summary>
            The responder that handled the request if any
            </summary>
        </member>
        <member name="T:Bam.Net.Server.DaoResponder">
            <summary>
            The responder responsible for generating dynamic 
            proxy javascripts that enable client side code to
            execute server side .Net Dao methods over Ajax.
            </summary>
        </member>
        <member name="P:Bam.Net.Server.DaoResponder.CommonDaoProxyRegistrations">
            <summary>
            The DaoProxyRegistrations keyed by connectionName/contextName
            </summary>
        </member>
        <member name="P:Bam.Net.Server.DaoResponder.AppDaoProxyRegistrations">
            <summary>
            The DaoProxyRegistrations keyed by application name
            </summary>
        </member>
        <member name="T:Bam.Net.Server.Tvg.GlooRegistryProviderAttribute">
            <summary>
            Attribute used to denote a method 
            that will return a GlooRegistry
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Tvg.SimpleServer`1.HostPrefixes">
            <summary>
            An array of hosts that this server will respond to
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Tvg.SimpleServer`1.Responder">
            <summary>
            The responder
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Tvg.SimpleServer`1.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Tvg.SimpleServer`1.FileSystemWatchers">
            <summary>
            The FileSystemWatchers; one each for create, changed and renamed
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Tvg.SimpleServer`1.MonitorDirectories">
            <summary>
            An array of directories to monitor for
            created, changed or renamed files
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Tvg.SimpleServer`1.CreatedOrChangedHandler">
            <summary>
            The delegate that will be subscribed to the Create
            and Changed handler of the underlying FileSystemWatcher(s)
            </summary>
        </member>
        <member name="P:Bam.Net.Server.Tvg.SimpleServer`1.RenamedHandler">
            <summary>
            The delegate that will be subscribed to the renamed event of the underlying
            FileSystemWatcher(s)
            </summary>
        </member>
        <member name="M:Bam.Net.Server.Tvg.SimpleServer`1.WireEventHandlers">
            <summary>
            Wire the event handlers
            </summary>
        </member>
    </members>
</doc>
