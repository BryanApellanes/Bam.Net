<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bam.Net.Analytics</name>
    </assembly>
    <members>
        <member name="M:Bam.Net.Analytics.Category.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Category.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Category table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Where(System.Func{Bam.Net.Analytics.CategoryColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.CategoryColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a CategoryColumns 
            and returns a QueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;CategoryColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Category.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Category instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Category.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Category.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Categories
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Category.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CategoryColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a CategoryColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CategoryColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the ClickCounter table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Where(System.Func{Bam.Net.Analytics.ClickCounterColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.ClickCounterColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a ClickCounterColumns 
            and returns a QueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;ClickCounterColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single ClickCounter instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.ClickCounter.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.ClickCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of ClickCounters
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.ClickCounter.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ClickCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a ClickCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ClickCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Counter table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Where(System.Func{Bam.Net.Analytics.CounterColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.CounterColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a CounterColumns 
            and returns a QueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;CounterColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Counter instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Counter.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Counter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Counters
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Counter.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a CounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Crawler table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Where(System.Func{Bam.Net.Analytics.CrawlerColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.CrawlerColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a CrawlerColumns 
            and returns a QueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;CrawlerColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Crawler instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Crawler.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Crawler.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Crawlers
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Crawler.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CrawlerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a CrawlerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CrawlerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the CustomTimer table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Where(System.Func{Bam.Net.Analytics.CustomTimerColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.CustomTimerColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a CustomTimerColumns 
            and returns a QueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;CustomTimerColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single CustomTimer instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.CustomTimer.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.CustomTimer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of CustomTimers
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.CustomTimer.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.CustomTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a CustomTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between CustomTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Domain table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Where(System.Func{Bam.Net.Analytics.DomainColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.DomainColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a DomainColumns 
            and returns a QueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;DomainColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Domain instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Domain.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Domain.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Domains
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Domain.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.DomainColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a DomainColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between DomainColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Feature table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Where(System.Func{Bam.Net.Analytics.FeatureColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.FeatureColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a FeatureColumns 
            and returns a QueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;FeatureColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Feature instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Feature.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Feature.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Features
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Feature.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FeatureColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a FeatureColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FeatureColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Fragment table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Where(System.Func{Bam.Net.Analytics.FragmentColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.FragmentColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a FragmentColumns 
            and returns a QueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;FragmentColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Fragment instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Fragment.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Fragment.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Fragments
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Fragment.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.FragmentColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a FragmentColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between FragmentColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Image.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Image table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Where(System.Func{Bam.Net.Analytics.ImageColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.ImageColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a ImageColumns 
            and returns a QueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;ImageColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Image.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Image instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Image.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Image.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Images
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Image.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the ImageTag table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Where(System.Func{Bam.Net.Analytics.ImageTagColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.ImageTagColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a ImageTagColumns 
            and returns a QueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;ImageTagColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single ImageTag instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.ImageTag.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.ImageTag.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of ImageTags
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.ImageTag.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ImageTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a ImageTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ImageTagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the LoadCounter table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Where(System.Func{Bam.Net.Analytics.LoadCounterColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.LoadCounterColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LoadCounterColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;LoadCounterColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single LoadCounter instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.LoadCounter.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.LoadCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of LoadCounters
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoadCounter.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the LoadTimer table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Where(System.Func{Bam.Net.Analytics.LoadTimerColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.LoadTimerColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LoadTimerColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;LoadTimerColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single LoadTimer instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.LoadTimer.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.LoadTimer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of LoadTimers
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoadTimer.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoadTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LoadTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoadTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the LoginCounter table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Where(System.Func{Bam.Net.Analytics.LoginCounterColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.LoginCounterColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a LoginCounterColumns 
            and returns a QueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;LoginCounterColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single LoginCounter instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.LoginCounter.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.LoginCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of LoginCounters
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.LoginCounter.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.LoginCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a LoginCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between LoginCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the MethodCounter table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Where(System.Func{Bam.Net.Analytics.MethodCounterColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.MethodCounterColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a MethodCounterColumns 
            and returns a QueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;MethodCounterColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single MethodCounter instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.MethodCounter.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.MethodCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of MethodCounters
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.MethodCounter.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodCounterColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodCounterColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodCounterColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the MethodTimer table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Where(System.Func{Bam.Net.Analytics.MethodTimerColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.MethodTimerColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a MethodTimerColumns 
            and returns a QueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;MethodTimerColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single MethodTimer instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.MethodTimer.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.MethodTimer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of MethodTimers
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.MethodTimer.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.MethodTimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a MethodTimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between MethodTimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Path.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Path table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Where(System.Func{Bam.Net.Analytics.PathColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.PathColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PathColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;PathColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Path.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Path instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Path.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Path.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Paths
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Path.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PathColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PathColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PathColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Port.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Port table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Where(System.Func{Bam.Net.Analytics.PortColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.PortColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a PortColumns 
            and returns a QueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;PortColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Port.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Port instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Port.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Port.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Ports
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Port.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.PortColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a PortColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between PortColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Protocol table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Where(System.Func{Bam.Net.Analytics.ProtocolColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.ProtocolColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a ProtocolColumns 
            and returns a QueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;ProtocolColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Protocol instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Protocol.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Protocol.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Protocols
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Protocol.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.ProtocolColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a ProtocolColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between ProtocolColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the QueryString table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Where(System.Func{Bam.Net.Analytics.QueryStringColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.QueryStringColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a QueryStringColumns 
            and returns a QueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;QueryStringColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single QueryString instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.QueryString.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.QueryString.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of QueryStrings
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.QueryString.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.QueryStringColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a QueryStringColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between QueryStringColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Tag table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Where(System.Func{Bam.Net.Analytics.TagColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.TagColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a TagColumns 
            and returns a QueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;TagColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Tag instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Tag.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Tag.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Tags
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Tag.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Timer table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Where(System.Func{Bam.Net.Analytics.TimerColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.TimerColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a TimerColumns 
            and returns a QueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;TimerColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Timer instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Timer.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Timer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Timers
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Timer.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.TimerColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a TimerColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between TimerColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Url.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the Url table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Where(System.Func{Bam.Net.Analytics.UrlColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.UrlColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UrlColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;UrlColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Url.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single Url instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.Url.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.Url.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of Urls
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Url.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the UrlTag table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Where(System.Func{Bam.Net.Analytics.UrlTagColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.UrlTagColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UrlTagColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;UrlTagColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UrlTag instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.UrlTag.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.UrlTag.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of UrlTags
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.UrlTag.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UrlTagColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UrlTagColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UrlTagColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.GetUniqueFilter">
            <summary>
            Gets a query filter that should uniquely identify
            the current instance.  The default implementation
            compares the Id/key field to the current instance's.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.LoadAll(Bam.Net.Data.Database)">
            <summary>
            Return every record in the UserIdentifier table.
            </summary>
            <param name="database">
            The database to load from or null
            </param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Where(System.Func{Bam.Net.Analytics.UserIdentifierColumns,Bam.Net.Data.QueryFilter{Bam.Net.Analytics.UserIdentifierColumns}},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A Func delegate that recieves a UserIdentifierColumns 
            and returns a QueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Where(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the results. 
            </summary>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Where(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            This method is intended to respond to client side Qi queries.
            Use of this method from .Net should be avoided in favor of 
            one of the methods that take a delegate of type
            WhereDelegate&lt;UserIdentifierColumns&gt;.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.GetOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.OneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.GetOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Get one entry matching the specified filter.  If none exists 
            one will be created; success will depend on the nullability
            of the specified columns.
            </summary>
            <param name="where"></param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.OneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query that should return only one result.  If more
            than one result is returned a MultipleEntriesFoundException will 
            be thrown.  This method is most commonly used to retrieve a
            single UserIdentifier instance by its Id/Key value
            </summary>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Bam.Net.Analytics.UserIdentifier.OneWhere(Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)" -->
        <member name="M:Bam.Net.Analytics.UserIdentifier.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.FirstOneWhere(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.FirstOneWhere(Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Shortcut for Top(1, where, orderBy, database)
            </summary>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number
            of values. This method will issue a sql TOP clause so only the 
            specified number of values will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Top(System.Int32,Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.OrderBy{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="database"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Top(System.Int32,Bam.Net.Data.QueryFilter,Bam.Net.Data.OrderBy{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Top(System.Int32,Bam.Net.Data.Qi.QiQuery,Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the specified number of values.  This method
            will issue a sql TOP clause so only the specified number of values
            will be returned.
            of values
            </summary>
            <param name="count">The number of values to return.
            This value is used in the sql query so no more than this 
            number of values will be returned by the database.
            </param>
            <param name="where">A QueryFilter used to filter the 
            results
            </param>
            <param name="orderBy">
            Specifies what column and direction to order the results by
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Count(Bam.Net.Data.Database)">
            <summary>
            Return the count of UserIdentifiers
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.UserIdentifier.Count(Bam.Net.Data.WhereDelegate{Bam.Net.Analytics.UserIdentifierColumns},Bam.Net.Data.Database)">
            <summary>
            Execute a query and return the number of results
            </summary>
            <param name="where">A WhereDelegate that recieves a UserIdentifierColumns 
            and returns a IQueryFilter which is the result of any comparisons
            between UserIdentifierColumns and other values
            </param>
            <param name="db"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.Classifier.Probability(System.String,System.String)">
            <summary>
            When implemented, should return the probablity that the specified
            document is in the specified category
            </summary>
            <param name="documentString"></param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.Classifier.Train(System.String,System.String)">
            <summary>
            Train the classifier assigning the specified doc to the 
            specified category
            </summary>
            <param name="doc"></param>
            <param name="category"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.Classifier.DocumentCount">
            <summary>
            Total number of documents (corresponds to totalcount in Collective Intelligence chapter 6)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.Classifier.DocumentsInCategoryCount(System.String)">
            <summary>
            Total number of documents in a category (corresponds to catcount in Collective Intelligence chapter 6)
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.Classifier.IncreaseFeature(System.String,System.String)">
            <summary>
            Increase the count of a feature/category pair
            </summary>
            <param name="feature"></param>
            <param name="category"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.Classifier.GetCategory(System.String)">
            <summary>
            Get a Category entry for the specified category, creating it if necessary
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="P:Bam.Net.Analytics.Classification.Classifier.FeatureExtractor">
            <summary>
            The delegate used for extracting features from a
            given string.  Default is ExtractWords.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.Classifier.ExtractWords(System.String)">
            <summary>
            The default implementation of GetFeatures
            </summary>
            <param name="docContent"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.FisherClassifier.SetMinimum(System.String,System.Single)">
            <summary>
            Sets the minimum probability score for the specified
            category.  The probablity score for a document must
            be greater than the specified minimum for the category
            for the document to be classified as being in 
            the category.
            </summary>
            <param name="category"></param>
            <param name="min"></param>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.NaiveBayesClassifier.Classify(System.String,System.String)">
            <summary>
            Attempts to classify the specified document taking into 
            consideration the threshold set by SetThreshold, default is 1.
            </summary>
            <param name="documentString"></param>
            <param name="defaultCategory"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Analytics.Classification.NaiveBayesClassifier.SetThreshold(System.String,System.Single)">
            <summary>
            For a new document to be classified into a particular category, its 
            probability must be a specified amount larger than the probablity
            for any other category.  This specified amount is the threshold.
            </summary>
            <param name="category"></param>
            <param name="threshold"></param>
        </member>
        <member name="T:Bam.Net.Analytics.Diff.Item">
            <summary>details of one difference.</summary>
        </member>
        <member name="F:Bam.Net.Analytics.Diff.Item.StartA">
            <summary>Start Line number in Data A.</summary>
        </member>
        <member name="F:Bam.Net.Analytics.Diff.Item.StartB">
            <summary>Start Line number in Data B.</summary>
        </member>
        <member name="F:Bam.Net.Analytics.Diff.Item.deletedA">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="F:Bam.Net.Analytics.Diff.Item.insertedB">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="T:Bam.Net.Analytics.Diff.SMSRD">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.Diff.DiffText(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Bam.Net.Analytics.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Char[])">
            <summary>
            Find the difference in 2 text documents, comparing by textlines.
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. This hash-value is computed by storing all
            textlines into a common hashtable so i can find dublicates in there, and generating a 
            new number each time a new textline is inserted.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Bam.Net.Analytics.Diff.DiffInt(System.Int32[],System.Int32[])">
            <summary>
            Find the difference in 2 arrays of integers.
            </summary>
            <param name="ArrayA">A-version of the numbers (usualy the old one)</param>
            <param name="ArrayB">B-version of the numbers (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Bam.Net.Analytics.Diff.DiffCodes(System.String,System.Collections.Hashtable,System.Boolean,System.Boolean,System.Boolean,System.Char[])">
            <summary>
            This function converts all textlines of the text into unique numbers for every unique textline
            so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized hashtable is used for storing all ever used textlines.</param>
            <param name="trimSpace">ignore leading and trailing space characters</param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:Bam.Net.Analytics.Diff.SMS(Bam.Net.Analytics.DiffData,System.Int32,System.Int32,Bam.Net.Analytics.DiffData,System.Int32,System.Int32)">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:Bam.Net.Analytics.Diff.LCS(Bam.Net.Analytics.DiffData,System.Int32,System.Int32,Bam.Net.Analytics.DiffData,System.Int32,System.Int32)">
            <summary>
            This is the divide-and-conquer implementation of the longes common-subsequence (LCS) 
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
        </member>
        <member name="M:Bam.Net.Analytics.Diff.CreateDiffs(Bam.Net.Analytics.DiffData,Bam.Net.Analytics.DiffData)">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.  
            </summary>
            dynamic array
        </member>
        <member name="T:Bam.Net.Analytics.DiffData">
            <summary>Data on one input file being compared.  
            </summary>
        </member>
        <member name="F:Bam.Net.Analytics.DiffData.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:Bam.Net.Analytics.DiffData.data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:Bam.Net.Analytics.DiffData.modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:Bam.Net.Analytics.DiffData.#ctor(System.Int32[])">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="data">reference to the buffer</param>
        </member>
        <member name="M:Bam.Net.Analytics.DiffReport.Save(System.String)">
            <summary>
            Saves this Report to the specified file overwriting if the file exists.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Bam.Net.Analytics.BaseCrawler.ExtractTargets(System.String)">
            <summary>
            When implemented by a derived class will extract
            more targets to be processed from the specified target.  
            (Think filepath or url)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Bam.Net.Analytics.ImageCrawler.ProcessTarget(System.String)">
            <summary>
            Reads the target and saves the url of any img tag it finds
            </summary>
            <param name="target"></param>
        </member>
    </members>
</doc>
