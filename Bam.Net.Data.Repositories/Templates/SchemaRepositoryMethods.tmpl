		
		public @(Model.Type.FullName) GetOne@(Model.Type.Name)Where(WhereDelegate<@(Model.Type.Name)Columns> where)
		{
			Type wrapperType = GetWrapperType<@(Model.Type.FullName)>();
			return (@(Model.Type.FullName))@(Model.DaoNamespace).@(Model.Type.Name).GetOneWhere(where, Database).CopyAs(wrapperType, this);
		}

		public @(Model.Type.FullName) One@(Model.Type.Name)Where(WhereDelegate<@(Model.Type.Name)Columns> where)
        {
            Type wrapperType = GetWrapperType<@(Model.Type.FullName)>();
            return (@(Model.Type.FullName))@(Model.DaoNamespace).@(Model.Type.Name).OneWhere(where, Database).CopyAs(wrapperType, this);
        }

		public IEnumerable<@(Model.Type.FullName)> Top@(Model.Type.Name.Pluralize())Where(int count, WhereDelegate<@(Model.Type.Name)Columns> where)
        {
            return Wrap<@(Model.Type.FullName)>(@(Model.DaoNamespace).@(Model.Type.Name).Top(count, where, Database));
        }
		
        public IEnumerable<@(Model.Type.FullName)> @(Model.Type.Name.Pluralize())Where(WhereDelegate<@(Model.Type.Name)Columns> where)
        {
            return Query<@(Model.Type.FullName)>(where(new @(Model.Type.Name)Columns()));
        }
	    
		public long Count@(Model.Type.Name.Pluralize())()
        {
            return @(Model.DaoNamespace).@(Model.Type.Name).Count(Database);
        }

        public long Count@(Model.Type.Name.Pluralize())Where(WhereDelegate<@(Model.Type.Name)Columns> where)
        {
            return @(Model.DaoNamespace).@(Model.Type.Name).Count(where, Database);
        }
        
        public async Task BatchQuery@(Model.Type.Name.Pluralize())(int batchSize, WhereDelegate<@(Model.Type.Name)Columns> where, Action<IEnumerable<@(Model.Type.FullName)>> batchProcessor)
        {
            await @(Model.DaoNamespace).@(Model.Type.Name).BatchQuery(batchSize, where, (batch) =>
            {
				batchProcessor(Wrap<@(Model.Type.FullName)>(batch));
            }, Database);
        }

		
        public async Task BatchAll@(Model.Type.Name.Pluralize())(int batchSize, Action<IEnumerable<@(Model.Type.FullName)>> batchProcessor)
        {
            await @(Model.DaoNamespace).@(Model.Type.Name).BatchAll(batchSize, (batch) =>
            {
				batchProcessor(Wrap<@(Model.Type.FullName)>(batch));
            }, Database);
        }

