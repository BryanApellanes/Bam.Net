/*
	This file was generated and should not be modified directly
*/
// Model is Table
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading.Tasks;
using Bam.Net;
using Bam.Net.Data;
using Bam.Net.Data.Qi;

namespace @Namespace
{
	// schema = @Schema.Name
	// connection Name = @Model.ConnectionName
	[Serializable]
	[Bam.Net.Data.Table("@Model.Name", "@Schema.Name")]
	public partial class @Model.ClassName: Dao
	{
		public @(Model.ClassName)():base()
		{
			this.SetKeyColumnName();
			this.SetChildren();
		}

		public @(Model.ClassName)(DataRow data)
			: base(data)
		{
			this.SetKeyColumnName();
			this.SetChildren();
		}

		public @(Model.ClassName)(Database db)
			: base(db)
		{
			this.SetKeyColumnName();
			this.SetChildren();
		}

		public @(Model.ClassName)(Database db, DataRow data)
			: base(db, data)
		{
			this.SetKeyColumnName();
			this.SetChildren();
		}

		public static implicit operator @(Model.ClassName)(DataRow data)
		{
			return new @(Model.ClassName)(data);
		}

		private void SetChildren()
		{
			@foreach(ForeignKeyColumn fk in Model.ReferencingForeignKeys)
			{
				WriteAddToChildDaoCollection(fk);
			}	 
			@foreach(XrefInfo xref in Schema.LeftXrefsFor(Model.Name))
			{
				WriteAddToChildDaoCollection(xref);
			} 
			@foreach(XrefInfo xref in Schema.RightXrefsFor(Model.Name))
			{
				WriteAddToChildDaoCollection(xref);
			}

		}

		@foreach(Column column in Model.Columns)
		{
			WriteClassProperty(column);
		}

		@{	
			int fkCount = 0;
		}
		@foreach(ForeignKeyColumn fk in Model.ForeignKeys)
		{
			fkCount++;
			WriteForeignKeyColumnProperty(fk, fkCount);
		}
				
		@foreach(ForeignKeyColumn fk in Model.ReferencingForeignKeys)
		{
			WriteReferencingList(fk);
		}
		
		@foreach(XrefInfo xref in Schema.LeftXrefsFor(Model.Name))
		{
			WriteXrefProperty(xref);
		}

		@foreach(XrefInfo xref in Schema.RightXrefsFor(Model.Name))
		{
			WriteXrefProperty(xref);
		} 
		/// <summary>
		/// Gets a query filter that should uniquely identify
		/// the current instance.  The default implementation
		/// compares the Id/key field to the current instance's.
		/// </summary> 
		public override IQueryFilter GetUniqueFilter()
		{
			if(UniqueFilterProvider != null)
			{
				return UniqueFilterProvider();
			}
			else
			{
				var colFilter = new @(Model.ClassName)Columns();
				return (colFilter.KeyColumn == IdValue);
			}			
		}

		/// <summary>
		/// Return every record in the @(Model.ClassName) table.
		/// </summary>
		/// <param name="database">
		/// The database to load from or null
		/// </param>
		public static @(Model.ClassName)Collection LoadAll(Database database = null)
		{
			SqlStringBuilder sql = new SqlStringBuilder();
			sql.Select<@(Model.ClassName)>();
			Database db = database ?? Db.For<@(Model.ClassName)>();
			var results = new @(Model.ClassName)Collection(sql.GetDataTable(db));
			results.Database = db;
			return results;
		}

		public static async Task BatchAll(int batchSize, Action<IEnumerable<@(Model.ClassName)>> batchProcessor, Database database = null)
		{
			await Task.Run(async ()=>
			{
				@(Model.ClassName)Columns columns = new @(Model.ClassName)Columns();
				var orderBy = Bam.Net.Data.Order.By<@(Model.ClassName)Columns>(c => c.KeyColumn, Bam.Net.Data.SortOrder.Ascending);
				var results = Top(batchSize, (c) => c.KeyColumn > 0, orderBy, database);
				while(results.Count > 0)
				{
					await Task.Run(()=>
					{
						batchProcessor(results);
					});
					long topId = results.Select(d => d.Property<long>(columns.KeyColumn.ToString())).ToArray().Largest();
					results = Top(batchSize, (c) => c.KeyColumn > topId, orderBy, database);
				}
			});			
		}	 

		public static async Task BatchQuery(int batchSize, QueryFilter filter, Action<IEnumerable<@(Model.ClassName)>> batchProcessor, Database database = null)
		{
			await BatchQuery(batchSize, (c) => filter, batchProcessor, database);			
		}

		public static async Task BatchQuery(int batchSize, WhereDelegate<@(Model.ClassName)Columns> where, Action<IEnumerable<@(Model.ClassName)>> batchProcessor, Database database = null)
		{
			await Task.Run(async ()=>
			{
				@(Model.ClassName)Columns columns = new @(Model.ClassName)Columns();
				var orderBy = Bam.Net.Data.Order.By<@(Model.ClassName)Columns>(c => c.KeyColumn, Bam.Net.Data.SortOrder.Ascending);
				var results = Top(batchSize, where, orderBy, database);
				while(results.Count > 0)
				{
					await Task.Run(()=>
					{ 
						batchProcessor(results);
					});
					long topId = results.Select(d => d.Property<long>(columns.KeyColumn.ToString())).ToArray().Largest();
					results = Top(batchSize, (@(Model.ClassName)Columns)where(columns) && columns.KeyColumn > topId, orderBy, database);
				}
			});			
		}

		public static @(Model.ClassName) GetById(int id, Database database = null)
		{
			return GetById((long)id, database);
		}

		public static @(Model.ClassName) GetById(long id, Database database = null)
		{
			return OneWhere(c => c.KeyColumn == id, database);
		}

		public static @(Model.ClassName) GetByUuid(string uuid, Database database = null)
		{
			return OneWhere(c => Bam.Net.Data.Query.Where("Uuid") == uuid, database);
		}

		public static @(Model.ClassName) GetByCuid(string cuid, Database database = null)
		{
			return OneWhere(c => Bam.Net.Data.Query.Where("Cuid") == cuid, database);
		}

		public static @(Model.ClassName)Collection Query(QueryFilter filter, Database database = null)
		{
			return Where(filter, database);
		}
				
		public static @(Model.ClassName)Collection Where(QueryFilter filter, Database database = null)
		{
			WhereDelegate<@(Model.ClassName)Columns> whereDelegate = (c) => filter;
			return Where(whereDelegate, database);
		}

		/// <summary>
		/// Execute a query and return the results. 
		/// </summary>
		/// <param name="where">A Func delegate that recieves a @(Model.ClassName)Columns 
		/// and returns a QueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Where(Func<@(Model.ClassName)Columns, QueryFilter<@(Model.ClassName)Columns>> where, OrderBy<@(Model.ClassName)Columns> orderBy = null, Database database = null)
		{
			database = database ?? Db.For<@(Model.ClassName)>();
			return new @(Model.ClassName)Collection(database.GetQuery<@(Model.ClassName)Columns, @(Model.ClassName)>(where, orderBy), true);
		}
		
		/// <summary>
		/// Execute a query and return the results. 
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Where(WhereDelegate<@(Model.ClassName)Columns> where, Database database = null)
		{		
			database = database ?? Db.For<@(Model.ClassName)>();
			var results = new @(Model.ClassName)Collection(database, database.GetQuery<@(Model.ClassName)Columns, @(Model.ClassName)>(where), true);
			return results;
		}
		   
		/// <summary>
		/// Execute a query and return the results. 
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="orderBy">
		/// Specifies what column and direction to order the results by
		/// </param>
		/// <param name="database"></param>
		public static @(Model.ClassName)Collection Where(WhereDelegate<@(Model.ClassName)Columns> where, OrderBy<@(Model.ClassName)Columns> orderBy = null, Database database = null)
		{		
			database = database ?? Db.For<@(Model.ClassName)>();
			var results = new @(Model.ClassName)Collection(database, database.GetQuery<@(Model.ClassName)Columns, @(Model.ClassName)>(where, orderBy), true);
			return results;
		}

		/// <summary>
		/// This method is intended to respond to client side Qi queries.
		/// Use of this method from .Net should be avoided in favor of 
		/// one of the methods that take a delegate of type
		/// WhereDelegate&lt;@(Model.ClassName)Columns&gt;.
		/// </summary>
		/// <param name="where"></param>
		/// <param name="database"></param>
		public static @(Model.ClassName)Collection Where(QiQuery where, Database database = null)
		{
			var results = new @(Model.ClassName)Collection(database, Select<@(Model.ClassName)Columns>.From<@(Model.ClassName)>().Where(where, database));
			return results;
		}
				
		/// <summary>
		/// Get one entry matching the specified filter.  If none exists 
		/// one will be created; success will depend on the nullability
		/// of the specified columns.
		/// </summary>
		public static @(Model.ClassName) GetOneWhere(QueryFilter where, Database database = null)
		{
			var result = OneWhere(where, database);
			if(result == null)
			{
				result = CreateFromFilter(where, database);
			}

			return result;
		}

		/// <summary>
		/// Execute a query that should return only one result.  If more
		/// than one result is returned a MultipleEntriesFoundException will 
		/// be thrown.  
		/// </summary>
		/// <param name="where"></param>
		/// <param name="database"></param>
		public static @(Model.ClassName) OneWhere(QueryFilter where, Database database = null)
		{
			WhereDelegate<@(Model.ClassName)Columns> whereDelegate = (c) => where;
			var result = Top(1, whereDelegate, database);
			return OneOrThrow(result);
		}

		/// <summary>
		/// Get one entry matching the specified filter.  If none exists 
		/// one will be created; success will depend on the nullability
		/// of the specified columns.
		/// </summary>
		/// <param name="where"></param>
		/// <param name="database"></param>
		public static @(Model.ClassName) GetOneWhere(WhereDelegate<@(Model.ClassName)Columns> where, Database database = null)
		{
			var result = OneWhere(where, database);
			if(result == null)
			{
				@(Model.ClassName)Columns c = new @(Model.ClassName)Columns();
				IQueryFilter filter = where(c); 
				result = CreateFromFilter(filter, database);
			}

			return result;
		}

		/// <summary>
		/// Execute a query that should return only one result.  If more
		/// than one result is returned a MultipleEntriesFoundException will 
		/// be thrown.  This method is most commonly used to retrieve a
		/// single @Model.ClassName instance by its Id/Key value
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="database"></param>
		public static @(Model.ClassName) OneWhere(WhereDelegate<@(Model.ClassName)Columns> where, Database database = null)
		{
			var result = Top(1, where, database);
			return OneOrThrow(result);
		}
					 
		/// <summary>
		/// This method is intended to respond to client side Qi queries.
		/// Use of this method from .Net should be avoided in favor of 
		/// one of the methods that take a delegate of type
		/// WhereDelegate<@(Model.ClassName)Columns>.
		/// </summary>
		/// <param name="where"></param>
		/// <param name="database"></param>
		public static @(Model.ClassName) OneWhere(QiQuery where, Database database = null)
		{
			var results = Top(1, where, database);
			return OneOrThrow(results);
		}

		/// <summary>
		/// Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
		/// specified number of values will be returned.
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="database"></param>
		public static @(Model.ClassName) FirstOneWhere(WhereDelegate<@(Model.ClassName)Columns> where, Database database = null)
		{
			var results = Top(1, where, database);
			if(results.Count > 0)
			{
				return results[0];
			}
			else
			{
				return null;
			}
		}
		
		/// <summary>
		/// Execute a query and return the first result.  This method will issue a sql TOP clause so only the 
		/// specified number of values will be returned.
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="database"></param>
		public static @(Model.ClassName) FirstOneWhere(WhereDelegate<@(Model.ClassName)Columns> where, OrderBy<@(Model.ClassName)Columns> orderBy, Database database = null)
		{
			var results = Top(1, where, orderBy, database);
			if(results.Count > 0)
			{
				return results[0];
			}
			else
			{
				return null;
			}
		}

		/// <summary>
		/// Shortcut for Top(1, where, orderBy, database)
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="database"></param>
		public static @(Model.ClassName) FirstOneWhere(QueryFilter where, OrderBy<@(Model.ClassName)Columns> orderBy = null, Database database = null)
		{
			WhereDelegate<@(Model.ClassName)Columns> whereDelegate = (c) => where;
			var results = Top(1, whereDelegate, orderBy, database);
			if(results.Count > 0)
			{
				return results[0];
			}
			else
			{
				return null;
			}
		}

		/// <summary>
		/// Execute a query and return the specified number
		/// of values. This method will issue a sql TOP clause so only the 
		/// specified number of values will be returned.
		/// </summary>
		/// <param name="count">The number of values to return.
		/// This value is used in the sql query so no more than this 
		/// number of values will be returned by the database.
		/// </param>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="database"></param>
		public static @(Model.ClassName)Collection Top(int count, WhereDelegate<@(Model.ClassName)Columns> where, Database database = null)
		{
			return Top(count, where, null, database);
		}

		/// <summary>
		/// Execute a query and return the specified number of values.  This method
		/// will issue a sql TOP clause so only the specified number of values
		/// will be returned.
		/// </summary>
		/// <param name="count">The number of values to return.
		/// This value is used in the sql query so no more than this 
		/// number of values will be returned by the database.
		/// </param>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="orderBy">
		/// Specifies what column and direction to order the results by
		/// </param>
		/// <param name="database"></param>
		public static @(Model.ClassName)Collection Top(int count, WhereDelegate<@(Model.ClassName)Columns> where, OrderBy<@(Model.ClassName)Columns> orderBy, Database database = null)
		{
			@(Model.ClassName)Columns c = new @(Model.ClassName)Columns();
			IQueryFilter filter = where(c);         
			
			Database db = database ?? Db.For<@(Model.ClassName)>();
			QuerySet query = GetQuerySet(db); 
			query.Top<@(Model.ClassName)>(count);
			query.Where(filter);

			if(orderBy != null)
			{
				query.OrderBy<@(Model.ClassName)Columns>(orderBy);
			}

			query.Execute(db);
			var results = query.Results.As<@(Model.ClassName)Collection>(0);
			results.Database = db;
			return results;
		}

		public static @(Model.ClassName)Collection Top(int count, QueryFilter where, Database database)
		{
			return Top(count, where, null, database);
		}
		/// <summary>
		/// Execute a query and return the specified number of values.  This method
		/// will issue a sql TOP clause so only the specified number of values
		/// will be returned.
		/// of values
		/// </summary>
		/// <param name="count">The number of values to return.
		/// This value is used in the sql query so no more than this 
		/// number of values will be returned by the database.
		/// </param>
		/// <param name="where">A QueryFilter used to filter the 
		/// results
		/// </param>
		/// <param name="orderBy">
		/// Specifies what column and direction to order the results by
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Top(int count, QueryFilter where, OrderBy<@(Model.ClassName)Columns> orderBy = null, Database database = null)
		{
			Database db = database ?? Db.For<@(Model.ClassName)>();
			QuerySet query = GetQuerySet(db);
			query.Top<@(Model.ClassName)>(count);
			query.Where(where);

			if(orderBy != null)
			{
				query.OrderBy<@(Model.ClassName)Columns>(orderBy);
			}

			query.Execute(db);
			var results = query.Results.As<@(Model.ClassName)Collection>(0);
			results.Database = db;
			return results;
		}

		/// <summary>
		/// Execute a query and return the specified number of values.  This method
		/// will issue a sql TOP clause so only the specified number of values
		/// will be returned.
		/// of values
		/// </summary>
		/// <param name="count">The number of values to return.
		/// This value is used in the sql query so no more than this 
		/// number of values will be returned by the database.
		/// </param>
		/// <param name="where">A QueryFilter used to filter the 
		/// results
		/// </param>
		/// <param name="orderBy">
		/// Specifies what column and direction to order the results by
		/// </param>
		/// <param name="db"></param>
		public static @(Model.ClassName)Collection Top(int count, QiQuery where, Database database = null)
		{
			Database db = database ?? Db.For<@(Model.ClassName)>();
			QuerySet query = GetQuerySet(db);
			query.Top<@(Model.ClassName)>(count);
			query.Where(where);
			query.Execute(db);
			var results = query.Results.As<@(Model.ClassName)Collection>(0);
			results.Database = db;
			return results;
		}

		/// <summary>
		/// Return the count of @(Model.ClassName.Pluralize())
		/// </summary>
		public static long Count(Database database = null)
        {
			Database db = database ?? Db.For<@(Model.ClassName)>();
            QuerySet query = GetQuerySet(db);
            query.Count<@(Model.ClassName)>();
            query.Execute(db);
            return (long)query.Results[0].DataRow[0];
        }

		/// <summary>
		/// Execute a query and return the number of results
		/// </summary>
		/// <param name="where">A WhereDelegate that recieves a @(Model.ClassName)Columns 
		/// and returns a IQueryFilter which is the result of any comparisons
		/// between @(Model.ClassName)Columns and other values
		/// </param>
		/// <param name="db"></param>
		public static long Count(WhereDelegate<@(Model.ClassName)Columns> where, Database database = null)
		{
			@(Model.ClassName)Columns c = new @(Model.ClassName)Columns();
			IQueryFilter filter = where(c) ;

			Database db = database ?? Db.For<@(Model.ClassName)>();
			QuerySet query = GetQuerySet(db);	 
			query.Count<@(Model.ClassName)>();
			query.Where(filter);	  
			query.Execute(db);
			return query.Results.As<CountResult>(0).Value;
		}

		private static @(Model.ClassName) CreateFromFilter(IQueryFilter filter, Database database = null)
		{
			Database db = database ?? Db.For<@(Model.ClassName)>();			
			var dao = new @(Model.ClassName)();
			filter.Parameters.Each(p=>
			{
				dao.Property(p.ColumnName, p.Value);
			});
			dao.Save(db);
			return dao;
		}
		
		private static @(Model.ClassName) OneOrThrow(@(Model.ClassName)Collection c)
		{
			if(c.Count == 1)
			{
				return c[0];
			}
			else if(c.Count > 1)
			{
				throw new MultipleEntriesFoundException();
			}

			return null;
		}

	}
}																								
